
AVRASM ver. 2.1.30  \\VBOXSVR\virtual_share\Micro Lab\test2_MaryamSaeedmehr_9629373\codevision\Debug\List\test2.asm Mon Mar 08 03:11:12 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _digit:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 004a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * test 2:   Introduction to I/O ports(Complementary)
                 ; *
                 ; * Created:  3/7/2021 9:11:54 PM
                 ; * Author:   Maryam Saeedmehr
                 ; * Std.NO:   9629373
                 ; */
                 ;
                 ;#include "configuration.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Main Function ----------------------------------------------------------
                 ;void main(void)
                 ; 0000 000D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000E     // I/O configuration ---------------------
                 ; 0000 000F     ioConfiguration(portA, input);
00004a e0e1      	LDI  R30,LOW(1)
00004b 93ea      	ST   -Y,R30
00004c e0a0      	LDI  R26,LOW(0)
00004d d023      	RCALL _ioConfiguration
                 ; 0000 0010     ioConfiguration(portB, output);
00004e e0e2      	LDI  R30,LOW(2)
00004f 93ea      	ST   -Y,R30
000050 efaf      	LDI  R26,LOW(255)
000051 d01f      	RCALL _ioConfiguration
                 ; 0000 0011     ioConfiguration(portC, output);
000052 e0e3      	LDI  R30,LOW(3)
000053 93ea      	ST   -Y,R30
000054 efaf      	LDI  R26,LOW(255)
000055 d01b      	RCALL _ioConfiguration
                 ; 0000 0012     ioConfiguration(portD, inOut);
000056 e0e4      	LDI  R30,LOW(4)
000057 93ea      	ST   -Y,R30
000058 e0af      	LDI  R26,LOW(15)
000059 d017      	RCALL _ioConfiguration
                 ; 0000 0013 
                 ; 0000 0014     // flowchart ------------------------------
                 ; 0000 0015     subRoutine1(portB, 2, 400);
00005a e0e2      	LDI  R30,LOW(2)
00005b 93ea      	ST   -Y,R30
00005c 93ea      	ST   -Y,R30
00005d e9a0      	LDI  R26,LOW(400)
00005e e0b1      	LDI  R27,HIGH(400)
00005f d02d      	RCALL _subRoutine1
                 ; 0000 0016     subRoutine2(4, 3000); // start at PORTB.4
000060 e0e4      	LDI  R30,LOW(4)
000061 93ea      	ST   -Y,R30
000062 eba8      	LDI  R26,LOW(3000)
000063 e0bb      	LDI  R27,HIGH(3000)
000064 d072      	RCALL _subRoutine2
                 ; 0000 0017     subRoutine4(up, segment1);
000065 e0e0      	LDI  R30,LOW(0)
000066 93ea      	ST   -Y,R30
000067 e0a1      	LDI  R26,LOW(1)
000068 d0d7      	RCALL _subRoutine4
                 ; 0000 0018 
                 ; 0000 0019     while (1)
                 _0x3:
                 ; 0000 001A     {
                 ; 0000 001B         subRoutine3(portA, portB);
000069 e0e1      	LDI  R30,LOW(1)
00006a 93ea      	ST   -Y,R30
00006b e0a2      	LDI  R26,LOW(2)
00006c d093      	RCALL _subRoutine3
                 ; 0000 001C         subRoutine5(1); // step size = 1*0.1
00006d e0a1      	LDI  R26,LOW(1)
00006e d118      	RCALL _subRoutine5
                 ; 0000 001D     }
00006f cff9      	RJMP _0x3
                 ; 0000 001E }
                 _0x6:
000070 cfff      	RJMP _0x6
                 ; .FEND
                 ;/*
                 ; * test 2:   Introduction to I/O ports(Complementary)
                 ; *
                 ; *
                 ; * Created:  3/7/2021 9:11:54 PM
                 ; * Author:   Maryam Saeedmehr
                 ; * Std.NO:   9629373
                 ; */
                 ;
                 ;#include "configuration.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;// Global Variables definition ------------------------------------------
                 ;unsigned char i; // for-loop variable
                 ;unsigned char number; /* variable for subRoutine5 -> number = PINA
                 ;and for subRoutine3 used as a temporary variable */
                 ;unsigned char number_digit[4] = {0}; // separated number's digits
                 ;flash unsigned char digit[] = {
                 ;    // to show digits in 7-segments
                 ;    0x3F, // 0
                 ;    0x06, // 1
                 ;    0x5B, // 2
                 ;    0x4F, // 3
                 ;    0x66, // 4
                 ;    0x6D, // 5
                 ;    0x7D, // 6
                 ;    0x07, // 7
                 ;    0x7F, // 8
                 ;    0x6F  // 9
                 ;};
                 ;
                 ;// I/O configuration -----------------------------------------------------
                 ;void ioConfiguration(char portSel, char config){
                 ; 0001 0020 void ioConfiguration(char portSel, char config){
                 
                 	.CSEG
                 _ioConfiguration:
                 ; .FSTART _ioConfiguration
                 ; 0001 0021     switch (portSel)
000071 d195      	RCALL SUBOPT_0x0
                 ;	portSel -> Y+1
                 ;	config -> Y+0
                 ; 0001 0022     {
                 ; 0001 0023     case 1:
000072 f419      	BRNE _0x20006
                 ; 0001 0024         DDRA = config;
000073 81e8      	LD   R30,Y
000074 bbea      	OUT  0x1A,R30
                 ; 0001 0025         break;
000075 c016      	RJMP _0x20005
                 ; 0001 0026     case 2:
                 _0x20006:
000076 30e2      	CPI  R30,LOW(0x2)
000077 e0a0      	LDI  R26,HIGH(0x2)
000078 07fa      	CPC  R31,R26
000079 f419      	BRNE _0x20007
                 ; 0001 0027         DDRB = config;
00007a 81e8      	LD   R30,Y
00007b bbe7      	OUT  0x17,R30
                 ; 0001 0028         break;
00007c c00f      	RJMP _0x20005
                 ; 0001 0029     case 3:
                 _0x20007:
00007d 30e3      	CPI  R30,LOW(0x3)
00007e e0a0      	LDI  R26,HIGH(0x3)
00007f 07fa      	CPC  R31,R26
000080 f419      	BRNE _0x20008
                 ; 0001 002A         DDRC = config;
000081 81e8      	LD   R30,Y
000082 bbe4      	OUT  0x14,R30
                 ; 0001 002B         break;
000083 c008      	RJMP _0x20005
                 ; 0001 002C     case 4:
                 _0x20008:
000084 30e4      	CPI  R30,LOW(0x4)
000085 e0a0      	LDI  R26,HIGH(0x4)
000086 07fa      	CPC  R31,R26
000087 f419      	BRNE _0x2000A
                 ; 0001 002D         DDRD = config;
000088 81e8      	LD   R30,Y
000089 bbe1      	OUT  0x11,R30
                 ; 0001 002E         break;
00008a c001      	RJMP _0x20005
                 ; 0001 002F     default:
                 _0x2000A:
                 ; 0001 0030         return;
00008b c0f9      	RJMP _0x2000002
                 ; 0001 0031     }
                 _0x20005:
                 ; 0001 0032 }
00008c c0f8      	RJMP _0x2000002
                 ; .FEND
                 ;
                 ;// Subroutines Implementation ---------------------------------------------
                 ;void subRoutine1(char portSel, char turningOn, uint16_t delay)
                 ; 0001 0036 {
                 _subRoutine1:
                 ; .FSTART _subRoutine1
                 ; 0001 0037     switch (portSel)
00008d 93ba      	ST   -Y,R27
00008e 93aa      	ST   -Y,R26
                 ;	portSel -> Y+3
                 ;	turningOn -> Y+2
                 ;	delay -> Y+0
00008f 81eb      	LDD  R30,Y+3
000090 d17d      	RCALL SUBOPT_0x1
                 ; 0001 0038     {
                 ; 0001 0039     case 1:
000091 f471      	BRNE _0x2000E
                 ; 0001 003A         for (i = 0; i < turningOn; i++)
000092 e0e0      	LDI  R30,LOW(0)
000093 93e0 0160 	STS  _i,R30
                 _0x20010:
000095 d17d      	RCALL SUBOPT_0x2
000096 f440      	BRSH _0x20011
                 ; 0001 003B         {
                 ; 0001 003C             PORTA = 0xFF; // turn on all LEDs
000097 efef      	LDI  R30,LOW(255)
000098 bbeb      	OUT  0x1B,R30
                 ; 0001 003D             delay_ms(delay);
000099 d17e      	RCALL SUBOPT_0x3
                 ; 0001 003E             PORTA = 0x00; // turn off all LEDs
00009a e0e0      	LDI  R30,LOW(0)
00009b bbeb      	OUT  0x1B,R30
                 ; 0001 003F             delay_ms(delay);
00009c d17b      	RCALL SUBOPT_0x3
                 ; 0001 0040         }
00009d d17e      	RCALL SUBOPT_0x4
00009e cff6      	RJMP _0x20010
                 _0x20011:
                 ; 0001 0041         break;
00009f c035      	RJMP _0x2000D
                 ; 0001 0042     case 2:
                 _0x2000E:
0000a0 30e2      	CPI  R30,LOW(0x2)
0000a1 e0a0      	LDI  R26,HIGH(0x2)
0000a2 07fa      	CPC  R31,R26
0000a3 f471      	BRNE _0x20012
                 ; 0001 0043         for (i = 0; i < turningOn; i++)
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 93e0 0160 	STS  _i,R30
                 _0x20014:
0000a7 d16b      	RCALL SUBOPT_0x2
0000a8 f440      	BRSH _0x20015
                 ; 0001 0044         {
                 ; 0001 0045             PORTB = 0xFF; // turn on all LEDs
0000a9 efef      	LDI  R30,LOW(255)
0000aa bbe8      	OUT  0x18,R30
                 ; 0001 0046             delay_ms(delay);
0000ab d16c      	RCALL SUBOPT_0x3
                 ; 0001 0047             PORTB = 0x00; // turn off all LEDs
0000ac e0e0      	LDI  R30,LOW(0)
0000ad bbe8      	OUT  0x18,R30
                 ; 0001 0048             delay_ms(delay);
0000ae d169      	RCALL SUBOPT_0x3
                 ; 0001 0049         }
0000af d16c      	RCALL SUBOPT_0x4
0000b0 cff6      	RJMP _0x20014
                 _0x20015:
                 ; 0001 004A         break;
0000b1 c023      	RJMP _0x2000D
                 ; 0001 004B     case 3:
                 _0x20012:
0000b2 30e3      	CPI  R30,LOW(0x3)
0000b3 e0a0      	LDI  R26,HIGH(0x3)
0000b4 07fa      	CPC  R31,R26
0000b5 f471      	BRNE _0x20016
                 ; 0001 004C         for (i = 0; i < turningOn; i++)
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 93e0 0160 	STS  _i,R30
                 _0x20018:
0000b9 d159      	RCALL SUBOPT_0x2
0000ba f440      	BRSH _0x20019
                 ; 0001 004D         {
                 ; 0001 004E             PORTC = 0xFF; // turn on all LEDs
0000bb efef      	LDI  R30,LOW(255)
0000bc bbe5      	OUT  0x15,R30
                 ; 0001 004F             delay_ms(delay);
0000bd d15a      	RCALL SUBOPT_0x3
                 ; 0001 0050             PORTC = 0x00; // turn off all LEDs
0000be e0e0      	LDI  R30,LOW(0)
0000bf bbe5      	OUT  0x15,R30
                 ; 0001 0051             delay_ms(delay);
0000c0 d157      	RCALL SUBOPT_0x3
                 ; 0001 0052         }
0000c1 d15a      	RCALL SUBOPT_0x4
0000c2 cff6      	RJMP _0x20018
                 _0x20019:
                 ; 0001 0053         break;
0000c3 c011      	RJMP _0x2000D
                 ; 0001 0054     case 4:
                 _0x20016:
0000c4 30e4      	CPI  R30,LOW(0x4)
0000c5 e0a0      	LDI  R26,HIGH(0x4)
0000c6 07fa      	CPC  R31,R26
0000c7 f469      	BRNE _0x2001E
                 ; 0001 0055         for (i = 0; i < turningOn; i++)
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 93e0 0160 	STS  _i,R30
                 _0x2001C:
0000cb d147      	RCALL SUBOPT_0x2
0000cc f440      	BRSH _0x2001D
                 ; 0001 0056         {
                 ; 0001 0057             PORTD = 0xFF; // turn on all LEDs
0000cd efef      	LDI  R30,LOW(255)
0000ce bbe2      	OUT  0x12,R30
                 ; 0001 0058             delay_ms(delay);
0000cf d148      	RCALL SUBOPT_0x3
                 ; 0001 0059             PORTD = 0x00; // turn off all LEDs
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 bbe2      	OUT  0x12,R30
                 ; 0001 005A             delay_ms(delay);
0000d2 d145      	RCALL SUBOPT_0x3
                 ; 0001 005B         }
0000d3 d148      	RCALL SUBOPT_0x4
0000d4 cff6      	RJMP _0x2001C
                 _0x2001D:
                 ; 0001 005C         break;
                 ; 0001 005D     default:
                 _0x2001E:
                 ; 0001 005E         return;
                 ; 0001 005F     }
                 _0x2000D:
                 ; 0001 0060 }
                 _0x2000003:
0000d5 9624      	ADIW R28,4
0000d6 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine2(char x, uint16_t duration)
                 ; 0001 0063 {
                 _subRoutine2:
                 ; .FSTART _subRoutine2
                 ; 0001 0064     for (i = 0; i < 8; i++)
0000d7 93ba      	ST   -Y,R27
0000d8 93aa      	ST   -Y,R26
                 ;	x -> Y+2
                 ;	duration -> Y+0
0000d9 e0e0      	LDI  R30,LOW(0)
0000da 93e0 0160 	STS  _i,R30
                 _0x20020:
0000dc 91a0 0160 	LDS  R26,_i
0000de 30a8      	CPI  R26,LOW(0x8)
0000df f4e0      	BRSH _0x20021
                 ; 0001 0065     {
                 ; 0001 0066         PORTB = 1 << (i + x - 1) % 8; // turn on i'th LED
0000e0 27bb      	CLR  R27
0000e1 81ea      	LDD  R30,Y+2
0000e2 e0f0      	LDI  R31,0
0000e3 0fae      	ADD  R26,R30
0000e4 1fbf      	ADC  R27,R31
0000e5 e0e1      	LDI  R30,LOW(1)
0000e6 e0f0      	LDI  R31,HIGH(1)
0000e7 940e 028d 	CALL __SWAPW12
0000e9 1bea      	SUB  R30,R26
0000ea 0bfb      	SBC  R31,R27
0000eb e0a7      	LDI  R26,LOW(7)
0000ec e0b0      	LDI  R27,HIGH(7)
0000ed 940e 0275 	CALL __MANDW12
0000ef e0a1      	LDI  R26,LOW(1)
0000f0 940e 0240 	CALL __LSLB12
0000f2 bbe8      	OUT  0x18,R30
                 ; 0001 0067         delay_ms(duration/8); // 8*duration/8 ms = duration sec
0000f3 81e8      	LD   R30,Y
0000f4 81f9      	LDD  R31,Y+1
0000f5 940e 0248 	CALL __LSRW3
0000f7 01df      	MOVW R26,R30
0000f8 940e 0232 	CALL _delay_ms
                 ; 0001 0068     }
0000fa d121      	RCALL SUBOPT_0x4
0000fb cfe0      	RJMP _0x20020
                 _0x20021:
                 ; 0001 0069     PORTB = 0x00;
0000fc e0e0      	LDI  R30,LOW(0)
0000fd bbe8      	OUT  0x18,R30
                 ; 0001 006A }
0000fe 9623      	ADIW R28,3
0000ff 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine3(char inPort, char outPort)
                 ; 0001 006D {
                 _subRoutine3:
                 ; .FSTART _subRoutine3
                 ; 0001 006E     switch (inPort)
000100 d106      	RCALL SUBOPT_0x0
                 ;	inPort -> Y+1
                 ;	outPort -> Y+0
                 ; 0001 006F     {
                 ; 0001 0070     case 1:
000101 f421      	BRNE _0x20025
                 ; 0001 0071         number = PINA;
000102 b3e9      	IN   R30,0x19
000103 93e0 0161 	STS  _number,R30
                 ; 0001 0072         break;
000105 c019      	RJMP _0x20024
                 ; 0001 0073     case 2:
                 _0x20025:
000106 30e2      	CPI  R30,LOW(0x2)
000107 e0a0      	LDI  R26,HIGH(0x2)
000108 07fa      	CPC  R31,R26
000109 f421      	BRNE _0x20026
                 ; 0001 0074         number = PINB;
00010a b3e6      	IN   R30,0x16
00010b 93e0 0161 	STS  _number,R30
                 ; 0001 0075         break;
00010d c011      	RJMP _0x20024
                 ; 0001 0076     case 3:
                 _0x20026:
00010e 30e3      	CPI  R30,LOW(0x3)
00010f e0a0      	LDI  R26,HIGH(0x3)
000110 07fa      	CPC  R31,R26
000111 f421      	BRNE _0x20027
                 ; 0001 0077         number = PINC;
000112 b3e3      	IN   R30,0x13
000113 93e0 0161 	STS  _number,R30
                 ; 0001 0078         break;
000115 c009      	RJMP _0x20024
                 ; 0001 0079     case 4:
                 _0x20027:
000116 30e4      	CPI  R30,LOW(0x4)
000117 e0a0      	LDI  R26,HIGH(0x4)
000118 07fa      	CPC  R31,R26
000119 f421      	BRNE _0x20029
                 ; 0001 007A         number = PIND;
00011a b3e0      	IN   R30,0x10
00011b 93e0 0161 	STS  _number,R30
                 ; 0001 007B         break;
00011d c001      	RJMP _0x20024
                 ; 0001 007C     default:
                 _0x20029:
                 ; 0001 007D         return;
00011e c066      	RJMP _0x2000002
                 ; 0001 007E     }
                 _0x20024:
                 ; 0001 007F     switch (outPort)
00011f 81e8      	LD   R30,Y
000120 d0ed      	RCALL SUBOPT_0x1
                 ; 0001 0080     {
                 ; 0001 0081     case 1:
000121 f421      	BRNE _0x2002D
                 ; 0001 0082         PORTA = number;
000122 91e0 0161 	LDS  R30,_number
000124 bbeb      	OUT  0x1B,R30
                 ; 0001 0083         break;
000125 c019      	RJMP _0x2002C
                 ; 0001 0084     case 2:
                 _0x2002D:
000126 30e2      	CPI  R30,LOW(0x2)
000127 e0a0      	LDI  R26,HIGH(0x2)
000128 07fa      	CPC  R31,R26
000129 f421      	BRNE _0x2002E
                 ; 0001 0085         PORTB = number;
00012a 91e0 0161 	LDS  R30,_number
00012c bbe8      	OUT  0x18,R30
                 ; 0001 0086         break;
00012d c011      	RJMP _0x2002C
                 ; 0001 0087     case 3:
                 _0x2002E:
00012e 30e3      	CPI  R30,LOW(0x3)
00012f e0a0      	LDI  R26,HIGH(0x3)
000130 07fa      	CPC  R31,R26
000131 f421      	BRNE _0x2002F
                 ; 0001 0088         PORTC = number;
000132 91e0 0161 	LDS  R30,_number
000134 bbe5      	OUT  0x15,R30
                 ; 0001 0089         break;
000135 c009      	RJMP _0x2002C
                 ; 0001 008A     case 4:
                 _0x2002F:
000136 30e4      	CPI  R30,LOW(0x4)
000137 e0a0      	LDI  R26,HIGH(0x4)
000138 07fa      	CPC  R31,R26
000139 f421      	BRNE _0x20031
                 ; 0001 008B         PORTD = number;
00013a 91e0 0161 	LDS  R30,_number
00013c bbe2      	OUT  0x12,R30
                 ; 0001 008C         break;
00013d c001      	RJMP _0x2002C
                 ; 0001 008D     default:
                 _0x20031:
                 ; 0001 008E         return;
00013e c046      	RJMP _0x2000002
                 ; 0001 008F     }
                 _0x2002C:
                 ; 0001 0090 }
00013f c045      	RJMP _0x2000002
                 ; .FEND
                 ;
                 ;void subRoutine4(char direction, char segment)
                 ; 0001 0093 {
                 _subRoutine4:
                 ; .FSTART _subRoutine4
                 ; 0001 0094     switch (segment)
000140 93aa      	ST   -Y,R26
                 ;	direction -> Y+1
                 ;	segment -> Y+0
000141 81e8      	LD   R30,Y
000142 d0cb      	RCALL SUBOPT_0x1
                 ; 0001 0095     {
                 ; 0001 0096     case 1:
000143 f419      	BRNE _0x20035
                 ; 0001 0097         PORTD = 0X0E; // enable first segment
000144 e0ee      	LDI  R30,LOW(14)
000145 bbe2      	OUT  0x12,R30
                 ; 0001 0098         break;
000146 c01d      	RJMP _0x20034
                 ; 0001 0099     case 2:
                 _0x20035:
000147 30e2      	CPI  R30,LOW(0x2)
000148 e0a0      	LDI  R26,HIGH(0x2)
000149 07fa      	CPC  R31,R26
00014a f419      	BRNE _0x20036
                 ; 0001 009A         PORTD = 0X0D; // enable second segment
00014b e0ed      	LDI  R30,LOW(13)
00014c bbe2      	OUT  0x12,R30
                 ; 0001 009B         break;
00014d c016      	RJMP _0x20034
                 ; 0001 009C     case 3:
                 _0x20036:
00014e 30e3      	CPI  R30,LOW(0x3)
00014f e0a0      	LDI  R26,HIGH(0x3)
000150 07fa      	CPC  R31,R26
000151 f419      	BRNE _0x20037
                 ; 0001 009D         PORTD = 0X0B; // enable third segment
000152 e0eb      	LDI  R30,LOW(11)
000153 bbe2      	OUT  0x12,R30
                 ; 0001 009E         break;
000154 c00f      	RJMP _0x20034
                 ; 0001 009F     case 4:
                 _0x20037:
000155 30e4      	CPI  R30,LOW(0x4)
000156 e0a0      	LDI  R26,HIGH(0x4)
000157 07fa      	CPC  R31,R26
000158 f419      	BRNE _0x20038
                 ; 0001 00A0         PORTD = 0X07; // enable fourth segment
000159 e0e7      	LDI  R30,LOW(7)
00015a bbe2      	OUT  0x12,R30
                 ; 0001 00A1         break;
00015b c008      	RJMP _0x20034
                 ; 0001 00A2     case 5:
                 _0x20038:
00015c 30e5      	CPI  R30,LOW(0x5)
00015d e0a0      	LDI  R26,HIGH(0x5)
00015e 07fa      	CPC  R31,R26
00015f f419      	BRNE _0x2003A
                 ; 0001 00A3         PORTD = 0X00; // enable all 7-segments
000160 e0e0      	LDI  R30,LOW(0)
000161 bbe2      	OUT  0x12,R30
                 ; 0001 00A4         break;
000162 c001      	RJMP _0x20034
                 ; 0001 00A5     default:
                 _0x2003A:
                 ; 0001 00A6         return;
000163 c021      	RJMP _0x2000002
                 ; 0001 00A7     }
                 _0x20034:
                 ; 0001 00A8 
                 ; 0001 00A9     switch (direction)
000164 81e9      	LDD  R30,Y+1
000165 e0f0      	LDI  R31,0
                 ; 0001 00AA     {
                 ; 0001 00AB     case 0: // up
000166 9730      	SBIW R30,0
000167 f459      	BRNE _0x2003E
                 ; 0001 00AC         for (i = 0; i < 10; i++)
000168 e0e0      	LDI  R30,LOW(0)
000169 93e0 0160 	STS  _i,R30
                 _0x20040:
00016b 91a0 0160 	LDS  R26,_i
00016d 30aa      	CPI  R26,LOW(0xA)
00016e f418      	BRSH _0x20041
                 ; 0001 00AD         {
                 ; 0001 00AE             // in unsigned char : 0x00 - 0x01 = 0xFF
                 ; 0001 00AF             // so stop condition is "i != 0xFF"
                 ; 0001 00B0             PORTC = digit[i];
00016f d0b2      	RCALL SUBOPT_0x5
                 ; 0001 00B1             delay_ms(1000);
                 ; 0001 00B2         }
000170 d0ab      	RCALL SUBOPT_0x4
000171 cff9      	RJMP _0x20040
                 _0x20041:
                 ; 0001 00B3         break;
000172 c012      	RJMP _0x2003D
                 ; 0001 00B4     case 1: // down
                 _0x2003E:
000173 30e1      	CPI  R30,LOW(0x1)
000174 e0a0      	LDI  R26,HIGH(0x1)
000175 07fa      	CPC  R31,R26
000176 f471      	BRNE _0x20046
                 ; 0001 00B5         for (i = 9; i != 0xFF; i--)
000177 e0e9      	LDI  R30,LOW(9)
000178 93e0 0160 	STS  _i,R30
                 _0x20044:
00017a 91a0 0160 	LDS  R26,_i
00017c 3faf      	CPI  R26,LOW(0xFF)
00017d f039      	BREQ _0x20045
                 ; 0001 00B6         {
                 ; 0001 00B7             // in unsigned char : 0x00 - 0x01 = 0xFF
                 ; 0001 00B8             // so stop condition is "i != 0xFF"
                 ; 0001 00B9             PORTC = digit[i];
00017e d0a3      	RCALL SUBOPT_0x5
                 ; 0001 00BA             delay_ms(1000);
                 ; 0001 00BB         }
00017f 91e0 0160 	LDS  R30,_i
000181 50e1      	SUBI R30,LOW(1)
000182 93e0 0160 	STS  _i,R30
000184 cff5      	RJMP _0x20044
                 _0x20045:
                 ; 0001 00BC         break;
                 ; 0001 00BD     default:
                 _0x20046:
                 ; 0001 00BE         return;
                 ; 0001 00BF     }
                 _0x2003D:
                 ; 0001 00C0 }
                 _0x2000002:
000185 9622      	ADIW R28,2
000186 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine5(char stepSize)
                 ; 0001 00C3 {
                 _subRoutine5:
                 ; .FSTART _subRoutine5
                 ; 0001 00C4     number = PINA;
000187 93aa      	ST   -Y,R26
                 ;	stepSize -> Y+0
000188 b3e9      	IN   R30,0x19
000189 93e0 0161 	STS  _number,R30
                 ; 0001 00C5     while (number != 0)
                 _0x20047:
00018b 91e0 0161 	LDS  R30,_number
00018d 30e0      	CPI  R30,0
00018e f409      	BRNE PC+2
00018f c075      	RJMP _0x20049
                 ; 0001 00C6     {
                 ; 0001 00C7         // extract decimal digits---------------------------
                 ; 0001 00C8         number_digit[1] = (number) % 10; // ones
000190 91a0 0161 	LDS  R26,_number
000192 27bb      	CLR  R27
000193 d099      	RCALL SUBOPT_0x6
                +
000194 93e0 0163+STS _number_digit + ( 1 ) , R30
                 	__PUTB1MN _number_digit,1
                 ; 0001 00C9         number_digit[2] = (number / 10) % 10; // tens
000196 91a0 0161 	LDS  R26,_number
000198 e0b0      	LDI  R27,0
000199 e0ea      	LDI  R30,LOW(10)
00019a e0f0      	LDI  R31,HIGH(10)
00019b 940e 0262 	CALL __DIVW21
00019d 01df      	MOVW R26,R30
00019e d08e      	RCALL SUBOPT_0x6
                +
00019f 93e0 0164+STS _number_digit + ( 2 ) , R30
                 	__PUTB1MN _number_digit,2
                 ; 0001 00CA         number_digit[3] = (number / 100) % 10; // hundreds
0001a1 91a0 0161 	LDS  R26,_number
0001a3 e0b0      	LDI  R27,0
0001a4 e6e4      	LDI  R30,LOW(100)
0001a5 e0f0      	LDI  R31,HIGH(100)
0001a6 940e 0262 	CALL __DIVW21
0001a8 01df      	MOVW R26,R30
0001a9 d083      	RCALL SUBOPT_0x6
                +
0001aa 93e0 0165+STS _number_digit + ( 3 ) , R30
                 	__PUTB1MN _number_digit,3
                 ; 0001 00CB 
                 ; 0001 00CC         // set 7-segments ----------------------------------
                 ; 0001 00CD         for (i = 0; i < 20; i++)
0001ac e0e0      	LDI  R30,LOW(0)
0001ad 93e0 0160 	STS  _i,R30
                 _0x2004B:
0001af 91a0 0160 	LDS  R26,_i
0001b1 31a4      	CPI  R26,LOW(0x14)
0001b2 f598      	BRSH _0x2004C
                 ; 0001 00CE         {
                 ; 0001 00CF             PORTD = ~( 1 << i%4 );
0001b3 91e0 0160 	LDS  R30,_i
0001b5 e0f0      	LDI  R31,0
0001b6 e0a3      	LDI  R26,LOW(3)
0001b7 e0b0      	LDI  R27,HIGH(3)
0001b8 940e 0275 	CALL __MANDW12
0001ba e0a1      	LDI  R26,LOW(1)
0001bb 940e 0240 	CALL __LSLB12
0001bd 95e0      	COM  R30
0001be bbe2      	OUT  0x12,R30
                 ; 0001 00D0             /*
                 ; 0001 00D1             * 0b1111_1110 -> set hundreds
                 ; 0001 00D2             * 0b1111_1101 -> set tens
                 ; 0001 00D3             * 0b1111_1011 -> set ones
                 ; 0001 00D4             * 0b1111_0111 -> set one tenth
                 ; 0001 00D5             */
                 ; 0001 00D6             PORTC = i%4 == 2
                 ; 0001 00D7                     ? digit[number_digit[1]] | 0x80 // turn on DP
                 ; 0001 00D8                     : digit[number_digit[3-i%4]];
0001bf 91a0 0160 	LDS  R26,_i
0001c1 27bb      	CLR  R27
0001c2 e0e4      	LDI  R30,LOW(4)
0001c3 e0f0      	LDI  R31,HIGH(4)
0001c4 940e 0267 	CALL __MODW21
0001c6 01df      	MOVW R26,R30
0001c7 9732      	SBIW R30,2
0001c8 f441      	BRNE _0x2004D
                +
0001c9 91e0 0163+LDS R30 , _number_digit + ( 1 )
                 	__GETB1MN _number_digit,1
0001cb e0f0      	LDI  R31,0
0001cc 5aec      	SUBI R30,LOW(-_digit*2)
0001cd 4fff      	SBCI R31,HIGH(-_digit*2)
0001ce 91e4      	LPM  R30,Z
0001cf 68e0      	ORI  R30,0x80
0001d0 c00e      	RJMP _0x2004E
                 _0x2004D:
0001d1 01fd      	MOVW R30,R26
0001d2 e0a3      	LDI  R26,LOW(3)
0001d3 e0b0      	LDI  R27,HIGH(3)
0001d4 940e 028d 	CALL __SWAPW12
0001d6 1bea      	SUB  R30,R26
0001d7 0bfb      	SBC  R31,R27
0001d8 59ee      	SUBI R30,LOW(-_number_digit)
0001d9 4ffe      	SBCI R31,HIGH(-_number_digit)
0001da 81e0      	LD   R30,Z
0001db e0f0      	LDI  R31,0
0001dc 5aec      	SUBI R30,LOW(-_digit*2)
0001dd 4fff      	SBCI R31,HIGH(-_digit*2)
0001de 91e4      	LPM  R30,Z
                 _0x2004E:
0001df bbe5      	OUT  0x15,R30
                 ; 0001 00D9             delay_ms(5);
0001e0 e0a5      	LDI  R26,LOW(5)
0001e1 e0b0      	LDI  R27,0
0001e2 940e 0232 	CALL _delay_ms
                 ; 0001 00DA         }
0001e4 d037      	RCALL SUBOPT_0x4
0001e5 cfc9      	RJMP _0x2004B
                 _0x2004C:
                 ; 0001 00DB         // 20 * 5 = 100ms -> frequency = 100ms
                 ; 0001 00DC 
                 ; 0001 00DD         // reduce 0.1*stepSize ------------------------------
                 ; 0001 00DE         if (stepSize > 10 || stepSize < 1) return;
0001e6 81a8      	LD   R26,Y
0001e7 30ab      	CPI  R26,LOW(0xB)
0001e8 f410      	BRSH _0x20051
0001e9 30a1      	CPI  R26,LOW(0x1)
0001ea f408      	BRSH _0x20050
                 _0x20051:
0001eb c019      	RJMP _0x2000001
                 ; 0001 00DF         if (number_digit[0]<stepSize)
                 _0x20050:
0001ec 81e8      	LD   R30,Y
0001ed 91a0 0162 	LDS  R26,_number_digit
0001ef 17ae      	CP   R26,R30
0001f0 f468      	BRSH _0x20053
                 ; 0001 00E0         {
                 ; 0001 00E1             number_digit[0] = 10 + (number_digit[0] - stepSize);
0001f1 81a8      	LD   R26,Y
0001f2 91e0 0162 	LDS  R30,_number_digit
0001f4 1bea      	SUB  R30,R26
0001f5 5fe6      	SUBI R30,-LOW(10)
0001f6 93e0 0162 	STS  _number_digit,R30
                 ; 0001 00E2             number--;
0001f8 91e0 0161 	LDS  R30,_number
0001fa 50e1      	SUBI R30,LOW(1)
0001fb 93e0 0161 	STS  _number,R30
                 ; 0001 00E3         }
                 ; 0001 00E4         else
0001fd c006      	RJMP _0x20054
                 _0x20053:
                 ; 0001 00E5         {
                 ; 0001 00E6             number_digit[0] -= stepSize;
0001fe 81a8      	LD   R26,Y
0001ff 91e0 0162 	LDS  R30,_number_digit
000201 1bea      	SUB  R30,R26
000202 93e0 0162 	STS  _number_digit,R30
                 ; 0001 00E7         }
                 _0x20054:
                 ; 0001 00E8     }
000204 cf86      	RJMP _0x20047
                 _0x20049:
                 ; 0001 00E9 }
                 _0x2000001:
000205 9621      	ADIW R28,1
000206 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _i:
000160           	.BYTE 0x1
                 _number:
000161           	.BYTE 0x1
                 _number_digit:
000162           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000207 93aa      	ST   -Y,R26
000208 81e9      	LDD  R30,Y+1
000209 e0f0      	LDI  R31,0
00020a 30e1      	CPI  R30,LOW(0x1)
00020b e0a0      	LDI  R26,HIGH(0x1)
00020c 07fa      	CPC  R31,R26
00020d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00020e e0f0      	LDI  R31,0
00020f 30e1      	CPI  R30,LOW(0x1)
000210 e0a0      	LDI  R26,HIGH(0x1)
000211 07fa      	CPC  R31,R26
000212 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000213 81ea      	LDD  R30,Y+2
000214 91a0 0160 	LDS  R26,_i
000216 17ae      	CP   R26,R30
000217 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
000218 81a8      	LD   R26,Y
000219 81b9      	LDD  R27,Y+1
00021a 940c 0232 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4:
00021c 91e0 0160 	LDS  R30,_i
00021e 5fef      	SUBI R30,-LOW(1)
00021f 93e0 0160 	STS  _i,R30
000221 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
000222 91e0 0160 	LDS  R30,_i
000224 e0f0      	LDI  R31,0
000225 5aec      	SUBI R30,LOW(-_digit*2)
000226 4fff      	SBCI R31,HIGH(-_digit*2)
000227 9004      	LPM  R0,Z
000228 ba05      	OUT  0x15,R0
000229 eea8      	LDI  R26,LOW(1000)
00022a e0b3      	LDI  R27,HIGH(1000)
00022b 940c 0232 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00022d e0ea      	LDI  R30,LOW(10)
00022e e0f0      	LDI  R31,HIGH(10)
00022f 940e 0267 	CALL __MODW21
000231 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000232 9610      	adiw r26,0
000233 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000234 ed80     +LDI R24 , LOW ( 0x7D0 )
000235 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000236 9701     +SBIW R24 , 1
000237 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000238 95a8      	wdr
000239 9711      	sbiw r26,1
00023a f7c9      	brne __delay_ms0
                 __delay_ms1:
00023b 9508      	ret
                 
                 __ANEGW1:
00023c 95f1      	NEG  R31
00023d 95e1      	NEG  R30
00023e 40f0      	SBCI R31,0
00023f 9508      	RET
                 
                 __LSLB12:
000240 23ee      	TST  R30
000241 2e0e      	MOV  R0,R30
000242 2fea      	MOV  R30,R26
000243 f019      	BREQ __LSLB12R
                 __LSLB12L:
000244 0fee      	LSL  R30
000245 940a      	DEC  R0
000246 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000247 9508      	RET
                 
                 __LSRW3:
000248 95f6      	LSR  R31
000249 95e7      	ROR  R30
                 __LSRW2:
00024a 95f6      	LSR  R31
00024b 95e7      	ROR  R30
00024c 95f6      	LSR  R31
00024d 95e7      	ROR  R30
00024e 9508      	RET
                 
                 __DIVW21U:
00024f 2400      	CLR  R0
000250 2411      	CLR  R1
000251 e190      	LDI  R25,16
                 __DIVW21U1:
000252 0faa      	LSL  R26
000253 1fbb      	ROL  R27
000254 1c00      	ROL  R0
000255 1c11      	ROL  R1
000256 1a0e      	SUB  R0,R30
000257 0a1f      	SBC  R1,R31
000258 f418      	BRCC __DIVW21U2
000259 0e0e      	ADD  R0,R30
00025a 1e1f      	ADC  R1,R31
00025b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00025c 60a1      	SBR  R26,1
                 __DIVW21U3:
00025d 959a      	DEC  R25
00025e f799      	BRNE __DIVW21U1
00025f 01fd      	MOVW R30,R26
000260 01d0      	MOVW R26,R0
000261 9508      	RET
                 
                 __DIVW21:
000262 d01c      	RCALL __CHKSIGNW
000263 dfeb      	RCALL __DIVW21U
000264 f40e      	BRTC __DIVW211
000265 dfd6      	RCALL __ANEGW1
                 __DIVW211:
000266 9508      	RET
                 
                 __MODW21:
000267 94e8      	CLT
000268 ffb7      	SBRS R27,7
000269 c004      	RJMP __MODW211
00026a 95a0      	COM  R26
00026b 95b0      	COM  R27
00026c 9611      	ADIW R26,1
00026d 9468      	SET
                 __MODW211:
00026e fdf7      	SBRC R31,7
00026f dfcc      	RCALL __ANEGW1
000270 dfde      	RCALL __DIVW21U
000271 01fd      	MOVW R30,R26
000272 f40e      	BRTC __MODW212
000273 dfc8      	RCALL __ANEGW1
                 __MODW212:
000274 9508      	RET
                 
                 __MANDW12:
000275 94e8      	CLT
000276 fff7      	SBRS R31,7
000277 c002      	RJMP __MANDW121
000278 dfc3      	RCALL __ANEGW1
000279 9468      	SET
                 __MANDW121:
00027a 23ea      	AND  R30,R26
00027b 23fb      	AND  R31,R27
00027c f40e      	BRTC __MANDW122
00027d dfbe      	RCALL __ANEGW1
                 __MANDW122:
00027e 9508      	RET
                 
                 __CHKSIGNW:
00027f 94e8      	CLT
000280 fff7      	SBRS R31,7
000281 c002      	RJMP __CHKSW1
000282 dfb9      	RCALL __ANEGW1
000283 9468      	SET
                 __CHKSW1:
000284 ffb7      	SBRS R27,7
000285 c006      	RJMP __CHKSW2
000286 95a0      	COM  R26
000287 95b0      	COM  R27
000288 9611      	ADIW R26,1
000289 f800      	BLD  R0,0
00028a 9403      	INC  R0
00028b fa00      	BST  R0,0
                 __CHKSW2:
00028c 9508      	RET
                 
                 __SWAPW12:
00028d 2e1b      	MOV  R1,R27
00028e 2fbf      	MOV  R27,R31
00028f 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000290 2e1a      	MOV  R1,R26
000291 2fae      	MOV  R26,R30
000292 2de1      	MOV  R30,R1
000293 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  12 r1 :   8 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   4 r26: 108 r27:  27 r28:   5 r29:   1 r30: 193 r31:  55 
x  :   2 y  :  35 z  :   4 
Registers used: 13 out of 35 (37.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   7 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  31 brpl  :   0 brsh  :  10 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  13 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   5 
cp    :   2 cpc   :  19 cpi   :  26 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   1 jmp   :  24 ld    :  13 ldd   :   7 ldi   : 105 
lds   :  23 lpm   :   6 lsl   :   2 lsr   :   3 mov   :   8 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   1 out   :  32 pop   :   0 push  :   0 rcall :  47 ret   :  19 
reti  :   0 rjmp  :  47 rol   :   3 ror   :   3 sbc   :   3 sbci  :   5 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  18 std   :   0 sts   :  21 sub   :   5 subi  :   8 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000528   1310     10   1320   16384   8.1%
[.dseg] 0x000060 0x000166      0      6      6    1024   0.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
