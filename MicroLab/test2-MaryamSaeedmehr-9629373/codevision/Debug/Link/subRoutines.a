;/*
; * test 2:   Introduction to I/O ports(Complementary)
; *
; *
; * Created:  3/7/2021 9:11:54 PM
; * Author:   Maryam Saeedmehr
; * Std.NO:   9629373
; */
;
;#include "configuration.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Global Variables definition ------------------------------------------
;unsigned char i; // for-loop variable
;unsigned char number; /* variable for subRoutine5 -> number = PINA
;and for subRoutine3 used as a temporary variable */
;unsigned char number_digit[4] = {0}; // separated number's digits
;flash unsigned char digit[] = {
;    // to show digits in 7-segments
;    0x3F, // 0
;    0x06, // 1
;    0x5B, // 2
;    0x4F, // 3
;    0x66, // 4
;    0x6D, // 5
;    0x7D, // 6
;    0x07, // 7
;    0x7F, // 8
;    0x6F  // 9
;};
;
;// I/O configuration -----------------------------------------------------
;void ioConfiguration(char portSel, char config){
; 0001 0020 void ioConfiguration(char portSel, char config){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0021     switch (portSel)
;PCODE: $0000000F VOL: 0
;	portSel -> Y+1
;	config -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0022     {
; 0001 0023     case 1:
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 0024         DDRA = config;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 0025         break;
;PCODE: $00000016 VOL: 0
; 0001 0026     case 2:
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 0027         DDRB = config;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0028         break;
;PCODE: $0000001C VOL: 0
; 0001 0029     case 3:
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 002A         DDRC = config;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 002B         break;
;PCODE: $00000022 VOL: 0
; 0001 002C     case 4:
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 002D         DDRD = config;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 002E         break;
;PCODE: $00000028 VOL: 0
; 0001 002F     default:
;PCODE: $00000029 VOL: 0
; 0001 0030         return;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0031     }
;PCODE: $0000002C VOL: 0
; 0001 0032 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;// Subroutines Implementation ---------------------------------------------
;void subRoutine1(char portSel, char turningOn, uint16_t delay)
; 0001 0036 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0037     switch (portSel)
;PCODE: $00000032 VOL: 0
;	portSel -> Y+3
;	turningOn -> Y+2
;	delay -> Y+0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0038     {
; 0001 0039     case 1:
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 003A         for (i = 0; i < turningOn; i++)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 003B         {
; 0001 003C             PORTA = 0xFF; // turn on all LEDs
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 003D             delay_ms(delay);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 003E             PORTA = 0x00; // turn off all LEDs
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 003F             delay_ms(delay);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0040         }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 0041         break;
;PCODE: $00000050 VOL: 0
; 0001 0042     case 2:
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 0043         for (i = 0; i < turningOn; i++)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 0044         {
; 0001 0045             PORTB = 0xFF; // turn on all LEDs
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0046             delay_ms(delay);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 0047             PORTB = 0x00; // turn off all LEDs
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 0048             delay_ms(delay);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 0049         }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 004A         break;
;PCODE: $0000006D VOL: 0
; 0001 004B     case 3:
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 004C         for (i = 0; i < turningOn; i++)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 004D         {
; 0001 004E             PORTC = 0xFF; // turn on all LEDs
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 004F             delay_ms(delay);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0001 0050             PORTC = 0x00; // turn off all LEDs
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 0051             delay_ms(delay);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0052         }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 0053         break;
;PCODE: $0000008A VOL: 0
; 0001 0054     case 4:
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0055         for (i = 0; i < turningOn; i++)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0056         {
; 0001 0057             PORTD = 0xFF; // turn on all LEDs
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 0058             delay_ms(delay);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0059             PORTD = 0x00; // turn off all LEDs
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 005A             delay_ms(delay);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 005B         }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 005C         break;
;PCODE: $000000A7 VOL: 0
; 0001 005D     default:
;PCODE: $000000A8 VOL: 0
; 0001 005E         return;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 005F     }
;PCODE: $000000AB VOL: 0
; 0001 0060 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;void subRoutine2(char x, uint16_t duration)
; 0001 0063 {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 0064     for (i = 0; i < 8; i++)
;PCODE: $000000B1 VOL: 0
;	x -> Y+2
;	duration -> Y+0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 0065     {
; 0001 0066         PORTB = 1 << (i + x - 1) % 8; // turn on i'th LED
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 0067         delay_ms(duration/8); // 8*duration/8 ms = duration sec
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0001 0068     }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 0069     PORTB = 0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 006A }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;
;void subRoutine3(char inPort, char outPort)
; 0001 006D {
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 006E     switch (inPort)
;PCODE: $000000DA VOL: 0
;	inPort -> Y+1
;	outPort -> Y+0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 006F     {
; 0001 0070     case 1:
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 0071         number = PINA;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0072         break;
;PCODE: $000000E1 VOL: 0
; 0001 0073     case 2:
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 0074         number = PINB;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0075         break;
;PCODE: $000000E7 VOL: 0
; 0001 0076     case 3:
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0001 0077         number = PINC;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 0078         break;
;PCODE: $000000ED VOL: 0
; 0001 0079     case 4:
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 007A         number = PIND;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0001 007B         break;
;PCODE: $000000F3 VOL: 0
; 0001 007C     default:
;PCODE: $000000F4 VOL: 0
; 0001 007D         return;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 007E     }
;PCODE: $000000F7 VOL: 0
; 0001 007F     switch (outPort)
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0001 0080     {
; 0001 0081     case 1:
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 0082         PORTA = number;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0001 0083         break;
;PCODE: $000000FE VOL: 0
; 0001 0084     case 2:
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0001 0085         PORTB = number;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 0086         break;
;PCODE: $00000104 VOL: 0
; 0001 0087     case 3:
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 0088         PORTC = number;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0001 0089         break;
;PCODE: $0000010A VOL: 0
; 0001 008A     case 4:
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 008B         PORTD = number;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 008C         break;
;PCODE: $00000110 VOL: 0
; 0001 008D     default:
;PCODE: $00000111 VOL: 0
; 0001 008E         return;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0001 008F     }
;PCODE: $00000114 VOL: 0
; 0001 0090 }
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;
;void subRoutine4(char direction, char segment)
; 0001 0093 {
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0001 0094     switch (segment)
;PCODE: $0000011A VOL: 0
;	direction -> Y+1
;	segment -> Y+0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0001 0095     {
; 0001 0096     case 1:
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0001 0097         PORTD = 0X0E; // enable first segment
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 0098         break;
;PCODE: $00000121 VOL: 0
; 0001 0099     case 2:
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0001 009A         PORTD = 0X0D; // enable second segment
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0001 009B         break;
;PCODE: $00000127 VOL: 0
; 0001 009C     case 3:
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0001 009D         PORTD = 0X0B; // enable third segment
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0001 009E         break;
;PCODE: $0000012D VOL: 0
; 0001 009F     case 4:
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 00A0         PORTD = 0X07; // enable fourth segment
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0001 00A1         break;
;PCODE: $00000133 VOL: 0
; 0001 00A2     case 5:
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 00A3         PORTD = 0X00; // enable all 7-segments
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 00A4         break;
;PCODE: $00000139 VOL: 0
; 0001 00A5     default:
;PCODE: $0000013A VOL: 0
; 0001 00A6         return;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0001 00A7     }
;PCODE: $0000013D VOL: 0
; 0001 00A8 
; 0001 00A9     switch (direction)
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0001 00AA     {
; 0001 00AB     case 0: // up
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 00AC         for (i = 0; i < 10; i++)
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0001 00AD         {
; 0001 00AE             // in unsigned char : 0x00 - 0x01 = 0xFF
; 0001 00AF             // so stop condition is "i != 0xFF"
; 0001 00B0             PORTC = digit[i];
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 00B1             delay_ms(1000);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0001 00B2         }
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 00B3         break;
;PCODE: $00000159 VOL: 0
; 0001 00B4     case 1: // down
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0001 00B5         for (i = 9; i != 0xFF; i--)
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0001 00B6         {
; 0001 00B7             // in unsigned char : 0x00 - 0x01 = 0xFF
; 0001 00B8             // so stop condition is "i != 0xFF"
; 0001 00B9             PORTC = digit[i];
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 00BA             delay_ms(1000);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 00BB         }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 00BC         break;
;PCODE: $00000174 VOL: 0
; 0001 00BD     default:
;PCODE: $00000175 VOL: 0
; 0001 00BE         return;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0001 00BF     }
;PCODE: $00000178 VOL: 0
; 0001 00C0 }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;
;void subRoutine5(char stepSize)
; 0001 00C3 {
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 00C4     number = PINA;
;PCODE: $0000017E VOL: 0
;	stepSize -> Y+0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0001 00C5     while (number != 0)
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0001 00C6     {
; 0001 00C7         // extract decimal digits---------------------------
; 0001 00C8         number_digit[1] = (number) % 10; // ones
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0001 00C9         number_digit[2] = (number / 10) % 10; // tens
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 00CA         number_digit[3] = (number / 100) % 10; // hundreds
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0001 00CB 
; 0001 00CC         // set 7-segments ----------------------------------
; 0001 00CD         for (i = 0; i < 20; i++)
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0001 00CE         {
; 0001 00CF             PORTD = ~( 1 << i%4 );
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0001 00D0             /*
; 0001 00D1             * 0b1111_1110 -> set hundreds
; 0001 00D2             * 0b1111_1101 -> set tens
; 0001 00D3             * 0b1111_1011 -> set ones
; 0001 00D4             * 0b1111_0111 -> set one tenth
; 0001 00D5             */
; 0001 00D6             PORTC = i%4 == 2
; 0001 00D7                     ? digit[number_digit[1]] | 0x80 // turn on DP
; 0001 00D8                     : digit[number_digit[3-i%4]];
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0001 00D9             delay_ms(5);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0001 00DA         }
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0001 00DB         // 20 * 5 = 100ms -> frequency = 100ms
; 0001 00DC 
; 0001 00DD         // reduce 0.1*stepSize ------------------------------
; 0001 00DE         if (stepSize > 10 || stepSize < 1) return;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0001 00DF         if (number_digit[0]<stepSize)
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0001 00E0         {
; 0001 00E1             number_digit[0] = 10 + (number_digit[0] - stepSize);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0001 00E2             number--;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 00E3         }
; 0001 00E4         else
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0001 00E5         {
; 0001 00E6             number_digit[0] -= stepSize;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0001 00E7         }
;PCODE: $000001F0 VOL: 0
; 0001 00E8     }
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0001 00E9 }
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
