;#include "test7_lib.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void subRoutine1(int budrate, int TX, int RX){
; 0002 0003 void subRoutine1(int budrate, int TX, int RX){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0004   char s [10];
; 0002 0005   UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	budrate -> Y+14
;	TX -> Y+12
;	RX -> Y+10
;	s -> Y+0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 0006   UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 0007   UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 0008 
; 0002 0009 
; 0002 000A   if (TX == ON || TX == Interrupt)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 000B     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0002 000C   if (RX == ON || RX == Interrupt)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 000D     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 000E 
; 0002 000F   if (TX == Interrupt)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 0010     UCSRB=(0<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 0011   if (RX == Interrupt)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 0012     UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0002 0013 
; 0002 0014   budrate = 500000/budrate-1;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 0015 
; 0002 0016   sprintf(s, "%0x", budrate);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 0017   lcd_puts(s);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0002 0018 
; 0002 0019   UBRRH = budrate & 0xFF00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 001A   UBRRL = budrate & 0x00FF ;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 001B }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;
;void subRoutine2(){
; 0002 001E void subRoutine2(){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0002 001F   char str[14];
; 0002 0020   char str2[17];
; 0002 0021   Q2_Usart_init();
;PCODE: $00000058 VOL: 0
;	str -> Y+17
;	str2 -> Y+0
;PCODE: $00000059 VOL: 0
; 0002 0022 
; 0002 0023   gets(str, 14);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0002 0024   strcat(str2, "(");
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0002 0025   strcat(str2, str);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0002 0026   strcat(str2,")");
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0002 0027   puts(str2);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 0028   lcd_puts(str2);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 0029 }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0

	.DSEG
_0x4000B:
	.BYTE 0x4
;
;void subRoutine3(char data){
; 0002 002B void subRoutine3(char data){

	.CSEG
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0002 002C   char str [10];
; 0002 002D   if (data >= '0' && data <= '9'){
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;	data -> Y+10
;	str -> Y+0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 002E     sprintf(str, "%d", (data - '0')*10);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0002 002F     puts(str);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0002 0030     lcd_clear();
;PCODE: $00000094 VOL: 0
; 0002 0031     lcd_gotoxy(0, 0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0002 0032     lcd_puts(str);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0002 0033   }
; 0002 0034   else if (data == 'D' || data == 'd'){
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0002 0035     puts("LCD Delete");
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 0036     lcd_clear();
;PCODE: $000000A8 VOL: 0
; 0002 0037     lcd_gotoxy(0, 0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0002 0038     lcd_puts("LCD Delete");
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0002 0039   }
; 0002 003A   else if (data == 'H' || data == 'h'){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0002 003B     puts("MicroProcessor Lab");
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0002 003C     lcd_clear();
;PCODE: $000000BD VOL: 0
; 0002 003D     lcd_gotoxy(0, 0);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0002 003E     lcd_puts("MicroProcessor Lab");
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0002 003F   }
; 0002 0040   else{
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0002 0041     puts("No Function Defined !");
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0002 0042     lcd_clear();
;PCODE: $000000CA VOL: 0
; 0002 0043     lcd_gotoxy(0, 0);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0002 0044     lcd_puts("No Function Defined !");
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 0045   }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0002 0046 }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0

	.DSEG
_0x40013:
	.BYTE 0x68
;
;void subRoutine4(){
; 0002 0048 void subRoutine4(){

	.CSEG
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0002 0049   int counter = 0, i=0;
; 0002 004A   int flagg = 0;
; 0002 004B   char str [50], copy[6];
; 0002 004C   char c;
; 0002 004D 
; 0002 004E   Q4_Usart_init();
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;	counter -> R16,R17
;	i -> R18,R19
;	flagg -> R20,R21
;	str -> Y+13
;	copy -> Y+7
;	c -> Y+6
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0002 004F   while (1){
;PCODE: $000000E3 VOL: 0
; 0002 0050     c = getchar();
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 0051     str[counter++] = c;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0002 0052     if (c == ')'){
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0002 0053       if (counter == 7){
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0002 0054         for (i=1; i<=5; i++){
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0002 0055           if (str[i] >= '0' && str[i] <= '9')
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0002 0056             flagg = 0;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0002 0057           else
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0002 0058             flagg = 1;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0002 0059         }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0002 005A         if (flagg == 1){
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0002 005B           lcd_clear();
;PCODE: $00000119 VOL: 0
; 0002 005C           lcd_gotoxy(0, 0);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0002 005D           lcd_puts("Frame must be 5 integer");
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0002 005E           puts("Frame must be 5 integer");
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 005F         }
; 0002 0060         if (flagg == 0 && str[0] == '('){
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0002 0061           lcd_clear();
;PCODE: $0000012E VOL: 0
; 0002 0062           lcd_gotoxy(0, 0);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0002 0063           lcd_puts("Frame is Correct");
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0002 0064           puts("Frame is Correct");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0002 0065           strncpy(copy, str+1, 5);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0002 0066           lcd_puts(copy);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0002 0067           puts(copy);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0002 0068         }
; 0002 0069       }
;PCODE: $00000143 VOL: 0
; 0002 006A       else{
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0002 006B         lcd_clear();
;PCODE: $00000146 VOL: 0
; 0002 006C         lcd_gotoxy(0, 0);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0002 006D         lcd_puts("Lenght Of Frame is not Correct");
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0002 006E         puts("Lenght Of Frame is not Correct");
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0002 006F       }
;PCODE: $00000151 VOL: 0
; 0002 0070 
; 0002 0071       counter = 0;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0002 0072       flagg = 0;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0002 0073     }
; 0002 0074   }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0002 0075 }
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0

	.DSEG
_0x40026:
	.BYTE 0x90
