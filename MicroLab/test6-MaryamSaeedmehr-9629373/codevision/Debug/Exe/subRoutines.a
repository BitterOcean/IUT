;#include "test6_lib.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;uint8_t i = 0;
;uint8_t duty_cycle;
;uint16_t result = 0;
;uint16_t adc = 0;
;
;interrupt [TIM0_COMP] void timer0_comp_isr(void){
; 0003 0008 interrupt [20] void timer0_comp_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0009   duty_cycle = read_adc(0); // read duty cycle from adc
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0003 000A   duty_cycle = (duty_cycle * 0.087) + 5; // transformation duty_cycle (5-95)%
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0003 000B   duty_cycle = (duty_cycle * 2.56) - 1; // calculate ocr accrding to duty_cycle
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0003 000C   OCR0 = duty_cycle;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0003 000D }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;void subRoutine1(){
; 0003 000F void subRoutine1(){
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0003 0010   Q1_adc_init();
;PCODE: $0000002D VOL: 0
; 0003 0011   lcd_puts("Subroutine 1 :");
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0003 0012   for (i = 0; i < 8; i++){
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0003 0013     char str[16];
; 0003 0014     result = read_adc(i);
;PCODE: $00000038 VOL: 0
;	str -> Y+0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0003 0015     result = result * 4.887;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0003 0016     lcd_gotoxy(line2x, line2y);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0003 0017     sprintf(str, "adc%d = %4d (mv)", i, result);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0003 0018     lcd_puts(str);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0003 0019     delay_ms(1000);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0003 001A   }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0003 001B }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0

	.DSEG
_0x60003:
	.BYTE 0xF
;
;void subRoutine2(){
; 0003 001D void subRoutine2(){

	.CSEG
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0003 001E   Q2_adc_init();
;PCODE: $00000062 VOL: 0
; 0003 001F   lcd_clear();
;PCODE: $00000063 VOL: 0
; 0003 0020   lcd_puts("Subroutine 2 :");
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0003 0021   for (i = 0; i < 8; i++){
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0003 0022     char str[16];
; 0003 0023     if (abs(adc_data[i] - adc_data_copy[i]) >= (adc_data[i]/20)){
;PCODE: $0000006E VOL: 0
;	str -> Y+0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0003 0024       lcd_gotoxy(line2x, line2y);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0003 0025       result = adc_data[i] * 4.887;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0003 0026       sprintf(str, "adc%d = %4d (mv)", i, adc_data[i]);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0003 0027       lcd_puts(str);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0003 0028       delay_ms(1000);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0003 0029     }
; 0003 002A     adc_data_copy[i] = adc_data[i];
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0003 002B   }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0003 002C }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0

	.DSEG
_0x60007:
	.BYTE 0xF
;
;void subRoutine3(){
; 0003 002E void subRoutine3(){

	.CSEG
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0003 002F   timer_init();
;PCODE: $000000C9 VOL: 0
; 0003 0030   Q1_adc_init();
;PCODE: $000000CA VOL: 0
; 0003 0031   lcd_clear();
;PCODE: $000000CB VOL: 0
; 0003 0032   lcd_puts("Subroutine 3 :");
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0003 0033   while(1){
;PCODE: $000000CF VOL: 0
; 0003 0034     char str[16];
; 0003 0035     adc = 0;
;PCODE: $000000D0 VOL: 0
;	str -> Y+0
;PCODE: $000000D1 VOL: 0
; 0003 0036     duty_cycle = 0;
;PCODE: $000000D2 VOL: 0
; 0003 0037     adc = read_adc(0);                      // read duty cycle from adc
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0003 0038     duty_cycle = (adc * 0.087) + 5;         // transformation duty_cycle (5-95)%
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0003 0039     sprintf(str,"duty cycle = %d",duty_cycle);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0003 003A     duty_cycle = (duty_cycle * 2.56) - 1;   // calculate ocr accrding to duty_cycle
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0003 003B     lcd_gotoxy(line2x, line2y);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0003 003C     lcd_puts(str);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0003 003D     OCR0 = duty_cycle;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0003 003E   }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0003 003F }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0

	.DSEG
_0x6000C:
	.BYTE 0xF
