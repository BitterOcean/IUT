
AVRASM ver. 2.1.30  \\VBOXSVR\virtual_share\test1-MaryamSaeedmehr-9629373\codevision\Debug\List\test1.asm Tue Mar 02 00:45:03 2021

\\VBOXSVR\virtual_share\test1-MaryamSaeedmehr-9629373\codevision\Debug\List\test1.asm(1088): warning: Register r5 already defined by the .DEF directive
\\VBOXSVR\virtual_share\test1-MaryamSaeedmehr-9629373\codevision\Debug\List\test1.asm(1089): warning: Register r4 already defined by the .DEF directive
\\VBOXSVR\virtual_share\test1-MaryamSaeedmehr-9629373\codevision\Debug\List\test1.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R5
                 	.DEF _number=R4
                 	.DEF _reset=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _digit:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 004a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * test 1:   Introduction to I/O ports
                 ; *
                 ; * Created:  3/1/2021 12:09:42 PM
                 ; * Author:   Maryam Saeedmehr
                 ; * Std.NO:   9629373
                 ; */
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Global Variables -------------------------------------------------------
                 ;unsigned char i; // for-loop variable
                 ;unsigned char number; // variable for subRoutine5,6 -> number = PINA
                 ;unsigned char reset; // variable for subRoutine6 -> reset = PIND
                 ;unsigned char number_digit[4] = {0}; // separated number's digits
                 ;flash unsigned char digit[] = {
                 ;    // to show digits in 7-segments
                 ;    0x3F, // 0
                 ;    0x06, // 1
                 ;    0x5B, // 2
                 ;    0x4F, // 3
                 ;    0x66, // 4
                 ;    0x6D, // 5
                 ;    0x7D, // 6
                 ;    0x07, // 7
                 ;    0x7F, // 8
                 ;    0x6F  // 9
                 ;};
                 ;
                 ;// Function Declaration ---------------------------------------------------
                 ;void subRoutine1(); // turn on all LEDs 4 time (0.5s delay)
                 ;void subRoutine2(); // scrolling dot light for 3s
                 ;void subRoutine3(); // show port A on LEDs
                 ;void subRoutine4(); // count down from 9 to 0 on all 7-segments
                 ;void subRoutine5(); // count down from PortA to 0 by 0.2 steps
                 ;void subRoutine6(); // subRoutine5 with reset option for each digit
                 ;
                 ;// Main Function ----------------------------------------------------------
                 ;void main(void)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0029     // port configuration -------
                 ; 0000 002A     DDRA = 0x00; // input
00004a e0e0      	LDI  R30,LOW(0)
00004b bbea      	OUT  0x1A,R30
                 ; 0000 002B     DDRB = 0xFF; // output
00004c efef      	LDI  R30,LOW(255)
00004d bbe7      	OUT  0x17,R30
                 ; 0000 002C     DDRC = 0xFF; // output
00004e bbe4      	OUT  0x14,R30
                 ; 0000 002D     DDRD = 0x0F; // input{4 MSB}-output{4 LSB}
00004f e0ef      	LDI  R30,LOW(15)
000050 bbe1      	OUT  0x11,R30
                 ; 0000 002E 
                 ; 0000 002F     // flowchart ----------------
                 ; 0000 0030     subRoutine1();
000051 d007      	RCALL _subRoutine1
                 ; 0000 0031     subRoutine2();
000052 d019      	RCALL _subRoutine2
                 ; 0000 0032     subRoutine4();
000053 d02c      	RCALL _subRoutine4
                 ; 0000 0033 
                 ; 0000 0034     while (1)
                 _0x3:
                 ; 0000 0035     {
                 ; 0000 0036         subRoutine3();
000054 d028      	RCALL _subRoutine3
                 ; 0000 0037         subRoutine5();
000055 d03e      	RCALL _subRoutine5
                 ; 0000 0038         subRoutine6();
000056 d061      	RCALL _subRoutine6
                 ; 0000 0039     }
000057 cffc      	RJMP _0x3
                 ; 0000 003A }
                 _0x6:
000058 cfff      	RJMP _0x6
                 ; .FEND
                 ;
                 ;// Function Implementation ------------------------------------------------
                 ;void subRoutine1()
                 ; 0000 003E {
                 _subRoutine1:
                 ; .FSTART _subRoutine1
                 ; 0000 003F     for (i = 0; i < 4; i++)
000059 2455      	CLR  R5
                 _0x8:
00005a e0e4      	LDI  R30,LOW(4)
00005b 165e      	CP   R5,R30
00005c f470      	BRSH _0x9
                 ; 0000 0040     {
                 ; 0000 0041         PORTB = 0xFF; // turn on all LEDs
00005d efef      	LDI  R30,LOW(255)
00005e bbe8      	OUT  0x18,R30
                 ; 0000 0042         delay_ms(500);
00005f efa4      	LDI  R26,LOW(500)
000060 e0b1      	LDI  R27,HIGH(500)
000061 940e 0168 	CALL _delay_ms
                 ; 0000 0043         PORTB = 0x00; // turn off all LEDs
000063 e0e0      	LDI  R30,LOW(0)
000064 bbe8      	OUT  0x18,R30
                 ; 0000 0044         delay_ms(500);
000065 efa4      	LDI  R26,LOW(500)
000066 e0b1      	LDI  R27,HIGH(500)
000067 940e 0168 	CALL _delay_ms
                 ; 0000 0045     }
000069 9453      	INC  R5
00006a cfef      	RJMP _0x8
                 _0x9:
                 ; 0000 0046 }
00006b 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine2()
                 ; 0000 0049 {
                 _subRoutine2:
                 ; .FSTART _subRoutine2
                 ; 0000 004A     for (i = 0; i < 8; i++)
00006c 2455      	CLR  R5
                 _0xB:
00006d e0e8      	LDI  R30,LOW(8)
00006e 165e      	CP   R5,R30
00006f f458      	BRSH _0xC
                 ; 0000 004B     {
                 ; 0000 004C         PORTB = 1 << i; // turn on i'th LED
000070 2de5      	MOV  R30,R5
000071 e0a1      	LDI  R26,LOW(1)
000072 940e 0176 	CALL __LSLB12
000074 bbe8      	OUT  0x18,R30
                 ; 0000 004D         delay_ms(420); // 7*420 ms = 2.94 sec ~ 3 sec
000075 eaa4      	LDI  R26,LOW(420)
000076 e0b1      	LDI  R27,HIGH(420)
000077 940e 0168 	CALL _delay_ms
                 ; 0000 004E     }
000079 9453      	INC  R5
00007a cff2      	RJMP _0xB
                 _0xC:
                 ; 0000 004F     PORTB = 0x00;
00007b e0e0      	LDI  R30,LOW(0)
00007c c001      	RJMP _0x2000001
                 ; 0000 0050 }
                 ; .FEND
                 ;
                 ;void subRoutine3()
                 ; 0000 0053 {
                 _subRoutine3:
                 ; .FSTART _subRoutine3
                 ; 0000 0054     PORTB = PINA;
00007d b3e9      	IN   R30,0x19
                 _0x2000001:
00007e bbe8      	OUT  0x18,R30
                 ; 0000 0055 }
00007f 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine4()
                 ; 0000 0058 {
                 _subRoutine4:
                 ; .FSTART _subRoutine4
                 ; 0000 0059     PORTD = 0X00; // enable all 7-segments
000080 e0e0      	LDI  R30,LOW(0)
000081 bbe2      	OUT  0x12,R30
                 ; 0000 005A 
                 ; 0000 005B     for (i = 9; i != 0xFF; i--)
000082 e0e9      	LDI  R30,LOW(9)
000083 2e5e      	MOV  R5,R30
                 _0xE:
000084 efef      	LDI  R30,LOW(255)
000085 15e5      	CP   R30,R5
000086 f061      	BREQ _0xF
                 ; 0000 005C     {
                 ; 0000 005D         // in unsigned char : 0x00 - 0x01 = 0xFF
                 ; 0000 005E         // so stop condition is "i != 0xFF"
                 ; 0000 005F         PORTC = digit[i];
000087 2de5      	MOV  R30,R5
000088 e0f0      	LDI  R31,0
000089 5aec      	SUBI R30,LOW(-_digit*2)
00008a 4fff      	SBCI R31,HIGH(-_digit*2)
00008b 9004      	LPM  R0,Z
00008c ba05      	OUT  0x15,R0
                 ; 0000 0060         delay_ms(1000);
00008d eea8      	LDI  R26,LOW(1000)
00008e e0b3      	LDI  R27,HIGH(1000)
00008f 940e 0168 	CALL _delay_ms
                 ; 0000 0061     }
000091 945a      	DEC  R5
000092 cff1      	RJMP _0xE
                 _0xF:
                 ; 0000 0062 }
000093 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine5()
                 ; 0000 0065 {
                 _subRoutine5:
                 ; .FSTART _subRoutine5
                 ; 0000 0066     number = PINA;
000094 b249      	IN   R4,25
                 ; 0000 0067     while (number != 0)
                 _0x10:
000095 2044      	TST  R4
000096 f101      	BREQ _0x12
                 ; 0000 0068     {
                 ; 0000 0069         // extract decimal digits---------------------------
                 ; 0000 006A         number_digit[1] = (number) % 10; // ones
000097 d07a      	RCALL SUBOPT_0x0
                 ; 0000 006B         number_digit[2] = (number / 10) % 10; // tens
                 ; 0000 006C         number_digit[3] = (number / 100) % 10; // hundreds
                 ; 0000 006D 
                 ; 0000 006E         // set 7-segments ----------------------------------
                 ; 0000 006F         for (i = 0; i < 20; i++)
000098 2455      	CLR  R5
                 _0x14:
000099 e1e4      	LDI  R30,LOW(20)
00009a 165e      	CP   R5,R30
00009b f460      	BRSH _0x15
                 ; 0000 0070         {
                 ; 0000 0071             PORTD = ~( 1 << i%4 );
00009c d098      	RCALL SUBOPT_0x1
                 ; 0000 0072             /*
                 ; 0000 0073             * 0b1111_1110 -> set hundreds
                 ; 0000 0074             * 0b1111_1101 -> set tens
                 ; 0000 0075             * 0b1111_1011 -> set ones
                 ; 0000 0076             * 0b1111_0111 -> set one tenth
                 ; 0000 0077             */
                 ; 0000 0078             PORTC = i%4 == 2
                 ; 0000 0079                     ? digit[number_digit[1]] | 0x80 // turn on DP
                 ; 0000 007A                     : digit[number_digit[3-i%4]];
00009d f411      	BRNE _0x16
00009e d0aa      	RCALL SUBOPT_0x2
00009f c001      	RJMP _0x17
                 _0x16:
0000a0 d0b0      	RCALL SUBOPT_0x3
                 _0x17:
0000a1 bbe5      	OUT  0x15,R30
                 ; 0000 007B             delay_ms(5);
0000a2 e0a5      	LDI  R26,LOW(5)
0000a3 e0b0      	LDI  R27,0
0000a4 940e 0168 	CALL _delay_ms
                 ; 0000 007C         }
0000a6 9453      	INC  R5
0000a7 cff1      	RJMP _0x14
                 _0x15:
                 ; 0000 007D         // 20 * 5 = 100ms -> frequency = 100ms
                 ; 0000 007E 
                 ; 0000 007F         // reduce 0.2 ---------------------------------------
                 ; 0000 0080         if (!number_digit[0])
0000a8 91e0 0160 	LDS  R30,_number_digit
0000aa 30e0      	CPI  R30,0
0000ab f429      	BRNE _0x19
                 ; 0000 0081         {
                 ; 0000 0082             number_digit[0] = 8;
0000ac e0e8      	LDI  R30,LOW(8)
0000ad 93e0 0160 	STS  _number_digit,R30
                 ; 0000 0083             number--;
0000af 944a      	DEC  R4
                 ; 0000 0084         }
                 ; 0000 0085         else
0000b0 c005      	RJMP _0x1A
                 _0x19:
                 ; 0000 0086         {
                 ; 0000 0087             number_digit[0] -= 2;
0000b1 91e0 0160 	LDS  R30,_number_digit
0000b3 50e2      	SUBI R30,LOW(2)
0000b4 93e0 0160 	STS  _number_digit,R30
                 ; 0000 0088         }
                 _0x1A:
                 ; 0000 0089     }
0000b6 cfde      	RJMP _0x10
                 _0x12:
                 ; 0000 008A }
0000b7 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine6()
                 ; 0000 008D {
                 _subRoutine6:
                 ; .FSTART _subRoutine6
                 ; 0000 008E     number = PINA;
0000b8 b249      	IN   R4,25
                 ; 0000 008F     while (number != 0)
                 _0x1B:
0000b9 2044      	TST  R4
0000ba f409      	BRNE PC+2
0000bb c055      	RJMP _0x1D
                 ; 0000 0090     {
                 ; 0000 0091         reset = PIND;
0000bc b270      	IN   R7,16
                 ; 0000 0092         // extract decimal digits (SAME AS SUBROUTINE 5)----
                 ; 0000 0093         number_digit[1] = (number) % 10; // ones
0000bd d054      	RCALL SUBOPT_0x0
                 ; 0000 0094         number_digit[2] = (number / 10) % 10; // tens
                 ; 0000 0095         number_digit[3] = (number / 100) % 10; // hundreds
                 ; 0000 0096 
                 ; 0000 0097         // reset control -----------------------------------
                 ; 0000 0098         if (!(reset & (1 << 7)))
0000be fc77      	SBRC R7,7
0000bf c008      	RJMP _0x1E
                 ; 0000 0099         {
                 ; 0000 009A             number_digit[3] = (PINA / 100) % 10; // reseting hundreds
0000c0 b3e9      	IN   R30,0x19
0000c1 e0f0      	LDI  R31,0
0000c2 01df      	MOVW R26,R30
0000c3 e6e4      	LDI  R30,LOW(100)
0000c4 e0f0      	LDI  R31,HIGH(100)
0000c5 d09a      	RCALL SUBOPT_0x4
                +
0000c6 93e0 0163+STS _number_digit + ( 3 ) , R30
                 	__PUTB1MN _number_digit,3
                 ; 0000 009B         }
                 ; 0000 009C         if (!(reset & (1 << 6)))
                 _0x1E:
0000c8 fc76      	SBRC R7,6
0000c9 c008      	RJMP _0x1F
                 ; 0000 009D         {
                 ; 0000 009E             number_digit[2] = (PINA / 10) % 10; // reseting tens
0000ca b3e9      	IN   R30,0x19
0000cb e0f0      	LDI  R31,0
0000cc 01df      	MOVW R26,R30
0000cd e0ea      	LDI  R30,LOW(10)
0000ce e0f0      	LDI  R31,HIGH(10)
0000cf d090      	RCALL SUBOPT_0x4
                +
0000d0 93e0 0162+STS _number_digit + ( 2 ) , R30
                 	__PUTB1MN _number_digit,2
                 ; 0000 009F         }
                 ; 0000 00A0         if (!(reset & (1 << 5)))
                 _0x1F:
0000d2 fc75      	SBRC R7,5
0000d3 c009      	RJMP _0x20
                 ; 0000 00A1         {
                 ; 0000 00A2             number_digit[1] = (PINA) % 10; // reseting ones
0000d4 b3e9      	IN   R30,0x19
0000d5 e0f0      	LDI  R31,0
0000d6 01df      	MOVW R26,R30
0000d7 e0ea      	LDI  R30,LOW(10)
0000d8 e0f0      	LDI  R31,HIGH(10)
0000d9 940e 0196 	CALL __MODW21
                +
0000db 93e0 0161+STS _number_digit + ( 1 ) , R30
                 	__PUTB1MN _number_digit,1
                 ; 0000 00A3         }
                 ; 0000 00A4         if (!(reset & (1 << 4)))
                 _0x20:
0000dd fc74      	SBRC R7,4
0000de c003      	RJMP _0x21
                 ; 0000 00A5         {
                 ; 0000 00A6             number_digit[0] = 0; // reseting one tenth
0000df e0e0      	LDI  R30,LOW(0)
0000e0 93e0 0160 	STS  _number_digit,R30
                 ; 0000 00A7         }
                 ; 0000 00A8         number = number_digit[3] * 100 +
                 _0x21:
                 ; 0000 00A9                  number_digit[2] * 10 +
                 ; 0000 00AA                  number_digit[1]; // updating the number
                +
0000e2 91e0 0163+LDS R30 , _number_digit + ( 3 )
                 	__GETB1MN _number_digit,3
0000e4 e6a4      	LDI  R26,LOW(100)
0000e5 02ea      	MULS R30,R26
0000e6 2d60      	MOV  R22,R0
                +
0000e7 91e0 0162+LDS R30 , _number_digit + ( 2 )
                 	__GETB1MN _number_digit,2
0000e9 e0aa      	LDI  R26,LOW(10)
0000ea 02ea      	MULS R30,R26
0000eb 01f0      	MOVW R30,R0
0000ec 2fa6      	MOV  R26,R22
0000ed 0fae      	ADD  R26,R30
                +
0000ee 91e0 0161+LDS R30 , _number_digit + ( 1 )
                 	__GETB1MN _number_digit,1
0000f0 0fea      	ADD  R30,R26
0000f1 2e4e      	MOV  R4,R30
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD         // set 7-segments (SAME AS SUBROUTINE 5) -----------
                 ; 0000 00AE         for (i = 0; i < 20; i++)
0000f2 2455      	CLR  R5
                 _0x23:
0000f3 e1e4      	LDI  R30,LOW(20)
0000f4 165e      	CP   R5,R30
0000f5 f460      	BRSH _0x24
                 ; 0000 00AF         {
                 ; 0000 00B0             PORTD = ~( 1 << i%4 );
0000f6 d03e      	RCALL SUBOPT_0x1
                 ; 0000 00B1             PORTC = i%4 == 2
                 ; 0000 00B2                     ? digit[number_digit[1]] | 0x80
                 ; 0000 00B3                     : digit[number_digit[3-i%4]];
0000f7 f411      	BRNE _0x25
0000f8 d050      	RCALL SUBOPT_0x2
0000f9 c001      	RJMP _0x26
                 _0x25:
0000fa d056      	RCALL SUBOPT_0x3
                 _0x26:
0000fb bbe5      	OUT  0x15,R30
                 ; 0000 00B4             delay_ms(5);
0000fc e0a5      	LDI  R26,LOW(5)
0000fd e0b0      	LDI  R27,0
0000fe 940e 0168 	CALL _delay_ms
                 ; 0000 00B5         }
000100 9453      	INC  R5
000101 cff1      	RJMP _0x23
                 _0x24:
                 ; 0000 00B6 
                 ; 0000 00B7         if (!number_digit[0])
000102 91e0 0160 	LDS  R30,_number_digit
000104 30e0      	CPI  R30,0
000105 f429      	BRNE _0x28
                 ; 0000 00B8         {
                 ; 0000 00B9             number_digit[0] = 8;
000106 e0e8      	LDI  R30,LOW(8)
000107 93e0 0160 	STS  _number_digit,R30
                 ; 0000 00BA             number--;
000109 944a      	DEC  R4
                 ; 0000 00BB         }
                 ; 0000 00BC         else
00010a c005      	RJMP _0x29
                 _0x28:
                 ; 0000 00BD         {
                 ; 0000 00BE             number_digit[0] -= 2;
00010b 91e0 0160 	LDS  R30,_number_digit
00010d 50e2      	SUBI R30,LOW(2)
00010e 93e0 0160 	STS  _number_digit,R30
                 ; 0000 00BF         }
                 _0x29:
                 ; 0000 00C0     }
000110 cfa8      	RJMP _0x1B
                 _0x1D:
                 ; 0000 00C1 }
000111 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _number_digit:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x0:
000112 2da4      	MOV  R26,R4
000113 27bb      	CLR  R27
000114 e0ea      	LDI  R30,LOW(10)
000115 e0f0      	LDI  R31,HIGH(10)
000116 940e 0196 	CALL __MODW21
                +
000118 93e0 0161+STS _number_digit + ( 1 ) , R30
                 	__PUTB1MN _number_digit,1
00011a 2da4      	MOV  R26,R4
00011b e0b0      	LDI  R27,0
00011c e0ea      	LDI  R30,LOW(10)
00011d e0f0      	LDI  R31,HIGH(10)
00011e 940e 0191 	CALL __DIVW21
000120 01df      	MOVW R26,R30
000121 e0ea      	LDI  R30,LOW(10)
000122 e0f0      	LDI  R31,HIGH(10)
000123 940e 0196 	CALL __MODW21
                +
000125 93e0 0162+STS _number_digit + ( 2 ) , R30
                 	__PUTB1MN _number_digit,2
000127 2da4      	MOV  R26,R4
000128 e0b0      	LDI  R27,0
000129 e6e4      	LDI  R30,LOW(100)
00012a e0f0      	LDI  R31,HIGH(100)
00012b 940e 0191 	CALL __DIVW21
00012d 01df      	MOVW R26,R30
00012e e0ea      	LDI  R30,LOW(10)
00012f e0f0      	LDI  R31,HIGH(10)
000130 940e 0196 	CALL __MODW21
                +
000132 93e0 0163+STS _number_digit + ( 3 ) , R30
                 	__PUTB1MN _number_digit,3
000134 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x1:
000135 2de5      	MOV  R30,R5
000136 e0f0      	LDI  R31,0
000137 e0a3      	LDI  R26,LOW(3)
000138 e0b0      	LDI  R27,HIGH(3)
000139 940e 01a4 	CALL __MANDW12
00013b e0a1      	LDI  R26,LOW(1)
00013c 940e 0176 	CALL __LSLB12
00013e 95e0      	COM  R30
00013f bbe2      	OUT  0x12,R30
000140 2da5      	MOV  R26,R5
000141 27bb      	CLR  R27
000142 e0e4      	LDI  R30,LOW(4)
000143 e0f0      	LDI  R31,HIGH(4)
000144 940e 0196 	CALL __MODW21
000146 01df      	MOVW R26,R30
000147 9732      	SBIW R30,2
000148 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
                +
000149 91e0 0161+LDS R30 , _number_digit + ( 1 )
                 	__GETB1MN _number_digit,1
00014b e0f0      	LDI  R31,0
00014c 5aec      	SUBI R30,LOW(-_digit*2)
00014d 4fff      	SBCI R31,HIGH(-_digit*2)
00014e 91e4      	LPM  R30,Z
00014f 68e0      	ORI  R30,0x80
000150 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000151 01fd      	MOVW R30,R26
000152 e0a3      	LDI  R26,LOW(3)
000153 e0b0      	LDI  R27,HIGH(3)
000154 940e 01bc 	CALL __SWAPW12
000156 1bea      	SUB  R30,R26
000157 0bfb      	SBC  R31,R27
000158 5ae0      	SUBI R30,LOW(-_number_digit)
000159 4ffe      	SBCI R31,HIGH(-_number_digit)
00015a 81e0      	LD   R30,Z
00015b e0f0      	LDI  R31,0
00015c 5aec      	SUBI R30,LOW(-_digit*2)
00015d 4fff      	SBCI R31,HIGH(-_digit*2)
00015e 91e4      	LPM  R30,Z
00015f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000160 940e 0191 	CALL __DIVW21
000162 01df      	MOVW R26,R30
000163 e0ea      	LDI  R30,LOW(10)
000164 e0f0      	LDI  R31,HIGH(10)
000165 940e 0196 	CALL __MODW21
000167 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000168 9610      	adiw r26,0
000169 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00016a ed80     +LDI R24 , LOW ( 0x7D0 )
00016b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00016c 9701     +SBIW R24 , 1
00016d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00016e 95a8      	wdr
00016f 9711      	sbiw r26,1
000170 f7c9      	brne __delay_ms0
                 __delay_ms1:
000171 9508      	ret
                 
                 __ANEGW1:
000172 95f1      	NEG  R31
000173 95e1      	NEG  R30
000174 40f0      	SBCI R31,0
000175 9508      	RET
                 
                 __LSLB12:
000176 23ee      	TST  R30
000177 2e0e      	MOV  R0,R30
000178 2fea      	MOV  R30,R26
000179 f019      	BREQ __LSLB12R
                 __LSLB12L:
00017a 0fee      	LSL  R30
00017b 940a      	DEC  R0
00017c f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00017d 9508      	RET
                 
                 __DIVW21U:
00017e 2400      	CLR  R0
00017f 2411      	CLR  R1
000180 e190      	LDI  R25,16
                 __DIVW21U1:
000181 0faa      	LSL  R26
000182 1fbb      	ROL  R27
000183 1c00      	ROL  R0
000184 1c11      	ROL  R1
000185 1a0e      	SUB  R0,R30
000186 0a1f      	SBC  R1,R31
000187 f418      	BRCC __DIVW21U2
000188 0e0e      	ADD  R0,R30
000189 1e1f      	ADC  R1,R31
00018a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00018b 60a1      	SBR  R26,1
                 __DIVW21U3:
00018c 959a      	DEC  R25
00018d f799      	BRNE __DIVW21U1
00018e 01fd      	MOVW R30,R26
00018f 01d0      	MOVW R26,R0
000190 9508      	RET
                 
                 __DIVW21:
000191 d01c      	RCALL __CHKSIGNW
000192 dfeb      	RCALL __DIVW21U
000193 f40e      	BRTC __DIVW211
000194 dfdd      	RCALL __ANEGW1
                 __DIVW211:
000195 9508      	RET
                 
                 __MODW21:
000196 94e8      	CLT
000197 ffb7      	SBRS R27,7
000198 c004      	RJMP __MODW211
000199 95a0      	COM  R26
00019a 95b0      	COM  R27
00019b 9611      	ADIW R26,1
00019c 9468      	SET
                 __MODW211:
00019d fdf7      	SBRC R31,7
00019e dfd3      	RCALL __ANEGW1
00019f dfde      	RCALL __DIVW21U
0001a0 01fd      	MOVW R30,R26
0001a1 f40e      	BRTC __MODW212
0001a2 dfcf      	RCALL __ANEGW1
                 __MODW212:
0001a3 9508      	RET
                 
                 __MANDW12:
0001a4 94e8      	CLT
0001a5 fff7      	SBRS R31,7
0001a6 c002      	RJMP __MANDW121
0001a7 dfca      	RCALL __ANEGW1
0001a8 9468      	SET
                 __MANDW121:
0001a9 23ea      	AND  R30,R26
0001aa 23fb      	AND  R31,R27
0001ab f40e      	BRTC __MANDW122
0001ac dfc5      	RCALL __ANEGW1
                 __MANDW122:
0001ad 9508      	RET
                 
                 __CHKSIGNW:
0001ae 94e8      	CLT
0001af fff7      	SBRS R31,7
0001b0 c002      	RJMP __CHKSW1
0001b1 dfc0      	RCALL __ANEGW1
0001b2 9468      	SET
                 __CHKSW1:
0001b3 ffb7      	SBRS R27,7
0001b4 c006      	RJMP __CHKSW2
0001b5 95a0      	COM  R26
0001b6 95b0      	COM  R27
0001b7 9611      	ADIW R26,1
0001b8 f800      	BLD  R0,0
0001b9 9403      	INC  R0
0001ba fa00      	BST  R0,0
                 __CHKSW2:
0001bb 9508      	RET
                 
                 __SWAPW12:
0001bc 2e1b      	MOV  R1,R27
0001bd 2fbf      	MOV  R27,R31
0001be 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0001bf 2e1a      	MOV  R1,R26
0001c0 2fae      	MOV  R26,R30
0001c1 2de1      	MOV  R30,R1
0001c2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   8 r2 :   0 r3 :   0 r4 :  10 r5 :  19 r6 :   0 r7 :   5 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   6 r25:   4 r26:  47 r27:  22 r28:   1 r29:   1 r30: 121 r31:  34 
x  :   2 y  :   0 z  :   4 
Registers used: 16 out of 35 (45.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :   3 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  11 brpl  :   0 brsh  :   4 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  19 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   5 
cp    :   5 cpc   :   0 cpi   :   2 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   5 jmp   :  22 ld    :   1 ldd   :   0 ldi   :  78 
lds   :   8 lpm   :   6 lsl   :   2 lsr   :   0 mov   :  19 movw  :  12 
mul   :   0 muls  :   2 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   1 out   :  19 pop   :   0 push  :   0 rcall :  25 ret   :  19 
reti  :   0 rjmp  :  24 rol   :   3 ror   :   0 sbc   :   2 sbci  :   5 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   5 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :  11 sub   :   2 subi  :   6 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 50 out of 116 (43.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000386    892     10    902   16384   5.5%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
