
AVRASM ver. 2.1.30  C:\cvavr\BIN\test5\Debug\List\test5.asm Sat Apr 17 18:54:55 2021

C:\cvavr\BIN\test5\Debug\List\test5.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\cvavr\BIN\test5\Debug\List\test5.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\cvavr\BIN\test5\Debug\List\test5.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\cvavr\BIN\test5\Debug\List\test5.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\cvavr\BIN\test5\Debug\List\test5.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\cvavr\BIN\test5\Debug\List\test5.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R5
                 	.DEF _Stepper=R4
                 	.DEF _duty_cycle=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0078 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 00f0 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 00d5 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000      	.DB  0x0,0x0
                 
                 _0x40000:
00002b 3039
00002c 3030
00002d 2820
00002e 7072      	.DB  0x39,0x30,0x30,0x30,0x20,0x28,0x72,0x70
00002f 296d
000030 4400
000031 7475
000032 2079      	.DB  0x6D,0x29,0x0,0x44,0x75,0x74,0x79,0x20
000033 7943
000034 6c63
000035 2065
000036 203d      	.DB  0x43,0x79,0x63,0x6C,0x65,0x20,0x3D,0x20
000037 3031
000038 0025
000039 7544
00003a 7974      	.DB  0x31,0x30,0x25,0x0,0x44,0x75,0x74,0x79
00003b 4320
00003c 6379
00003d 656c
00003e 3d20      	.DB  0x20,0x43,0x79,0x63,0x6C,0x65,0x20,0x3D
00003f 3320
000040 2530
000041 4400
000042 7475      	.DB  0x20,0x33,0x30,0x25,0x0,0x44,0x75,0x74
000043 2079
000044 7943
000045 6c63
000046 2065      	.DB  0x79,0x20,0x43,0x79,0x63,0x6C,0x65,0x20
000047 203d
000048 3035
000049 0025
00004a 7544      	.DB  0x3D,0x20,0x35,0x30,0x25,0x0,0x44,0x75
00004b 7974
00004c 4320
00004d 6379
00004e 656c      	.DB  0x74,0x79,0x20,0x43,0x79,0x63,0x6C,0x65
00004f 3d20
000050 3720
000051 2530
000052 4400      	.DB  0x20,0x3D,0x20,0x37,0x30,0x25,0x0,0x44
000053 7475
000054 2079
000055 7943
000056 6c63      	.DB  0x75,0x74,0x79,0x20,0x43,0x79,0x63,0x6C
000057 2065
000058 203d
000059 3039
00005a 0025      	.DB  0x65,0x20,0x3D,0x20,0x39,0x30,0x25,0x0
                 _0x2000003:
00005b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00005c 0002      	.DW  0x02
00005d 0004      	.DW  0x04
00005e 0054      	.DW  __REG_VARS*2
                 
00005f 000b      	.DW  0x0B
000060 0160      	.DW  _0x40028
000061 0056      	.DW  _0x40000*2
                 
000062 0008      	.DW  0x08
000063 016b      	.DW  _0x40028+11
000064 0059      	.DW  _0x40000*2+3
                 
000065 0011      	.DW  0x11
000066 0173      	.DW  _0x4002B
000067 0061      	.DW  _0x40000*2+11
                 
000068 0011      	.DW  0x11
000069 0184      	.DW  _0x4002B+17
00006a 0072      	.DW  _0x40000*2+28
                 
00006b 0011      	.DW  0x11
00006c 0195      	.DW  _0x4002B+34
00006d 0083      	.DW  _0x40000*2+45
                 
00006e 0011      	.DW  0x11
00006f 01a6      	.DW  _0x4002B+51
000070 0094      	.DW  _0x40000*2+62
                 
000071 0011      	.DW  0x11
000072 01b7      	.DW  _0x4002B+68
000073 00a5      	.DW  _0x40000*2+79
                 
000074 0002      	.DW  0x02
000075 01c8      	.DW  __base_y_G100
000076 00b6      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000077 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000078 94f8      	CLI
000079 27ee      	CLR  R30
00007a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007b e0f1      	LDI  R31,1
00007c bffb      	OUT  GICR,R31
00007d bfeb      	OUT  GICR,R30
00007e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00007f e08d      	LDI  R24,(14-2)+1
000080 e0a2      	LDI  R26,2
000081 27bb      	CLR  R27
                 __CLEAR_REG:
000082 93ed      	ST   X+,R30
000083 958a      	DEC  R24
000084 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000085 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000086 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000087 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000088 93ed      	ST   X+,R30
000089 9701      	SBIW R24,1
00008a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008b ebe8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008d 9185      	LPM  R24,Z+
00008e 9195      	LPM  R25,Z+
00008f 9700      	SBIW R24,0
000090 f061      	BREQ __GLOBAL_INI_END
000091 91a5      	LPM  R26,Z+
000092 91b5      	LPM  R27,Z+
000093 9005      	LPM  R0,Z+
000094 9015      	LPM  R1,Z+
000095 01bf      	MOVW R22,R30
000096 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000097 9005      	LPM  R0,Z+
000098 920d      	ST   X+,R0
000099 9701      	SBIW R24,1
00009a f7e1      	BRNE __GLOBAL_INI_LOOP
00009b 01fb      	MOVW R30,R22
00009c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009e bfed      	OUT  SPL,R30
00009f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a0 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a1 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a2 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a3 940c 00a5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : test 5, Introduction to electrical motors
                 ;Version : 1.0
                 ;Date    : 4/17/2021
                 ;Author  : Maryam Saeedmehr
                 ;Std. NO : 9629373
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;#include "test5_lib.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void main(void){
                 ; 0000 0018 void main(void){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0019 
                 ; 0000 001A   board_init();
0000a5 d028      	RCALL _board_init
                 ; 0000 001B 
                 ; 0000 001C   // Flowchart----------
                 ; 0000 001D   subRoutine1();
0000a6 940e 016d 	CALL _subRoutine1
                 ; 0000 001E   subRoutine3();
0000a8 940e 018c 	CALL _subRoutine3
                 ; 0000 001F   subRoutine4();
0000aa 940e 0191 	CALL _subRoutine4
                 ; 0000 0020 }
                 _0x3:
0000ac cfff      	RJMP _0x3
                 ; .FEND
                 ;#include "test5_lib.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void io_init(){
                 ; 0001 0003 void io_init(){
                 
                 	.CSEG
                 _io_init:
                 ; .FSTART _io_init
                 ; 0001 0004     // Input/Output Ports initialization
                 ; 0001 0005     // Port A initialization
                 ; 0001 0006     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0007     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbea      	OUT  0x1A,R30
                 ; 0001 0008     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0009     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000af bbeb      	OUT  0x1B,R30
                 ; 0001 000A 
                 ; 0001 000B     // Port B initialization
                 ; 0001 000C     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0001 000D     DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000b0 efef      	LDI  R30,LOW(255)
0000b1 bbe7      	OUT  0x17,R30
                 ; 0001 000E     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 000F     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bbe8      	OUT  0x18,R30
                 ; 0001 0010 
                 ; 0001 0011     // Port C initialization
                 ; 0001 0012     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0001 0013     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000b4 efef      	LDI  R30,LOW(255)
0000b5 bbe4      	OUT  0x14,R30
                 ; 0001 0014     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 0015     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bbe5      	OUT  0x15,R30
                 ; 0001 0016 
                 ; 0001 0017     // Port D initialization
                 ; 0001 0018     // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0001 0019     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000b8 e0e3      	LDI  R30,LOW(3)
0000b9 bbe1      	OUT  0x11,R30
                 ; 0001 001A     // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0001 001B     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ba e0e0      	LDI  R30,LOW(0)
0000bb bbe2      	OUT  0x12,R30
                 ; 0001 001C }
0000bc 9508      	RET
                 ; .FEND
                 ;
                 ;void timer_init(){
                 ; 0001 001E void timer_init(){
                 _timer_init:
                 ; .FSTART _timer_init
                 ; 0001 001F     // Timer/Counter 0 initialization
                 ; 0001 0020     // Clock source: System Clock
                 ; 0001 0021     // Clock value: 7.813 kHz
                 ; 0001 0022     // Mode: Phase correct PWM top=0xFF
                 ; 0001 0023     // OC0 output: Non-Inverted PWM
                 ; 0001 0024     // Timer Period: 65.28 ms
                 ; 0001 0025     // Output Pulse(s):
                 ; 0001 0026     // OC0 Period: 65.28 ms Width: 6.656 ms
                 ; 0001 0027     TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000bd e6e5      	LDI  R30,LOW(101)
0000be bfe3      	OUT  0x33,R30
                 ; 0001 0028     TCNT0=0x00;
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 bfe2      	OUT  0x32,R30
                 ; 0001 0029     OCR0=0x1A;
0000c1 e1ea      	LDI  R30,LOW(26)
0000c2 bfec      	OUT  0x3C,R30
                 ; 0001 002A 
                 ; 0001 002B     // Timer/Counter 2 initialization
                 ; 0001 002C     // Clock source: System Clock
                 ; 0001 002D     // Clock value: 7.813 kHz
                 ; 0001 002E     // Mode: Normal top=0xFF
                 ; 0001 002F     // OC2 output: Disconnected
                 ; 0001 0030     // Timer Period: 9.984 ms
                 ; 0001 0031     ASSR=0<<AS2;
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 bde2      	OUT  0x22,R30
                 ; 0001 0032     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
0000c5 e0e7      	LDI  R30,LOW(7)
0000c6 bde5      	OUT  0x25,R30
                 ; 0001 0033     TCNT2=0xB2;
0000c7 ebe2      	LDI  R30,LOW(178)
0000c8 bde4      	OUT  0x24,R30
                 ; 0001 0034     OCR2=0x00;
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca bde3      	OUT  0x23,R30
                 ; 0001 0035 
                 ; 0001 0036     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 0037     TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000cb e4e2      	LDI  R30,LOW(66)
0000cc bfe9      	OUT  0x39,R30
                 ; 0001 0038 }
0000cd 9508      	RET
                 ; .FEND
                 ;
                 ;void board_init(){
                 ; 0001 003A void board_init(){
                 _board_init:
                 ; .FSTART _board_init
                 ; 0001 003B     io_init();
0000ce dfde      	RCALL _io_init
                 ; 0001 003C 
                 ; 0001 003D     // Alphanumeric LCD initialization
                 ; 0001 003E     // Connections are specified in the
                 ; 0001 003F     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 0040     // RS - PORTC Bit 0
                 ; 0001 0041     // RD - PORTC Bit 1
                 ; 0001 0042     // EN - PORTC Bit 2
                 ; 0001 0043     // D4 - PORTC Bit 4
                 ; 0001 0044     // D5 - PORTC Bit 5
                 ; 0001 0045     // D6 - PORTC Bit 6
                 ; 0001 0046     // D7 - PORTC Bit 7
                 ; 0001 0047     // Characters/line: 16
                 ; 0001 0048     lcd_init(16);
0000cf e1a0      	LDI  R26,LOW(16)
0000d0 940e 01f3 	CALL _lcd_init
                 ; 0001 0049     timer_init();
0000d2 dfea      	RCALL _timer_init
                 ; 0001 004A     #asm("sei")
0000d3 9478      	sei
                 ; 0001 004B }
0000d4 9508      	RET
                 ; .FEND
                 ;#include "test5_lib.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;uint8_t counter = 0;
                 ;uint8_t Stepper = Left;
                 ;uint8_t duty_cycle;
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void){
                 ; 0002 0007 interrupt [20] void timer0_comp_isr(void){
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
0000d5 920a      	ST   -Y,R0
0000d6 921a      	ST   -Y,R1
0000d7 936a      	ST   -Y,R22
0000d8 937a      	ST   -Y,R23
0000d9 938a      	ST   -Y,R24
0000da 939a      	ST   -Y,R25
0000db 93aa      	ST   -Y,R26
0000dc 93ba      	ST   -Y,R27
0000dd 93ea      	ST   -Y,R30
0000de 93fa      	ST   -Y,R31
0000df b7ef      	IN   R30,SREG
0000e0 93ea      	ST   -Y,R30
                 ; 0002 0008   duty_cycle = PINA;
0000e1 d13c      	RCALL SUBOPT_0x0
                 ; 0002 0009   duty_cycle = (0.38 * (duty_cycle)) + 5;
                 ; 0002 000A   duty_cycle = (duty_cycle * 2.56) - 1;
                 ; 0002 000B   OCR0 = duty_cycle;
0000e2 be7c      	OUT  0x3C,R7
                 ; 0002 000C }
0000e3 91e9      	LD   R30,Y+
0000e4 bfef      	OUT  SREG,R30
0000e5 91f9      	LD   R31,Y+
0000e6 91e9      	LD   R30,Y+
0000e7 91b9      	LD   R27,Y+
0000e8 91a9      	LD   R26,Y+
0000e9 9199      	LD   R25,Y+
0000ea 9189      	LD   R24,Y+
0000eb 9179      	LD   R23,Y+
0000ec 9169      	LD   R22,Y+
0000ed 9019      	LD   R1,Y+
0000ee 9009      	LD   R0,Y+
0000ef 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void){
                 ; 0002 000E interrupt [5] void timer2_ovf_isr(void){
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000f0 920a      	ST   -Y,R0
0000f1 921a      	ST   -Y,R1
0000f2 92fa      	ST   -Y,R15
0000f3 936a      	ST   -Y,R22
0000f4 937a      	ST   -Y,R23
0000f5 938a      	ST   -Y,R24
0000f6 939a      	ST   -Y,R25
0000f7 93aa      	ST   -Y,R26
0000f8 93ba      	ST   -Y,R27
0000f9 93ea      	ST   -Y,R30
0000fa 93fa      	ST   -Y,R31
0000fb b7ef      	IN   R30,SREG
0000fc 93ea      	ST   -Y,R30
                 ; 0002 000F   if (counter <= 50){
0000fd e3e2      	LDI  R30,LOW(50)
0000fe 15e5      	CP   R30,R5
0000ff f0f8      	BRLO _0x40003
                 ; 0002 0010     unsigned char temp1 = PORTB.4;
                 ; 0002 0011     unsigned char temp2 = PORTB.5;
                 ; 0002 0012     unsigned char temp3 = PORTB.6;
                 ; 0002 0013     unsigned char temp4 = PORTB.7;
                 ; 0002 0014 
                 ; 0002 0015     PORTB.4 = temp4;
000100 d14c      	RCALL SUBOPT_0x1
                 ;	temp1 -> Y+3
                 ;	temp2 -> Y+2
                 ;	temp3 -> Y+1
                 ;	temp4 -> Y+0
000101 81e8      	LD   R30,Y
000102 30e0      	CPI  R30,0
000103 f411      	BRNE _0x40004
000104 98c4      	CBI  0x18,4
000105 c001      	RJMP _0x40005
                 _0x40004:
000106 9ac4      	SBI  0x18,4
                 _0x40005:
                 ; 0002 0016     PORTB.5 = temp1;
000107 81eb      	LDD  R30,Y+3
000108 30e0      	CPI  R30,0
000109 f411      	BRNE _0x40006
00010a 98c5      	CBI  0x18,5
00010b c001      	RJMP _0x40007
                 _0x40006:
00010c 9ac5      	SBI  0x18,5
                 _0x40007:
                 ; 0002 0017     PORTB.6 = temp2;
00010d 81ea      	LDD  R30,Y+2
00010e 30e0      	CPI  R30,0
00010f f411      	BRNE _0x40008
000110 98c6      	CBI  0x18,6
000111 c001      	RJMP _0x40009
                 _0x40008:
000112 9ac6      	SBI  0x18,6
                 _0x40009:
                 ; 0002 0018     PORTB.7 = temp3;
000113 81e9      	LDD  R30,Y+1
000114 30e0      	CPI  R30,0
000115 f411      	BRNE _0x4000A
000116 98c7      	CBI  0x18,7
000117 c001      	RJMP _0x4000B
                 _0x4000A:
000118 9ac7      	SBI  0x18,7
                 _0x4000B:
                 ; 0002 0019 
                 ; 0002 001A     Stepper = Right;
000119 e0e1      	LDI  R30,LOW(1)
00011a 2e4e      	MOV  R4,R30
                 ; 0002 001B     PORTD.0 = 0;
00011b 9890      	CBI  0x12,0
                 ; 0002 001C     PORTD.1 = 1;
00011c 9a91      	SBI  0x12,1
                 ; 0002 001D   }
00011d 9624      	ADIW R28,4
                 ; 0002 001E 
                 ; 0002 001F   else if (counter>100 && counter <=150){
00011e c027      	RJMP _0x40010
                 _0x40003:
00011f e6e4      	LDI  R30,LOW(100)
000120 15e5      	CP   R30,R5
000121 f418      	BRSH _0x40012
000122 e9e6      	LDI  R30,LOW(150)
000123 15e5      	CP   R30,R5
000124 f408      	BRSH _0x40013
                 _0x40012:
000125 c01e      	RJMP _0x40011
                 _0x40013:
                 ; 0002 0020     unsigned char temp1 = PORTB.4;
                 ; 0002 0021     unsigned char temp2 = PORTB.5;
                 ; 0002 0022     unsigned char temp3 = PORTB.6;
                 ; 0002 0023     unsigned char temp4 = PORTB.7;
                 ; 0002 0024 
                 ; 0002 0025     PORTB.4 = temp2;
000126 d126      	RCALL SUBOPT_0x1
                 ;	temp1 -> Y+3
                 ;	temp2 -> Y+2
                 ;	temp3 -> Y+1
                 ;	temp4 -> Y+0
000127 81ea      	LDD  R30,Y+2
000128 30e0      	CPI  R30,0
000129 f411      	BRNE _0x40014
00012a 98c4      	CBI  0x18,4
00012b c001      	RJMP _0x40015
                 _0x40014:
00012c 9ac4      	SBI  0x18,4
                 _0x40015:
                 ; 0002 0026     PORTB.5 = temp3;
00012d 81e9      	LDD  R30,Y+1
00012e 30e0      	CPI  R30,0
00012f f411      	BRNE _0x40016
000130 98c5      	CBI  0x18,5
000131 c001      	RJMP _0x40017
                 _0x40016:
000132 9ac5      	SBI  0x18,5
                 _0x40017:
                 ; 0002 0027     PORTB.6 = temp4;
000133 81e8      	LD   R30,Y
000134 30e0      	CPI  R30,0
000135 f411      	BRNE _0x40018
000136 98c6      	CBI  0x18,6
000137 c001      	RJMP _0x40019
                 _0x40018:
000138 9ac6      	SBI  0x18,6
                 _0x40019:
                 ; 0002 0028     PORTB.7 = temp1;
000139 81eb      	LDD  R30,Y+3
00013a 30e0      	CPI  R30,0
00013b f411      	BRNE _0x4001A
00013c 98c7      	CBI  0x18,7
00013d c001      	RJMP _0x4001B
                 _0x4001A:
00013e 9ac7      	SBI  0x18,7
                 _0x4001B:
                 ; 0002 0029 
                 ; 0002 002A     Stepper = Left;
00013f 2444      	CLR  R4
                 ; 0002 002B     PORTD.0 = 1;
000140 9a90      	SBI  0x12,0
                 ; 0002 002C     PORTD.1 = 0;
000141 9891      	CBI  0x12,1
                 ; 0002 002D   }
000142 9624      	ADIW R28,4
                 ; 0002 002E 
                 ; 0002 002F   else{
000143 c002      	RJMP _0x40020
                 _0x40011:
                 ; 0002 0030     PORTD.0 = 0;
000144 9890      	CBI  0x12,0
                 ; 0002 0031     PORTD.1 = 0;
000145 9891      	CBI  0x12,1
                 ; 0002 0032   }
                 _0x40020:
                 _0x40010:
                 ; 0002 0033 
                 ; 0002 0034   if (counter==0 || counter==101){
000146 2055      	TST  R5
000147 f019      	BREQ _0x40026
000148 e6e5      	LDI  R30,LOW(101)
000149 15e5      	CP   R30,R5
00014a f421      	BRNE _0x40025
                 _0x40026:
                 ; 0002 0035     lcd_clear();
00014b d113      	RCALL SUBOPT_0x2
                 ; 0002 0036     lcd_gotoxy(0, 0);
                 ; 0002 0037     lcd_puts("9000 (rpm)");
                +
00014c e6a0     +LDI R26 , LOW ( _0x40028 + ( 0 ) )
00014d e0b1     +LDI R27 , HIGH ( _0x40028 + ( 0 ) )
                 	__POINTW2MN _0x40028,0
00014e c006      	RJMP _0x40034
                 ; 0002 0038   }
                 ; 0002 0039   else if (counter == 51){
                 _0x40025:
00014f e3e3      	LDI  R30,LOW(51)
000150 15e5      	CP   R30,R5
000151 f421      	BRNE _0x4002A
                 ; 0002 003A     lcd_clear();
000152 d10c      	RCALL SUBOPT_0x2
                 ; 0002 003B     lcd_gotoxy(0, 0);
                 ; 0002 003C     lcd_puts("0 (rpm)");
                +
000153 e6ab     +LDI R26 , LOW ( _0x40028 + ( 11 ) )
000154 e0b1     +LDI R27 , HIGH ( _0x40028 + ( 11 ) )
                 	__POINTW2MN _0x40028,11
                 _0x40034:
000155 d08c      	RCALL _lcd_puts
                 ; 0002 003D   }
                 ; 0002 003E 
                 ; 0002 003F   counter = (counter + 1) % 150;
                 _0x4002A:
000156 2de5      	MOV  R30,R5
000157 e0f0      	LDI  R31,0
000158 9631      	ADIW R30,1
000159 01df      	MOVW R26,R30
00015a e9e6      	LDI  R30,LOW(150)
00015b e0f0      	LDI  R31,HIGH(150)
00015c 940e 03e3 	CALL __MODW21
00015e 2e5e      	MOV  R5,R30
                 ; 0002 0040 }
00015f 91e9      	LD   R30,Y+
000160 bfef      	OUT  SREG,R30
000161 91f9      	LD   R31,Y+
000162 91e9      	LD   R30,Y+
000163 91b9      	LD   R27,Y+
000164 91a9      	LD   R26,Y+
000165 9199      	LD   R25,Y+
000166 9189      	LD   R24,Y+
000167 9179      	LD   R23,Y+
000168 9169      	LD   R22,Y+
000169 90f9      	LD   R15,Y+
00016a 9019      	LD   R1,Y+
00016b 9009      	LD   R0,Y+
00016c 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x40028:
000160           	.BYTE 0x13
                 ;
                 ;void subRoutine1(){
                 ; 0002 0042 void subRoutine1(){
                 
                 	.CSEG
                 _subRoutine1:
                 ; .FSTART _subRoutine1
                 ; 0002 0043   delay_ms(5000);
00016d d0f6      	RCALL SUBOPT_0x3
                 ; 0002 0044 
                 ; 0002 0045   // 10 % duty cycle (17 rpm)
                 ; 0002 0046   TCNT0 = 0x00;
                 ; 0002 0047   lcd_clear();
                 ; 0002 0048   lcd_puts("Duty Cycle = 10%");
                +
00016e e7a3     +LDI R26 , LOW ( _0x4002B + ( 0 ) )
00016f e0b1     +LDI R27 , HIGH ( _0x4002B + ( 0 ) )
                 	__POINTW2MN _0x4002B,0
000170 d071      	RCALL _lcd_puts
                 ; 0002 0049   OCR0 = 0x1A;
000171 e1ea      	LDI  R30,LOW(26)
000172 bfec      	OUT  0x3C,R30
                 ; 0002 004A 
                 ; 0002 004B   delay_ms(5000);
000173 d0f0      	RCALL SUBOPT_0x3
                 ; 0002 004C 
                 ; 0002 004D   // 30 % duty cycle (50 rpm)
                 ; 0002 004E   TCNT0 = 0x00;
                 ; 0002 004F   lcd_clear();
                 ; 0002 0050   lcd_puts("Duty Cycle = 30%");
                +
000174 e8a4     +LDI R26 , LOW ( _0x4002B + ( 17 ) )
000175 e0b1     +LDI R27 , HIGH ( _0x4002B + ( 17 ) )
                 	__POINTW2MN _0x4002B,17
000176 d06b      	RCALL _lcd_puts
                 ; 0002 0051   OCR0 = 0x4D;
000177 e4ed      	LDI  R30,LOW(77)
000178 bfec      	OUT  0x3C,R30
                 ; 0002 0052 
                 ; 0002 0053   delay_ms(5000);
000179 d0ea      	RCALL SUBOPT_0x3
                 ; 0002 0054 
                 ; 0002 0055   // 50 % duty cycle (84 rpm)
                 ; 0002 0056   TCNT0 = 0x00;
                 ; 0002 0057   lcd_clear();
                 ; 0002 0058   lcd_puts("Duty Cycle = 50%");
                +
00017a e9a5     +LDI R26 , LOW ( _0x4002B + ( 34 ) )
00017b e0b1     +LDI R27 , HIGH ( _0x4002B + ( 34 ) )
                 	__POINTW2MN _0x4002B,34
00017c d065      	RCALL _lcd_puts
                 ; 0002 0059   OCR0 = 0x80;
00017d e8e0      	LDI  R30,LOW(128)
00017e bfec      	OUT  0x3C,R30
                 ; 0002 005A 
                 ; 0002 005B   delay_ms(5000);
00017f d0e4      	RCALL SUBOPT_0x3
                 ; 0002 005C 
                 ; 0002 005D   // 70 % duty cycle (116 rpm)
                 ; 0002 005E   TCNT0 = 0x00;
                 ; 0002 005F   lcd_clear();
                 ; 0002 0060   lcd_puts("Duty Cycle = 70%");
                +
000180 eaa6     +LDI R26 , LOW ( _0x4002B + ( 51 ) )
000181 e0b1     +LDI R27 , HIGH ( _0x4002B + ( 51 ) )
                 	__POINTW2MN _0x4002B,51
000182 d05f      	RCALL _lcd_puts
                 ; 0002 0061   OCR0 = 0xB2;
000183 ebe2      	LDI  R30,LOW(178)
000184 bfec      	OUT  0x3C,R30
                 ; 0002 0062 
                 ; 0002 0063   delay_ms(5000);
000185 d0de      	RCALL SUBOPT_0x3
                 ; 0002 0064 
                 ; 0002 0065   // 90 % duty cycle (149 rpm)
                 ; 0002 0066   TCNT0 = 0x00;
                 ; 0002 0067   lcd_clear();
                 ; 0002 0068   lcd_puts("Duty Cycle = 90%");
                +
000186 eba7     +LDI R26 , LOW ( _0x4002B + ( 68 ) )
000187 e0b1     +LDI R27 , HIGH ( _0x4002B + ( 68 ) )
                 	__POINTW2MN _0x4002B,68
000188 d059      	RCALL _lcd_puts
                 ; 0002 0069   OCR0 = 0xE5;
000189 eee5      	LDI  R30,LOW(229)
00018a bfec      	OUT  0x3C,R30
                 ; 0002 006A }
00018b 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x4002B:
000173           	.BYTE 0x55
                 ;
                 ;void subRoutine3(){
                 ; 0002 006C void subRoutine3(){
                 
                 	.CSEG
                 _subRoutine3:
                 ; .FSTART _subRoutine3
                 ; 0002 006D   duty_cycle = PINA;
00018c d091      	RCALL SUBOPT_0x0
                 ; 0002 006E   duty_cycle = (0.38 * (duty_cycle)) + 5;
                 ; 0002 006F   duty_cycle = (duty_cycle * 2.56) - 1;
                 ; 0002 0070   TCNT0 = 0x00;
00018d e0e0      	LDI  R30,LOW(0)
00018e bfe2      	OUT  0x32,R30
                 ; 0002 0071   OCR0 = duty_cycle;
00018f be7c      	OUT  0x3C,R7
                 ; 0002 0072 }
000190 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine4(){
                 ; 0002 0074 void subRoutine4(){
                 _subRoutine4:
                 ; .FSTART _subRoutine4
                 ; 0002 0075   PORTB.4 = 1;
000191 9ac4      	SBI  0x18,4
                 ; 0002 0076   PORTB.5 = 0;
000192 98c5      	CBI  0x18,5
                 ; 0002 0077   PORTB.6 = 0;
000193 98c6      	CBI  0x18,6
                 ; 0002 0078   PORTB.7 = 0;
000194 98c7      	CBI  0x18,7
                 ; 0002 0079 }
000195 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000196 93aa      	ST   -Y,R26
000197 b3e5      	IN   R30,0x15
000198 70ef      	ANDI R30,LOW(0xF)
000199 2fae      	MOV  R26,R30
00019a 81e8      	LD   R30,Y
00019b 7fe0      	ANDI R30,LOW(0xF0)
00019c 2bea      	OR   R30,R26
00019d bbe5      	OUT  0x15,R30
                +
00019e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00019f 958a     +DEC R24
0001a0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a1 9aaa      	SBI  0x15,2
                +
0001a2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a3 958a     +DEC R24
0001a4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a5 98aa      	CBI  0x15,2
                +
0001a6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a7 958a     +DEC R24
0001a8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a9 c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001aa 93aa      	ST   -Y,R26
0001ab 81a8      	LD   R26,Y
0001ac dfe9      	RCALL __lcd_write_nibble_G100
0001ad 81e8          ld    r30,y
0001ae 95e2          swap  r30
0001af 83e8          st    y,r30
0001b0 81a8      	LD   R26,Y
0001b1 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001b2 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001b3 958a     +DEC R24
0001b4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001b5 c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001b6 93aa      	ST   -Y,R26
0001b7 81e8      	LD   R30,Y
0001b8 e0f0      	LDI  R31,0
0001b9 53e8      	SUBI R30,LOW(-__base_y_G100)
0001ba 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001bb 81e0      	LD   R30,Z
0001bc 81a9      	LDD  R26,Y+1
0001bd 0fae      	ADD  R26,R30
0001be dfeb      	RCALL __lcd_write_data
0001bf 8069      	LDD  R6,Y+1
0001c0 8098      	LDD  R9,Y+0
0001c1 9622      	ADIW R28,2
0001c2 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001c3 e0a2      	LDI  R26,LOW(2)
0001c4 d0a6      	RCALL SUBOPT_0x4
0001c5 e0ac      	LDI  R26,LOW(12)
0001c6 dfe3      	RCALL __lcd_write_data
0001c7 e0a1      	LDI  R26,LOW(1)
0001c8 d0a2      	RCALL SUBOPT_0x4
0001c9 e0e0      	LDI  R30,LOW(0)
0001ca 2e9e      	MOV  R9,R30
0001cb 2e6e      	MOV  R6,R30
0001cc 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001cd 93aa      	ST   -Y,R26
0001ce 81a8      	LD   R26,Y
0001cf 30aa      	CPI  R26,LOW(0xA)
0001d0 f011      	BREQ _0x2000005
0001d1 1468      	CP   R6,R8
0001d2 f048      	BRLO _0x2000004
                 _0x2000005:
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 93ea      	ST   -Y,R30
0001d5 9493      	INC  R9
0001d6 2da9      	MOV  R26,R9
0001d7 dfde      	RCALL _lcd_gotoxy
0001d8 81a8      	LD   R26,Y
0001d9 30aa      	CPI  R26,LOW(0xA)
0001da f409      	BRNE _0x2000007
0001db c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
0001dc 9463      	INC  R6
0001dd 9aa8      	SBI  0x15,0
0001de 81a8      	LD   R26,Y
0001df dfca      	RCALL __lcd_write_data
0001e0 98a8      	CBI  0x15,0
0001e1 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001e2 93ba      	ST   -Y,R27
0001e3 93aa      	ST   -Y,R26
0001e4 931a      	ST   -Y,R17
                 _0x2000008:
0001e5 81a9      	LDD  R26,Y+1
0001e6 81ba      	LDD  R27,Y+1+1
0001e7 91ed      	LD   R30,X+
0001e8 83a9      	STD  Y+1,R26
0001e9 83ba      	STD  Y+1+1,R27
0001ea 2f1e      	MOV  R17,R30
0001eb 30e0      	CPI  R30,0
0001ec f019      	BREQ _0x200000A
0001ed 2fa1      	MOV  R26,R17
0001ee dfde      	RCALL _lcd_putchar
0001ef cff5      	RJMP _0x2000008
                 _0x200000A:
0001f0 8118      	LDD  R17,Y+0
0001f1 9623      	ADIW R28,3
0001f2 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001f3 93aa      	ST   -Y,R26
0001f4 b3e4      	IN   R30,0x14
0001f5 6fe0      	ORI  R30,LOW(0xF0)
0001f6 bbe4      	OUT  0x14,R30
0001f7 9aa2      	SBI  0x14,2
0001f8 9aa0      	SBI  0x14,0
0001f9 9aa1      	SBI  0x14,1
0001fa 98aa      	CBI  0x15,2
0001fb 98a8      	CBI  0x15,0
0001fc 98a9      	CBI  0x15,1
0001fd 8088      	LDD  R8,Y+0
0001fe 81e8      	LD   R30,Y
0001ff 58e0      	SUBI R30,-LOW(128)
                +
000200 93e0 01ca+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000202 81e8      	LD   R30,Y
000203 54e0      	SUBI R30,-LOW(192)
                +
000204 93e0 01cb+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000206 e1a4      	LDI  R26,LOW(20)
000207 e0b0      	LDI  R27,0
000208 940e 0277 	CALL _delay_ms
00020a d065      	RCALL SUBOPT_0x5
00020b d064      	RCALL SUBOPT_0x5
00020c d063      	RCALL SUBOPT_0x5
00020d e2a0      	LDI  R26,LOW(32)
00020e df87      	RCALL __lcd_write_nibble_G100
                +
00020f ec88     +LDI R24 , LOW ( 200 )
000210 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000211 9701     +SBIW R24 , 1
000212 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000213 e2a8      	LDI  R26,LOW(40)
000214 df95      	RCALL __lcd_write_data
000215 e0a4      	LDI  R26,LOW(4)
000216 df93      	RCALL __lcd_write_data
000217 e8a5      	LDI  R26,LOW(133)
000218 df91      	RCALL __lcd_write_data
000219 e0a6      	LDI  R26,LOW(6)
00021a df8f      	RCALL __lcd_write_data
00021b dfa7      	RCALL _lcd_clear
                 _0x2020001:
00021c 9621      	ADIW R28,1
00021d 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
0001c8           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x0:
00021e b279      	IN   R7,25
00021f 2de7      	MOV  R30,R7
000220 e0f0      	LDI  R31,0
000221 940e 03cb 	CALL __CWD1
000223 940e 02e7 	CALL __CDF1
                +
000225 e5ac     +LDI R26 , LOW ( 0x3EC28F5C )
000226 e8bf     +LDI R27 , HIGH ( 0x3EC28F5C )
000227 ec82     +LDI R24 , BYTE3 ( 0x3EC28F5C )
000228 e39e     +LDI R25 , BYTE4 ( 0x3EC28F5C )
                 	__GETD2N 0x3EC28F5C
000229 940e 0371 	CALL __MULF12
                +
00022b e0a0     +LDI R26 , LOW ( 0x40A00000 )
00022c e0b0     +LDI R27 , HIGH ( 0x40A00000 )
00022d ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
00022e e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
00022f 940e 0321 	CALL __ADDF12
000231 940e 02ae 	CALL __CFD1U
000233 2e7e      	MOV  R7,R30
000234 e0f0      	LDI  R31,0
000235 940e 03cb 	CALL __CWD1
000237 940e 02e7 	CALL __CDF1
                +
000239 e0aa     +LDI R26 , LOW ( 0x4023D70A )
00023a edb7     +LDI R27 , HIGH ( 0x4023D70A )
00023b e283     +LDI R24 , BYTE3 ( 0x4023D70A )
00023c e490     +LDI R25 , BYTE4 ( 0x4023D70A )
                 	__GETD2N 0x4023D70A
00023d 940e 0371 	CALL __MULF12
00023f 01df      	MOVW R26,R30
000240 01cb      	MOVW R24,R22
                +
000241 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000242 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000243 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000244 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000245 940e 03f1 	CALL __SWAPD12
000247 940e 031a 	CALL __SUBF12
000249 940e 02ae 	CALL __CFD1U
00024b 2e7e      	MOV  R7,R30
00024c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
00024d 9724      	SBIW R28,4
00024e e0e0      	LDI  R30,0
00024f 99c4      	SBIC 0x18,4
000250 e0e1      	LDI  R30,1
000251 83eb      	STD  Y+3,R30
000252 e0e0      	LDI  R30,0
000253 99c5      	SBIC 0x18,5
000254 e0e1      	LDI  R30,1
000255 83ea      	STD  Y+2,R30
000256 e0e0      	LDI  R30,0
000257 99c6      	SBIC 0x18,6
000258 e0e1      	LDI  R30,1
000259 83e9      	STD  Y+1,R30
00025a e0e0      	LDI  R30,0
00025b 99c7      	SBIC 0x18,7
00025c e0e1      	LDI  R30,1
00025d 83e8      	ST   Y,R30
00025e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00025f df63      	RCALL _lcd_clear
000260 e0e0      	LDI  R30,LOW(0)
000261 93ea      	ST   -Y,R30
000262 e0a0      	LDI  R26,LOW(0)
000263 cf52      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3:
000264 e8a8      	LDI  R26,LOW(5000)
000265 e1b3      	LDI  R27,HIGH(5000)
000266 940e 0277 	CALL _delay_ms
000268 e0e0      	LDI  R30,LOW(0)
000269 bfe2      	OUT  0x32,R30
00026a cf58      	RJMP _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00026b df3e      	RCALL __lcd_write_data
00026c e0a3      	LDI  R26,LOW(3)
00026d e0b0      	LDI  R27,0
00026e 940c 0277 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000270 e3a0      	LDI  R26,LOW(48)
000271 df24      	RCALL __lcd_write_nibble_G100
                +
000272 ec88     +LDI R24 , LOW ( 200 )
000273 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000274 9701     +SBIW R24 , 1
000275 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000276 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000277 9610      	adiw r26,0
000278 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000279 ed80     +LDI R24 , LOW ( 0x7D0 )
00027a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00027b 9701     +SBIW R24 , 1
00027c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00027d 95a8      	wdr
00027e 9711      	sbiw r26,1
00027f f7c9      	brne __delay_ms0
                 __delay_ms1:
000280 9508      	ret
                 
                 __ROUND_REPACK:
000281 2355      	TST  R21
000282 f442      	BRPL __REPACK
000283 3850      	CPI  R21,0x80
000284 f411      	BRNE __ROUND_REPACK0
000285 ffe0      	SBRS R30,0
000286 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000287 9631      	ADIW R30,1
000288 1f69      	ADC  R22,R25
000289 1f79      	ADC  R23,R25
00028a f06b      	BRVS __REPACK1
                 
                 __REPACK:
00028b e850      	LDI  R21,0x80
00028c 2757      	EOR  R21,R23
00028d f411      	BRNE __REPACK0
00028e 935f      	PUSH R21
00028f c0cf      	RJMP __ZERORES
                 __REPACK0:
000290 3f5f      	CPI  R21,0xFF
000291 f031      	BREQ __REPACK1
000292 0f66      	LSL  R22
000293 0c00      	LSL  R0
000294 9557      	ROR  R21
000295 9567      	ROR  R22
000296 2f75      	MOV  R23,R21
000297 9508      	RET
                 __REPACK1:
000298 935f      	PUSH R21
000299 2000      	TST  R0
00029a f00a      	BRMI __REPACK2
00029b c0cf      	RJMP __MAXRES
                 __REPACK2:
00029c c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00029d e850      	LDI  R21,0x80
00029e 2e19      	MOV  R1,R25
00029f 2215      	AND  R1,R21
0002a0 0f88      	LSL  R24
0002a1 1f99      	ROL  R25
0002a2 2795      	EOR  R25,R21
0002a3 0f55      	LSL  R21
0002a4 9587      	ROR  R24
                 
                 __UNPACK1:
0002a5 e850      	LDI  R21,0x80
0002a6 2e07      	MOV  R0,R23
0002a7 2205      	AND  R0,R21
0002a8 0f66      	LSL  R22
0002a9 1f77      	ROL  R23
0002aa 2775      	EOR  R23,R21
0002ab 0f55      	LSL  R21
0002ac 9567      	ROR  R22
0002ad 9508      	RET
                 
                 __CFD1U:
0002ae 9468      	SET
0002af c001      	RJMP __CFD1U0
                 __CFD1:
0002b0 94e8      	CLT
                 __CFD1U0:
0002b1 935f      	PUSH R21
0002b2 dff2      	RCALL __UNPACK1
0002b3 3870      	CPI  R23,0x80
0002b4 f018      	BRLO __CFD10
0002b5 3f7f      	CPI  R23,0xFF
0002b6 f408      	BRCC __CFD10
0002b7 c0a7      	RJMP __ZERORES
                 __CFD10:
0002b8 e156      	LDI  R21,22
0002b9 1b57      	SUB  R21,R23
0002ba f4aa      	BRPL __CFD11
0002bb 9551      	NEG  R21
0002bc 3058      	CPI  R21,8
0002bd f40e      	BRTC __CFD19
0002be 3059      	CPI  R21,9
                 __CFD19:
0002bf f030      	BRLO __CFD17
0002c0 efef      	SER  R30
0002c1 efff      	SER  R31
0002c2 ef6f      	SER  R22
0002c3 e77f      	LDI  R23,0x7F
0002c4 f977      	BLD  R23,7
0002c5 c01a      	RJMP __CFD15
                 __CFD17:
0002c6 2777      	CLR  R23
0002c7 2355      	TST  R21
0002c8 f0b9      	BREQ __CFD15
                 __CFD18:
0002c9 0fee      	LSL  R30
0002ca 1fff      	ROL  R31
0002cb 1f66      	ROL  R22
0002cc 1f77      	ROL  R23
0002cd 955a      	DEC  R21
0002ce f7d1      	BRNE __CFD18
0002cf c010      	RJMP __CFD15
                 __CFD11:
0002d0 2777      	CLR  R23
                 __CFD12:
0002d1 3058      	CPI  R21,8
0002d2 f028      	BRLO __CFD13
0002d3 2fef      	MOV  R30,R31
0002d4 2ff6      	MOV  R31,R22
0002d5 2f67      	MOV  R22,R23
0002d6 5058      	SUBI R21,8
0002d7 cff9      	RJMP __CFD12
                 __CFD13:
0002d8 2355      	TST  R21
0002d9 f031      	BREQ __CFD15
                 __CFD14:
0002da 9576      	LSR  R23
0002db 9567      	ROR  R22
0002dc 95f7      	ROR  R31
0002dd 95e7      	ROR  R30
0002de 955a      	DEC  R21
0002df f7d1      	BRNE __CFD14
                 __CFD15:
0002e0 2000      	TST  R0
0002e1 f40a      	BRPL __CFD16
0002e2 d0e0      	RCALL __ANEGD1
                 __CFD16:
0002e3 915f      	POP  R21
0002e4 9508      	RET
                 
                 __CDF1U:
0002e5 9468      	SET
0002e6 c001      	RJMP __CDF1U0
                 __CDF1:
0002e7 94e8      	CLT
                 __CDF1U0:
0002e8 9730      	SBIW R30,0
0002e9 4060      	SBCI R22,0
0002ea 4070      	SBCI R23,0
0002eb f0b1      	BREQ __CDF10
0002ec 2400      	CLR  R0
0002ed f026      	BRTS __CDF11
0002ee 2377      	TST  R23
0002ef f412      	BRPL __CDF11
0002f0 9400      	COM  R0
0002f1 d0d1      	RCALL __ANEGD1
                 __CDF11:
0002f2 2e17      	MOV  R1,R23
0002f3 e17e      	LDI  R23,30
0002f4 2011      	TST  R1
                 __CDF12:
0002f5 f032      	BRMI __CDF13
0002f6 957a      	DEC  R23
0002f7 0fee      	LSL  R30
0002f8 1fff      	ROL  R31
0002f9 1f66      	ROL  R22
0002fa 1c11      	ROL  R1
0002fb cff9      	RJMP __CDF12
                 __CDF13:
0002fc 2fef      	MOV  R30,R31
0002fd 2ff6      	MOV  R31,R22
0002fe 2d61      	MOV  R22,R1
0002ff 935f      	PUSH R21
000300 df8a      	RCALL __REPACK
000301 915f      	POP  R21
                 __CDF10:
000302 9508      	RET
                 
                 __SWAPACC:
000303 934f      	PUSH R20
000304 01af      	MOVW R20,R30
000305 01fd      	MOVW R30,R26
000306 01da      	MOVW R26,R20
000307 01ab      	MOVW R20,R22
000308 01bc      	MOVW R22,R24
000309 01ca      	MOVW R24,R20
00030a 2d40      	MOV  R20,R0
00030b 2c01      	MOV  R0,R1
00030c 2e14      	MOV  R1,R20
00030d 914f      	POP  R20
00030e 9508      	RET
                 
                 __UADD12:
00030f 0fea      	ADD  R30,R26
000310 1ffb      	ADC  R31,R27
000311 1f68      	ADC  R22,R24
000312 9508      	RET
                 
                 __NEGMAN1:
000313 95e0      	COM  R30
000314 95f0      	COM  R31
000315 9560      	COM  R22
000316 5fef      	SUBI R30,-1
000317 4fff      	SBCI R31,-1
000318 4f6f      	SBCI R22,-1
000319 9508      	RET
                 
                 __SUBF12:
00031a 935f      	PUSH R21
00031b df81      	RCALL __UNPACK
00031c 3890      	CPI  R25,0x80
00031d f171      	BREQ __ADDF129
00031e e850      	LDI  R21,0x80
00031f 2615      	EOR  R1,R21
                 
000320 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000321 935f      	PUSH R21
000322 df7a      	RCALL __UNPACK
000323 3890      	CPI  R25,0x80
000324 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000325 3870      	CPI  R23,0x80
000326 f121      	BREQ __ADDF128
                 __ADDF121:
000327 2f57      	MOV  R21,R23
000328 1b59      	SUB  R21,R25
000329 f12b      	BRVS __ADDF1211
00032a f412      	BRPL __ADDF122
00032b dfd7      	RCALL __SWAPACC
00032c cffa      	RJMP __ADDF121
                 __ADDF122:
00032d 3158      	CPI  R21,24
00032e f018      	BRLO __ADDF123
00032f 27aa      	CLR  R26
000330 27bb      	CLR  R27
000331 2788      	CLR  R24
                 __ADDF123:
000332 3058      	CPI  R21,8
000333 f028      	BRLO __ADDF124
000334 2fab      	MOV  R26,R27
000335 2fb8      	MOV  R27,R24
000336 2788      	CLR  R24
000337 5058      	SUBI R21,8
000338 cff9      	RJMP __ADDF123
                 __ADDF124:
000339 2355      	TST  R21
00033a f029      	BREQ __ADDF126
                 __ADDF125:
00033b 9586      	LSR  R24
00033c 95b7      	ROR  R27
00033d 95a7      	ROR  R26
00033e 955a      	DEC  R21
00033f f7d9      	BRNE __ADDF125
                 __ADDF126:
000340 2d50      	MOV  R21,R0
000341 2551      	EOR  R21,R1
000342 f072      	BRMI __ADDF127
000343 dfcb      	RCALL __UADD12
000344 f438      	BRCC __ADDF129
000345 9567      	ROR  R22
000346 95f7      	ROR  R31
000347 95e7      	ROR  R30
000348 9573      	INC  R23
000349 f413      	BRVC __ADDF129
00034a c020      	RJMP __MAXRES
                 __ADDF128:
00034b dfb7      	RCALL __SWAPACC
                 __ADDF129:
00034c df3e      	RCALL __REPACK
00034d 915f      	POP  R21
00034e 9508      	RET
                 __ADDF1211:
00034f f7d8      	BRCC __ADDF128
000350 cffb      	RJMP __ADDF129
                 __ADDF127:
000351 1bea      	SUB  R30,R26
000352 0bfb      	SBC  R31,R27
000353 0b68      	SBC  R22,R24
000354 f051      	BREQ __ZERORES
000355 f410      	BRCC __ADDF1210
000356 9400      	COM  R0
000357 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000358 2366      	TST  R22
000359 f392      	BRMI __ADDF129
00035a 0fee      	LSL  R30
00035b 1fff      	ROL  R31
00035c 1f66      	ROL  R22
00035d 957a      	DEC  R23
00035e f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00035f 27ee      	CLR  R30
000360 27ff      	CLR  R31
000361 2766      	CLR  R22
000362 2777      	CLR  R23
000363 915f      	POP  R21
000364 9508      	RET
                 
                 __MINRES:
000365 efef      	SER  R30
000366 efff      	SER  R31
000367 e76f      	LDI  R22,0x7F
000368 ef7f      	SER  R23
000369 915f      	POP  R21
00036a 9508      	RET
                 
                 __MAXRES:
00036b efef      	SER  R30
00036c efff      	SER  R31
00036d e76f      	LDI  R22,0x7F
00036e e77f      	LDI  R23,0x7F
00036f 915f      	POP  R21
000370 9508      	RET
                 
                 __MULF12:
000371 935f      	PUSH R21
000372 df2a      	RCALL __UNPACK
000373 3870      	CPI  R23,0x80
000374 f351      	BREQ __ZERORES
000375 3890      	CPI  R25,0x80
000376 f341      	BREQ __ZERORES
000377 2401      	EOR  R0,R1
000378 9408      	SEC
000379 1f79      	ADC  R23,R25
00037a f423      	BRVC __MULF124
00037b f31c      	BRLT __ZERORES
                 __MULF125:
00037c 2000      	TST  R0
00037d f33a      	BRMI __MINRES
00037e cfec      	RJMP __MAXRES
                 __MULF124:
00037f 920f      	PUSH R0
000380 931f      	PUSH R17
000381 932f      	PUSH R18
000382 933f      	PUSH R19
000383 934f      	PUSH R20
000384 2711      	CLR  R17
000385 2722      	CLR  R18
000386 2799      	CLR  R25
000387 9f68      	MUL  R22,R24
000388 01a0      	MOVW R20,R0
000389 9f8f      	MUL  R24,R31
00038a 2d30      	MOV  R19,R0
00038b 0d41      	ADD  R20,R1
00038c 1f59      	ADC  R21,R25
00038d 9f6b      	MUL  R22,R27
00038e 0d30      	ADD  R19,R0
00038f 1d41      	ADC  R20,R1
000390 1f59      	ADC  R21,R25
000391 9f8e      	MUL  R24,R30
000392 d027      	RCALL __MULF126
000393 9fbf      	MUL  R27,R31
000394 d025      	RCALL __MULF126
000395 9f6a      	MUL  R22,R26
000396 d023      	RCALL __MULF126
000397 9fbe      	MUL  R27,R30
000398 d01d      	RCALL __MULF127
000399 9faf      	MUL  R26,R31
00039a d01b      	RCALL __MULF127
00039b 9fae      	MUL  R26,R30
00039c 0d11      	ADD  R17,R1
00039d 1f29      	ADC  R18,R25
00039e 1f39      	ADC  R19,R25
00039f 1f49      	ADC  R20,R25
0003a0 1f59      	ADC  R21,R25
0003a1 2fe3      	MOV  R30,R19
0003a2 2ff4      	MOV  R31,R20
0003a3 2f65      	MOV  R22,R21
0003a4 2f52      	MOV  R21,R18
0003a5 914f      	POP  R20
0003a6 913f      	POP  R19
0003a7 912f      	POP  R18
0003a8 911f      	POP  R17
0003a9 900f      	POP  R0
0003aa 2366      	TST  R22
0003ab f02a      	BRMI __MULF122
0003ac 0f55      	LSL  R21
0003ad 1fee      	ROL  R30
0003ae 1fff      	ROL  R31
0003af 1f66      	ROL  R22
0003b0 c002      	RJMP __MULF123
                 __MULF122:
0003b1 9573      	INC  R23
0003b2 f24b      	BRVS __MULF125
                 __MULF123:
0003b3 decd      	RCALL __ROUND_REPACK
0003b4 915f      	POP  R21
0003b5 9508      	RET
                 
                 __MULF127:
0003b6 0d10      	ADD  R17,R0
0003b7 1d21      	ADC  R18,R1
0003b8 1f39      	ADC  R19,R25
0003b9 c002      	RJMP __MULF128
                 __MULF126:
0003ba 0d20      	ADD  R18,R0
0003bb 1d31      	ADC  R19,R1
                 __MULF128:
0003bc 1f49      	ADC  R20,R25
0003bd 1f59      	ADC  R21,R25
0003be 9508      	RET
                 
                 __ANEGW1:
0003bf 95f1      	NEG  R31
0003c0 95e1      	NEG  R30
0003c1 40f0      	SBCI R31,0
0003c2 9508      	RET
                 
                 __ANEGD1:
0003c3 95f0      	COM  R31
0003c4 9560      	COM  R22
0003c5 9570      	COM  R23
0003c6 95e1      	NEG  R30
0003c7 4fff      	SBCI R31,-1
0003c8 4f6f      	SBCI R22,-1
0003c9 4f7f      	SBCI R23,-1
0003ca 9508      	RET
                 
                 __CWD1:
0003cb 2f6f      	MOV  R22,R31
0003cc 0f66      	ADD  R22,R22
0003cd 0b66      	SBC  R22,R22
0003ce 2f76      	MOV  R23,R22
0003cf 9508      	RET
                 
                 __DIVW21U:
0003d0 2400      	CLR  R0
0003d1 2411      	CLR  R1
0003d2 e190      	LDI  R25,16
                 __DIVW21U1:
0003d3 0faa      	LSL  R26
0003d4 1fbb      	ROL  R27
0003d5 1c00      	ROL  R0
0003d6 1c11      	ROL  R1
0003d7 1a0e      	SUB  R0,R30
0003d8 0a1f      	SBC  R1,R31
0003d9 f418      	BRCC __DIVW21U2
0003da 0e0e      	ADD  R0,R30
0003db 1e1f      	ADC  R1,R31
0003dc c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003dd 60a1      	SBR  R26,1
                 __DIVW21U3:
0003de 959a      	DEC  R25
0003df f799      	BRNE __DIVW21U1
0003e0 01fd      	MOVW R30,R26
0003e1 01d0      	MOVW R26,R0
0003e2 9508      	RET
                 
                 __MODW21:
0003e3 94e8      	CLT
0003e4 ffb7      	SBRS R27,7
0003e5 c004      	RJMP __MODW211
0003e6 95a0      	COM  R26
0003e7 95b0      	COM  R27
0003e8 9611      	ADIW R26,1
0003e9 9468      	SET
                 __MODW211:
0003ea fdf7      	SBRC R31,7
0003eb dfd3      	RCALL __ANEGW1
0003ec dfe3      	RCALL __DIVW21U
0003ed 01fd      	MOVW R30,R26
0003ee f40e      	BRTC __MODW212
0003ef dfcf      	RCALL __ANEGW1
                 __MODW212:
0003f0 9508      	RET
                 
                 __SWAPD12:
0003f1 2e18      	MOV  R1,R24
0003f2 2f86      	MOV  R24,R22
0003f3 2d61      	MOV  R22,R1
0003f4 2e19      	MOV  R1,R25
0003f5 2f97      	MOV  R25,R23
0003f6 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0003f7 2e1b      	MOV  R1,R27
0003f8 2fbf      	MOV  R27,R31
0003f9 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0003fa 2e1a      	MOV  R1,R26
0003fb 2fae      	MOV  R26,R30
0003fc 2de1      	MOV  R30,R1
0003fd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  33 r1 :  33 r2 :   0 r3 :   0 r4 :   2 r5 :   8 r6 :   4 r7 :   6 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   9 r18:   7 r19:   8 r20:  16 r21:  58 r22:  50 r23:  41 
r24:  44 r25:  36 r26:  75 r27:  36 r28:   7 r29:   1 r30: 187 r31:  46 
x  :   4 y  :  88 z  :   8 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   9 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  16 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   1 brmi  :   6 brne  :  28 brpl  :   5 brsh  :   2 brtc  :   2 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   0 call  :  18 
cbi   :  20 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  19 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :  10 
cp    :   6 cpc   :   0 cpi   :  25 cpse  :   0 dec   :  11 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   4 jmp   :  23 ld    :  37 ldd   :  13 ldi   : 125 
lds   :   0 lpm   :   7 lsl   :  11 lsr   :   2 mov   :  48 movw  :  16 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   1 out   :  35 pop   :  13 push  :  13 rcall :  62 ret   :  33 
reti  :   2 rjmp  :  42 rol   :  16 ror   :  12 sbc   :   4 sbci  :   9 
sbi   :  16 sbic  :   4 sbis  :   0 sbiw  :   9 sbr   :   1 sbrc  :   1 
sbrs  :   2 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  38 std   :   5 sts   :   2 sub   :   4 subi  :   6 swap  :   1 
tst   :  12 wdr   :   1 
Instructions used: 72 out of 116 (62.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007fc   1888    156   2044   16384  12.5%
[.dseg] 0x000060 0x0001cc      0    108    108    1024  10.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
