;#include "test8_lib.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;uint8_t i, j, k;
;unsigned short name[] = {
;  0xFF, 0x81, 0xF1, 0xE3, 0xE3, 0xF1, 0x81, 0xFF, // code for char M
;  0xFF, 0xA1, 0xA1, 0xAD, 0xAD, 0x8D, 0x8D, 0xFF, // code for char S
;  0xFF, 0x81, 0xF1, 0xE3, 0xE3, 0xF1, 0x81, 0xFF, // code for char M
;  0xFF, 0xA1, 0xA1, 0xAD, 0xAD, 0x8D, 0x8D, 0xFF  // code for char S
;};

	.DSEG
;
;uint8_t set_portD(uint8_t a, uint8_t b, uint8_t size) {
; 0004 000B uint8_t set_portD(uint8_t a, uint8_t b, uint8_t size) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0004 000C   if (b-a < size)
;PCODE: $0000000F VOL: 0
;	a -> Y+2
;	b -> Y+1
;	size -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0004 000D     return 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0004 000E   return 1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0004 000F }
;PCODE: $00000020 VOL: 0
;
;uint16_t set_portA(uint8_t num) {
; 0004 0011 uint16_t set_portA(uint8_t num) {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0004 0012   return pow(2, num);
;PCODE: $00000023 VOL: 0
;	num -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0004 0013 }
;PCODE: $0000002D VOL: 0
;
;
;void subRoutine1(uint8_t round) {
; 0004 0016 void subRoutine1(uint8_t round) {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0004 0017   for(k = 0 ; k < round ; k++) {
;PCODE: $00000030 VOL: 0
;	round -> Y+0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0004 0018     for (i = 0 ; i < 16 ; i++) {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0004 0019       for (j = i ; j < i + 16 ; j++) {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0004 001A         PORTD.7 = set_portD(i, j, 8);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0004 001B         PORTA = set_portA((j-i)%8);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0004 001C         PORTB = name[j];
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0004 001D         delay_ms(3);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0004 001E       }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0004 001F     }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0004 0020   }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0004 0021 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;
;void subRoutine2() {
; 0004 0023 void subRoutine2() {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0004 0024   glcd_putimagef(0, 0, picture,GLCD_PUTCOPY);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0004 0025 }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;void subRoutine3() {
; 0004 0027 void subRoutine3() {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0004 0028   _timer_init_();
;PCODE: $0000008A VOL: 0
; 0004 0029   #asm("sei");
;PCODE: $0000008B VOL: 0
	sei
;PCODE: $0000008C VOL: 0
; 0004 002A   update_clock();
;PCODE: $0000008D VOL: 0
; 0004 002B }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
