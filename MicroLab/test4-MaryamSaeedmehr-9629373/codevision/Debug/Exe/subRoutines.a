;#include "test4_lib.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// ----------------------------------------------------
;uint8_t houre = 0;
;uint8_t minute = 0;
;uint8_t second = 0;
;uint8_t hundredth_of_a_second = 0;
;uint8_t parking_empty_capacity = maxParkingCapacuty;
;uint8_t period = 255;
;uint16_t in_period;
;uint16_t temp;
;char which_one_is_clicked = stop;
;char timer0_error_handler = 0;
;char* LCD_line1_template = "00:00:00:00";

	.DSEG
_0x40003:
	.BYTE 0xC
;char* LCD_line2_parking_template = "CE:0000**";
_0x40005:
	.BYTE 0xA
;char* LCD_line2_period_template = "0000000";
_0x40007:
	.BYTE 0x8
;
;// ----------------------------------------------------
;// for mapping betwee period range [1 us, 10'000 us]
;// with PORTA that can differ in range [0, 255]
;long map(
; 0002 0016     long x,
; 0002 0017     long in_min,
; 0002 0018     long in_max,
; 0002 0019     long out_min,
; 0002 001A     long out_max)
; 0002 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 001C     return (x - in_min) *
;PCODE: $0000000F VOL: 0
;	x -> Y+16
;	in_min -> Y+12
;	in_max -> Y+8
;	out_min -> Y+4
;	out_max -> Y+0
; 0002 001D            (out_max - out_min) /
; 0002 001E            (in_max - in_min) +
; 0002 001F            out_min;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 0020 }
;PCODE: $00000023 VOL: 0
;
;// ----------------------------------------------------
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void){
; 0002 0024 interrupt [2] void ext_int0_isr(void){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0002 0025     subRoutine2();
;PCODE: $00000026 VOL: 0
; 0002 0026 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void){
; 0002 0029 interrupt [3] void ext_int1_isr(void){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 002A     if (which_one_is_clicked == stop &&
; 0002 002B             StopButton == isClicked){
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 002C         // STOP is double clicked
; 0002 002D         houre = reset;
;PCODE: $00000036 VOL: 0
; 0002 002E         minute = reset;
;PCODE: $00000037 VOL: 0
; 0002 002F         second = reset;
;PCODE: $00000038 VOL: 0
; 0002 0030         hundredth_of_a_second = reset;
;PCODE: $00000039 VOL: 0
; 0002 0031     }
; 0002 0032     which_one_is_clicked = (
;PCODE: $0000003A VOL: 0
; 0002 0033         StartButton == isClicked
; 0002 0034         ? start
; 0002 0035         : stop
; 0002 0036         );
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 0037 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void){
; 0002 003A interrupt [19] void ext_int2_isr(void){
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 003B     period = inputPeriodPin;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0002 003C     subRoutine3();
;PCODE: $0000004C VOL: 0
; 0002 003D }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
; 0002 0040 interrupt [10] void timer0_ovf_isr(void){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0002 0041     // Reinitialize Timer 0 value
; 0002 0042     TCNT0=0x83;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0002 0043 
; 0002 0044     // this timer generate 1ms but I need 10ms so:
; 0002 0045     if (timer0_error_handler != 10){
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0046         timer0_error_handler++;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 0047     }
; 0002 0048     else { // timer0_error_handler == 10 => 10ms delay generated !
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 0049         timer0_error_handler = 0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0002 004A 
; 0002 004B         if (which_one_is_clicked == start){
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 004C             subRoutine1();
;PCODE: $00000061 VOL: 0
; 0002 004D         }
; 0002 004E         sprintf(LCD_line1_template,
;PCODE: $00000062 VOL: 0
; 0002 004F                 "%2d:%2d:%2d:%2d",
; 0002 0050                 houre,minute,second,hundredth_of_a_second);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0002 0051         lcd_gotoxy(line1x, line2x);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0002 0052         lcd_puts(LCD_line1_template);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0002 0053     }
;PCODE: $0000007E VOL: 0
; 0002 0054 }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void){
; 0002 0057 interrupt [9] void timer1_ovf_isr(void){
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0002 0058     // Reinitialize Timer1 value
; 0002 0059     temp = map(period,0,255,1,10000) * microUnit * OCRconstant;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0002 005A     TCNT1H= temp >> 8;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 005B     TCNT1L= temp & 0xff;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0002 005C }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;// ----------------------------------------------------
;void subRoutine1(){
; 0002 005F void subRoutine1(){
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 0060     /* a Stopwatch with accuracy of 0.01 second */
; 0002 0061     if (hundredth_of_a_second == maxOfHundredthOfSecond){
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 0062         hundredth_of_a_second = reset;
;PCODE: $000000AA VOL: 0
; 0002 0063 
; 0002 0064         if (second == maxOfSecond){
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0002 0065             second = reset;
;PCODE: $000000AE VOL: 0
; 0002 0066 
; 0002 0067             if (minute == maxOfMinute){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0002 0068                 minute = reset;
;PCODE: $000000B2 VOL: 0
; 0002 0069 
; 0002 006A                 houre = (
; 0002 006B                     houre !=maxOfHoure
; 0002 006C                     ? houre + 1
; 0002 006D                     : reset
; 0002 006E                     ) ;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0002 006F             }
; 0002 0070             else{minute++;}
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 0071         }
; 0002 0072         else{second++;}
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0002 0073     }
; 0002 0074     else{hundredth_of_a_second++;}
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0002 0075 }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;
;void subRoutine2(){
; 0002 0077 void subRoutine2(){
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0002 0078     /* a system to show empty parking capacity */
; 0002 0079     if (Car_in_Button == isClicked &&
; 0002 007A             parking_empty_capacity > 0){
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 007B         parking_empty_capacity--;
;PCODE: $000000D9 VOL: 0
; 0002 007C     }
; 0002 007D     else if (Car_out_Button == isClicked &&
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0002 007E             parking_empty_capacity < maxParkingCapacuty){
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 007F         parking_empty_capacity++;
;PCODE: $000000E6 VOL: 0
; 0002 0080     }
; 0002 0081     if (parking_empty_capacity == full){
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0002 0082         sprintf(LCD_line2_parking_template,
; 0002 0083                 "CE:FULL**");
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0002 0084     }
; 0002 0085     else {
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0002 0086         sprintf(LCD_line2_parking_template,
; 0002 0087                 "CE:%4d**", parking_empty_capacity);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0002 0088     }
;PCODE: $00000102 VOL: 0
; 0002 0089     lcd_gotoxy(line2x, line2y);// go to next line
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0002 008A     lcd_puts(LCD_line2_parking_template);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0002 008B }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;
;void subRoutine3(){
; 0002 008D void subRoutine3(){
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0002 008E     /* generate square wave with period of <PINA> */
; 0002 008F     in_period = map(period,0,255,1,10000);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0002 0090     if (in_period % 1000 == 0){
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0002 0091         sprintf(LCD_line2_period_template, "%4dMS0", in_period/1000);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 0092     }
; 0002 0093     else {
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0002 0094         sprintf(LCD_line2_period_template, "%4dUS0", in_period);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0002 0095     }
;PCODE: $0000013B VOL: 0
; 0002 0096     lcd_gotoxy(line2x, line2y);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0002 0097     lcd_puts(LCD_line2_parking_template);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0002 0098     lcd_puts(LCD_line2_period_template);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0002 0099 }
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
