
AVRASM ver. 2.1.30  C:\cvavr\BIN\test4\Debug\List\test4.asm Wed Mar 24 05:03:10 2021

C:\cvavr\BIN\test4\Debug\List\test4.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\cvavr\BIN\test4\Debug\List\test4.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _houre=R5
                 	.DEF _minute=R4
                 	.DEF _second=R7
                 	.DEF _hundredth_of_a_second=R6
                 	.DEF _parking_empty_capacity=R9
                 	.DEF _period=R8
                 	.DEF _in_period=R10
                 	.DEF _in_period_msb=R11
                 	.DEF _temp=R12
                 	.DEF _temp_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 008b 	JMP  __RESET
000002 940c 0153 	JMP  _ext_int0_isr
000004 940c 0157 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 01a6 	JMP  _timer1_ovf_isr
000012 940c 0177 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0172 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0aff      	.DB  0xFF,0xA
                 
                 _0x20000:
000036 4543
000037 253a
000038 6434
000039 2a2a      	.DB  0x43,0x45,0x3A,0x25,0x34,0x64,0x2A,0x2A
00003a 2500
00003b 6432
00003c 253a
00003d 6432      	.DB  0x0,0x25,0x32,0x64,0x3A,0x25,0x32,0x64
00003e 253a
00003f 6432
000040 253a
000041 6432      	.DB  0x3A,0x25,0x32,0x64,0x3A,0x25,0x32,0x64
000042 2500
000043 6434
000044 534d
000045 0030      	.DB  0x0,0x25,0x34,0x64,0x4D,0x53,0x30,0x0
                 _0x40004:
000046 0160      	.DB  LOW(_0x40003),HIGH(_0x40003)
                 _0x40006:
000047 016c      	.DB  LOW(_0x40005),HIGH(_0x40005)
                 _0x40008:
000048 0176      	.DB  LOW(_0x40007),HIGH(_0x40007)
                 _0x40000:
000049 3030
00004a 303a
00004b 3a30
00004c 3030      	.DB  0x30,0x30,0x3A,0x30,0x30,0x3A,0x30,0x30
00004d 303a
00004e 0030
00004f 4543
000050 303a      	.DB  0x3A,0x30,0x30,0x0,0x43,0x45,0x3A,0x30
000051 3030
000052 2a30
000053 002a
000054 3030      	.DB  0x30,0x30,0x30,0x2A,0x2A,0x0,0x30,0x30
000055 3030
000056 3030
000057 0030
000058 3225      	.DB  0x30,0x30,0x30,0x30,0x30,0x0,0x25,0x32
000059 3a64
00005a 3225
00005b 3a64
00005c 3225      	.DB  0x64,0x3A,0x25,0x32,0x64,0x3A,0x25,0x32
00005d 3a64
00005e 3225
00005f 0064
000060 4543      	.DB  0x64,0x3A,0x25,0x32,0x64,0x0,0x43,0x45
000061 463a
000062 4c55
000063 2a4c
000064 002a      	.DB  0x3A,0x46,0x55,0x4C,0x4C,0x2A,0x2A,0x0
000065 4543
000066 253a
000067 6434
000068 2a2a      	.DB  0x43,0x45,0x3A,0x25,0x34,0x64,0x2A,0x2A
000069 2500
00006a 6434
00006b 534d
00006c 0030      	.DB  0x0,0x25,0x34,0x64,0x4D,0x53,0x30,0x0
00006d 3425
00006e 5564
00006f 3053
C:\cvavr\BIN\test4\Debug\List\test4.asm(1160): warning: .cseg .db misalignment - padding zero byte
000070 0000      	.DB  0x25,0x34,0x64,0x55,0x53,0x30,0x0
                 _0x2020003:
000071 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000072 0006      	.DW  0x06
000073 0004      	.DW  0x04
000074 0066      	.DW  __REG_VARS*2
                 
000075 000c      	.DW  0x0C
000076 0160      	.DW  _0x40003
000077 0092      	.DW  _0x40000*2
                 
000078 0002      	.DW  0x02
000079 017e      	.DW  _LCD_line1_template
00007a 008c      	.DW  _0x40004*2
                 
00007b 000a      	.DW  0x0A
00007c 016c      	.DW  _0x40005
00007d 009e      	.DW  _0x40000*2+12
                 
00007e 0002      	.DW  0x02
00007f 0180      	.DW  _LCD_line2_parking_template
000080 008e      	.DW  _0x40006*2
                 
000081 0008      	.DW  0x08
000082 0176      	.DW  _0x40007
000083 00a8      	.DW  _0x40000*2+22
                 
000084 0002      	.DW  0x02
000085 0182      	.DW  _LCD_line2_period_template
000086 0090      	.DW  _0x40008*2
                 
000087 0002      	.DW  0x02
000088 0186      	.DW  __base_y_G101
000089 00e2      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00008a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00008b 94f8      	CLI
00008c 27ee      	CLR  R30
00008d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008e e0f1      	LDI  R31,1
00008f bffb      	OUT  GICR,R31
000090 bfeb      	OUT  GICR,R30
000091 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000092 e08d      	LDI  R24,(14-2)+1
000093 e0a2      	LDI  R26,2
000094 27bb      	CLR  R27
                 __CLEAR_REG:
000095 93ed      	ST   X+,R30
000096 958a      	DEC  R24
000097 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000098 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000099 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00009b 93ed      	ST   X+,R30
00009c 9701      	SBIW R24,1
00009d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00009e eee4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00009f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a0 9185      	LPM  R24,Z+
0000a1 9195      	LPM  R25,Z+
0000a2 9700      	SBIW R24,0
0000a3 f061      	BREQ __GLOBAL_INI_END
0000a4 91a5      	LPM  R26,Z+
0000a5 91b5      	LPM  R27,Z+
0000a6 9005      	LPM  R0,Z+
0000a7 9015      	LPM  R1,Z+
0000a8 01bf      	MOVW R22,R30
0000a9 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000aa 9005      	LPM  R0,Z+
0000ab 920d      	ST   X+,R0
0000ac 9701      	SBIW R24,1
0000ad f7e1      	BRNE __GLOBAL_INI_LOOP
0000ae 01fb      	MOVW R30,R22
0000af cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b0 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b1 bfed      	OUT  SPL,R30
0000b2 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b4 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b5 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b6 940c 00b8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : test 4, Introduction to LCD, interrupts and timers
                 ;Version : 1.0
                 ;Date    : 22/3/2021
                 ;Author  : Maryam Saeedmehr
                 ;Std. NO : 9629373
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;#include "test4_lib.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void main(void){
                 ; 0000 0018 void main(void){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0019       // Global enable interrupts
                 ; 0000 001A       #asm("sei")
0000b8 9478      	sei
                 ; 0000 001B 
                 ; 0000 001C       board_init();
0000b9 d058      	RCALL _board_init
                 ; 0000 001D }
                 _0x3:
0000ba cfff      	RJMP _0x3
                 ; .FEND
                 ;#include "test4_lib.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void io_init(){
                 ; 0001 0003 void io_init(){
                 
                 	.CSEG
                 _io_init:
                 ; .FSTART _io_init
                 ; 0001 0004     // Input/Output Ports initialization
                 ; 0001 0005     // Port A initialization
                 ; 0001 0006     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0007     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000bb e0e0      	LDI  R30,LOW(0)
0000bc bbea      	OUT  0x1A,R30
                 ; 0001 0008     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0009     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000bd bbeb      	OUT  0x1B,R30
                 ; 0001 000A 
                 ; 0001 000B     // Port B initialization
                 ; 0001 000C     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 000D     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000be bbe7      	OUT  0x17,R30
                 ; 0001 000E     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 000F     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000bf bbe8      	OUT  0x18,R30
                 ; 0001 0010 
                 ; 0001 0011     // Port C initialization
                 ; 0001 0012     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0001 0013     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000c0 efef      	LDI  R30,LOW(255)
0000c1 bbe4      	OUT  0x14,R30
                 ; 0001 0014     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 0015     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 bbe5      	OUT  0x15,R30
                 ; 0001 0016 
                 ; 0001 0017     // Port D initialization
                 ; 0001 0018     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0019     DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000c4 efe0      	LDI  R30,LOW(240)
0000c5 bbe1      	OUT  0x11,R30
                 ; 0001 001A     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 001B     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe2      	OUT  0x12,R30
                 ; 0001 001C }
0000c8 9508      	RET
                 ; .FEND
                 ;
                 ;void timer_init(){
                 ; 0001 001E void timer_init(){
                 _timer_init:
                 ; .FSTART _timer_init
                 ; 0001 001F     // Timer/Counter 0 initialization
                 ; 0001 0020     // Clock source: System Clock
                 ; 0001 0021     // Clock value: 125.000 kHz
                 ; 0001 0022     // Mode: Normal top=0xFF
                 ; 0001 0023     // OC0 output: Disconnected
                 ; 0001 0024     // Timer Period: 1 ms
                 ; 0001 0025     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000c9 e0e3      	LDI  R30,LOW(3)
0000ca bfe3      	OUT  0x33,R30
                 ; 0001 0026     TCNT0=0x83;
0000cb e8e3      	LDI  R30,LOW(131)
0000cc bfe2      	OUT  0x32,R30
                 ; 0001 0027     OCR0=0x00;
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfec      	OUT  0x3C,R30
                 ; 0001 0028 
                 ; 0001 0029     // Timer/Counter 1 initialization
                 ; 0001 002A     // Clock source: System Clock
                 ; 0001 002B     // Clock value: 8000.000 kHz
                 ; 0001 002C     // Mode: Normal top=0xFFFF
                 ; 0001 002D     // OC1A output: Toggle on compare match
                 ; 0001 002E     // OC1B output: Toggle on compare match
                 ; 0001 002F     // Noise Canceler: Off
                 ; 0001 0030     // Input Capture on Falling Edge
                 ; 0001 0031     // Timer Period: 5 ms
                 ; 0001 0032     // Output Pulse(s):
                 ; 0001 0033     // OC1A Period: 10 ms Width: 5 ms
                 ; 0001 0034     // OC1B Period: 10 ms Width: 5 ms
                 ; 0001 0035     // Timer1 Overflow Interrupt: On
                 ; 0001 0036     // Input Capture Interrupt: Off
                 ; 0001 0037     // Compare A Match Interrupt: Off
                 ; 0001 0038     // Compare B Match Interrupt: Off
                 ; 0001 0039     TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000cf e5e0      	LDI  R30,LOW(80)
0000d0 bdef      	OUT  0x2F,R30
                 ; 0001 003A     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
0000d1 e0e1      	LDI  R30,LOW(1)
0000d2 bdee      	OUT  0x2E,R30
                 ; 0001 003B     TCNT1H=0x63;
0000d3 e6e3      	LDI  R30,LOW(99)
0000d4 bded      	OUT  0x2D,R30
                 ; 0001 003C     TCNT1L=0xC0;
0000d5 ece0      	LDI  R30,LOW(192)
0000d6 bdec      	OUT  0x2C,R30
                 ; 0001 003D     ICR1H=0x00;
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bde7      	OUT  0x27,R30
                 ; 0001 003E     ICR1L=0x00;
0000d9 bde6      	OUT  0x26,R30
                 ; 0001 003F     OCR1AH=0x00;
0000da bdeb      	OUT  0x2B,R30
                 ; 0001 0040     OCR1AL=0x00;
0000db bdea      	OUT  0x2A,R30
                 ; 0001 0041     OCR1BH=0x00;
0000dc bde9      	OUT  0x29,R30
                 ; 0001 0042     OCR1BL=0x00;
0000dd bde8      	OUT  0x28,R30
                 ; 0001 0043 
                 ; 0001 0044     // Timer/Counter 2 initialization
                 ; 0001 0045     // Clock source: System Clock
                 ; 0001 0046     // Clock value: Timer2 Stopped
                 ; 0001 0047     // Mode: Normal top=0xFF
                 ; 0001 0048     // OC2 output: Disconnected
                 ; 0001 0049     ASSR=0<<AS2;
0000de bde2      	OUT  0x22,R30
                 ; 0001 004A     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000df bde5      	OUT  0x25,R30
                 ; 0001 004B     TCNT2=0x00;
0000e0 bde4      	OUT  0x24,R30
                 ; 0001 004C     OCR2=0x00;
0000e1 bde3      	OUT  0x23,R30
                 ; 0001 004D 
                 ; 0001 004E     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 004F     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000e2 e0e5      	LDI  R30,LOW(5)
0000e3 bfe9      	OUT  0x39,R30
                 ; 0001 0050 }
0000e4 9508      	RET
                 ; .FEND
                 ;
                 ;void interrupt_init(){
                 ; 0001 0052 void interrupt_init(){
                 _interrupt_init:
                 ; .FSTART _interrupt_init
                 ; 0001 0053     // External Interrupt(s) initialization
                 ; 0001 0054     // INT0: On
                 ; 0001 0055     // INT0 Mode: Falling Edge
                 ; 0001 0056     // INT1: On
                 ; 0001 0057     // INT1 Mode: Falling Edge
                 ; 0001 0058     // INT2: On
                 ; 0001 0059     // INT2 Mode: Falling Edge
                 ; 0001 005A     GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
0000e5 b7eb      	IN   R30,0x3B
0000e6 6ee0      	ORI  R30,LOW(0xE0)
0000e7 bfeb      	OUT  0x3B,R30
                 ; 0001 005B     MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0000e8 e0ea      	LDI  R30,LOW(10)
0000e9 bfe5      	OUT  0x35,R30
                 ; 0001 005C     MCUCSR=(0<<ISC2);
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bfe4      	OUT  0x34,R30
                 ; 0001 005D     GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
0000ec eee0      	LDI  R30,LOW(224)
0000ed bfea      	OUT  0x3A,R30
                 ; 0001 005E }
0000ee 9508      	RET
                 ; .FEND
                 ;
                 ;void lcd_puts_init(){
                 ; 0001 0060 void lcd_puts_init(){
                 _lcd_puts_init:
                 ; .FSTART _lcd_puts_init
                 ; 0001 0061     sprintf(LCD_line2_parking_template,
                 ; 0001 0062             "CE:%4d**", maxParkingCapacuty);
0000ef 940e 04b9 	CALL SUBOPT_0x0
                +
0000f1 e6ec     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
0000f2 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
0000f3 940e 04c0 	CALL SUBOPT_0x1
                 ; 0001 0063     sprintf(LCD_line1_template,
                 ; 0001 0064             "%2d:%2d:%2d:%2d", 0,0,0,0);
0000f5 940e 04cd 	CALL SUBOPT_0x2
                +
0000f7 e7e5     +LDI R30 , LOW ( 2 * _0x20000 + ( 9 ) )
0000f8 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 9 ) )
                 	__POINTW1FN _0x20000,9
0000f9 93fa      	ST   -Y,R31
0000fa 93ea      	ST   -Y,R30
0000fb 940e 04d4 	CALL SUBOPT_0x3
0000fd 940e 04d4 	CALL SUBOPT_0x3
0000ff 940e 04d4 	CALL SUBOPT_0x3
000101 940e 04d4 	CALL SUBOPT_0x3
000103 e180      	LDI  R24,16
000104 940e 03cd 	CALL _sprintf
000106 9664      	ADIW R28,20
                 ; 0001 0065     sprintf(LCD_line2_period_template, "%4dMS0", 10);
000107 940e 04db 	CALL SUBOPT_0x4
                +
000109 e8e5     +LDI R30 , LOW ( 2 * _0x20000 + ( 25 ) )
00010a e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 25 ) )
                 	__POINTW1FN _0x20000,25
00010b 940e 04c0 	CALL SUBOPT_0x1
                 ; 0001 0066     lcd_clear();
00010d 940e 0432 	CALL _lcd_clear
                 ; 0001 0067     lcd_gotoxy(line1x, line1y);
00010f 940e 04e2 	CALL SUBOPT_0x5
                 ; 0001 0068     lcd_puts(LCD_line1_template);
                 ; 0001 0069     lcd_gotoxy(line2x, line2y);
000111 c13b      	RJMP _0x2080005
                 ; 0001 006A     lcd_puts(LCD_line2_parking_template);
                 ; 0001 006B     lcd_puts(LCD_line2_period_template);
                 ; 0001 006C }
                 ; .FEND
                 ;
                 ;void board_init(){
                 ; 0001 006E void board_init(){
                 _board_init:
                 ; .FSTART _board_init
                 ; 0001 006F     io_init();
000112 dfa8      	RCALL _io_init
                 ; 0001 0070     timer_init();
000113 dfb5      	RCALL _timer_init
                 ; 0001 0071     interrupt_init();
000114 dfd0      	RCALL _interrupt_init
                 ; 0001 0072 
                 ; 0001 0073     // Alphanumeric LCD initialization
                 ; 0001 0074     // Connections are specified in the
                 ; 0001 0075     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 0076     // RS - PORTC Bit 0
                 ; 0001 0077     // RD - PORTC Bit 1
                 ; 0001 0078     // EN - PORTC Bit 2
                 ; 0001 0079     // D4 - PORTC Bit 4
                 ; 0001 007A     // D5 - PORTC Bit 5
                 ; 0001 007B     // D6 - PORTC Bit 6
                 ; 0001 007C     // D7 - PORTC Bit 7
                 ; 0001 007D     // Characters/line: 16
                 ; 0001 007E     lcd_init(16);
000115 e1a0      	LDI  R26,LOW(16)
000116 940e 0471 	CALL _lcd_init
                 ; 0001 007F     lcd_puts_init();
000118 dfd6      	RCALL _lcd_puts_init
                 ; 0001 0080 }
000119 9508      	RET
                 ; .FEND
                 ;#include "test4_lib.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;// ----------------------------------------------------
                 ;uint8_t houre = 0;
                 ;uint8_t minute = 0;
                 ;uint8_t second = 0;
                 ;uint8_t hundredth_of_a_second = 0;
                 ;uint8_t parking_empty_capacity = maxParkingCapacuty;
                 ;uint8_t period = 255;
                 ;uint16_t in_period;
                 ;uint16_t temp;
                 ;char which_one_is_clicked = stop;
                 ;char timer0_error_handler = 0;
                 ;char* LCD_line1_template = "00:00:00:00";
                 
                 	.DSEG
                 _0x40003:
000160           	.BYTE 0xC
                 ;char* LCD_line2_parking_template = "CE:0000**";
                 _0x40005:
00016c           	.BYTE 0xA
                 ;char* LCD_line2_period_template = "0000000";
                 _0x40007:
000176           	.BYTE 0x8
                 ;
                 ;// ----------------------------------------------------
                 ;// for mapping betwee period range [1 us, 10'000 us]
                 ;// with PORTA that can differ in range [0, 255]
                 ;long map(
                 ; 0002 0016     long x,
                 ; 0002 0017     long in_min,
                 ; 0002 0018     long in_max,
                 ; 0002 0019     long out_min,
                 ; 0002 001A     long out_max)
                 ; 0002 001B {
                 
                 	.CSEG
                 _map:
                 ; .FSTART _map
                 ; 0002 001C     return (x - in_min) *
00011a 940e 0737 	CALL __PUTPARD2
                 ;	x -> Y+16
                 ;	in_min -> Y+12
                 ;	in_max -> Y+8
                 ;	out_min -> Y+4
                 ;	out_max -> Y+0
                 ; 0002 001D            (out_max - out_min) /
                 ; 0002 001E            (in_max - in_min) +
                 ; 0002 001F            out_min;
                +
00011c 85ac     +LDD R26 , Y + 12
00011d 85bd     +LDD R27 , Y + 12 + 1
00011e 858e     +LDD R24 , Y + 12 + 2
00011f 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
                +
000120 89e8     +LDD R30 , Y + 16
000121 89f9     +LDD R31 , Y + 16 + 1
000122 896a     +LDD R22 , Y + 16 + 2
000123 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
000124 940e 0697 	CALL __SUBD12
000126 937f      	PUSH R23
000127 936f      	PUSH R22
000128 93ff      	PUSH R31
000129 93ef      	PUSH R30
                +
00012a 81ac     +LDD R26 , Y + 4
00012b 81bd     +LDD R27 , Y + 4 + 1
00012c 818e     +LDD R24 , Y + 4 + 2
00012d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00012e 940e 072d 	CALL __GETD1S0
000130 940e 0697 	CALL __SUBD12
000132 91af      	POP  R26
000133 91bf      	POP  R27
000134 918f      	POP  R24
000135 919f      	POP  R25
000136 940e 06cd 	CALL __MULD12
000138 937f      	PUSH R23
000139 936f      	PUSH R22
00013a 93ff      	PUSH R31
00013b 93ef      	PUSH R30
                +
00013c 85ac     +LDD R26 , Y + 12
00013d 85bd     +LDD R27 , Y + 12 + 1
00013e 858e     +LDD R24 , Y + 12 + 2
00013f 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
                +
000140 85e8     +LDD R30 , Y + 8
000141 85f9     +LDD R31 , Y + 8 + 1
000142 856a     +LDD R22 , Y + 8 + 2
000143 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000144 940e 0697 	CALL __SUBD12
000146 91af      	POP  R26
000147 91bf      	POP  R27
000148 918f      	POP  R24
000149 919f      	POP  R25
00014a 940e 070a 	CALL __DIVD21
                +
00014c 81ac     +LDD R26 , Y + 4
00014d 81bd     +LDD R27 , Y + 4 + 1
00014e 818e     +LDD R24 , Y + 4 + 2
00014f 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000150 940e 0692 	CALL __ADDD12
000152 c278      	RJMP _0x2080003
                 ; 0002 0020 }
                 ; .FEND
                 ;
                 ;// ----------------------------------------------------
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void){
                 ; 0002 0024 interrupt [2] void ext_int0_isr(void){
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000153 940e 04ed 	CALL SUBOPT_0x6
                 ; 0002 0025     subRoutine2();
000155 d0a3      	RCALL _subRoutine2
                 ; 0002 0026 }
000156 c079      	RJMP _0x40027
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void){
                 ; 0002 0029 interrupt [3] void ext_int1_isr(void){
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000157 93aa      	ST   -Y,R26
000158 93ea      	ST   -Y,R30
000159 b7ef      	IN   R30,SREG
00015a 93ea      	ST   -Y,R30
                 ; 0002 002A     if (which_one_is_clicked == stop &&
                 ; 0002 002B             StopButton == isClicked){
00015b 91a0 0184 	LDS  R26,_which_one_is_clicked
00015d 30a0      	CPI  R26,LOW(0x0)
00015e f411      	BRNE _0x4000A
00015f 9bb5      	SBIS 0x16,5
000160 c001      	RJMP _0x4000B
                 _0x4000A:
000161 c004      	RJMP _0x40009
                 _0x4000B:
                 ; 0002 002C         // STOP is double clicked
                 ; 0002 002D         houre = reset;
000162 2455      	CLR  R5
                 ; 0002 002E         minute = reset;
000163 2444      	CLR  R4
                 ; 0002 002F         second = reset;
000164 2477      	CLR  R7
                 ; 0002 0030         hundredth_of_a_second = reset;
000165 2466      	CLR  R6
                 ; 0002 0031     }
                 ; 0002 0032     which_one_is_clicked = (
                 _0x40009:
                 ; 0002 0033         StartButton == isClicked
                 ; 0002 0034         ? start
                 ; 0002 0035         : stop
                 ; 0002 0036         );
000166 99b4      	SBIC 0x16,4
000167 c002      	RJMP _0x4000C
000168 e0e1      	LDI  R30,LOW(1)
000169 c001      	RJMP _0x4000D
                 _0x4000C:
00016a e0e0      	LDI  R30,LOW(0)
                 _0x4000D:
00016b 93e0 0184 	STS  _which_one_is_clicked,R30
                 ; 0002 0037 }
00016d 91e9      	LD   R30,Y+
00016e bfef      	OUT  SREG,R30
00016f 91e9      	LD   R30,Y+
000170 91a9      	LD   R26,Y+
000171 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void){
                 ; 0002 003A interrupt [19] void ext_int2_isr(void){
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000172 940e 04ed 	CALL SUBOPT_0x6
                 ; 0002 003B     period = inputPeriodPin;
000174 b289      	IN   R8,25
                 ; 0002 003C     subRoutine3();
000175 d0b0      	RCALL _subRoutine3
                 ; 0002 003D }
000176 c059      	RJMP _0x40027
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0002 0040 interrupt [10] void timer0_ovf_isr(void){
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000177 940e 04ed 	CALL SUBOPT_0x6
                 ; 0002 0041     // Reinitialize Timer 0 value
                 ; 0002 0042     TCNT0=0x83;
000179 e8e3      	LDI  R30,LOW(131)
00017a bfe2      	OUT  0x32,R30
                 ; 0002 0043 
                 ; 0002 0044     // this timer generate 1ms but I need 10ms so:
                 ; 0002 0045     if (timer0_error_handler != 10){
00017b 91a0 0185 	LDS  R26,_timer0_error_handler
00017d 30aa      	CPI  R26,LOW(0xA)
00017e f031      	BREQ _0x4000F
                 ; 0002 0046         timer0_error_handler++;
00017f 91e0 0185 	LDS  R30,_timer0_error_handler
000181 5fef      	SUBI R30,-LOW(1)
000182 93e0 0185 	STS  _timer0_error_handler,R30
                 ; 0002 0047     }
                 ; 0002 0048     else { // timer0_error_handler == 10 => 10ms delay generated !
000184 c020      	RJMP _0x40010
                 _0x4000F:
                 ; 0002 0049         timer0_error_handler = 0;
000185 e0e0      	LDI  R30,LOW(0)
000186 93e0 0185 	STS  _timer0_error_handler,R30
                 ; 0002 004A 
                 ; 0002 004B         if (which_one_is_clicked == start){
000188 91a0 0184 	LDS  R26,_which_one_is_clicked
00018a 30a1      	CPI  R26,LOW(0x1)
00018b f409      	BRNE _0x40011
                 ; 0002 004C             subRoutine1();
00018c d051      	RCALL _subRoutine1
                 ; 0002 004D         }
                 ; 0002 004E         sprintf(LCD_line1_template,
                 _0x40011:
                 ; 0002 004F                 "%2d:%2d:%2d:%2d",
                 ; 0002 0050                 houre,minute,second,hundredth_of_a_second);
00018d 940e 04cd 	CALL SUBOPT_0x2
                +
00018f ebe0     +LDI R30 , LOW ( 2 * _0x40000 + ( 30 ) )
000190 e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 30 ) )
                 	__POINTW1FN _0x40000,30
000191 93fa      	ST   -Y,R31
000192 93ea      	ST   -Y,R30
000193 2de5      	MOV  R30,R5
000194 940e 04fb 	CALL SUBOPT_0x7
000196 2de4      	MOV  R30,R4
000197 940e 04fb 	CALL SUBOPT_0x7
000199 2de7      	MOV  R30,R7
00019a 940e 04fb 	CALL SUBOPT_0x7
00019c 2de6      	MOV  R30,R6
00019d 940e 04fb 	CALL SUBOPT_0x7
00019f e180      	LDI  R24,16
0001a0 940e 03cd 	CALL _sprintf
0001a2 9664      	ADIW R28,20
                 ; 0002 0051         lcd_gotoxy(line1x, line2x);
0001a3 940e 04e2 	CALL SUBOPT_0x5
                 ; 0002 0052         lcd_puts(LCD_line1_template);
                 ; 0002 0053     }
                 _0x40010:
                 ; 0002 0054 }
0001a5 c02a      	RJMP _0x40027
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void){
                 ; 0002 0057 interrupt [9] void timer1_ovf_isr(void){
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0001a6 940e 04ed 	CALL SUBOPT_0x6
                 ; 0002 0058     // Reinitialize Timer1 value
                 ; 0002 0059     temp = map(period,0,255,1,10000) * microUnit * OCRconstant;
0001a8 940e 0501 	CALL SUBOPT_0x8
0001aa 940e 0508 	CALL SUBOPT_0x9
0001ac 940e 05cd 	CALL __CDF1
                +
0001ae ebad     +LDI R26 , LOW ( 0x358637BD )
0001af e3b7     +LDI R27 , HIGH ( 0x358637BD )
0001b0 e886     +LDI R24 , BYTE3 ( 0x358637BD )
0001b1 e395     +LDI R25 , BYTE4 ( 0x358637BD )
                 	__GETD2N 0x358637BD
0001b2 940e 05fb 	CALL __MULF12
                +
0001b4 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0001b5 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0001b6 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0001b7 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0001b8 940e 05fb 	CALL __MULF12
0001ba 01df      	MOVW R26,R30
0001bb 01cb      	MOVW R24,R22
                +
0001bc e0e0     +LDI R30 , LOW ( 0x40000000 )
0001bd e0f0     +LDI R31 , HIGH ( 0x40000000 )
0001be e060     +LDI R22 , BYTE3 ( 0x40000000 )
0001bf e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
0001c0 940e 0649 	CALL __DIVF21
                +
0001c2 e0a0     +LDI R26 , LOW ( 0x4AF42400 )
0001c3 e2b4     +LDI R27 , HIGH ( 0x4AF42400 )
0001c4 ef84     +LDI R24 , BYTE3 ( 0x4AF42400 )
0001c5 e49a     +LDI R25 , BYTE4 ( 0x4AF42400 )
                 	__GETD2N 0x4AF42400
0001c6 940e 05fb 	CALL __MULF12
0001c8 940e 0594 	CALL __CFD1U
0001ca 016f      	MOVW R12,R30
                 ; 0002 005A     TCNT1H= temp >> 8;
0001cb 2ded      	MOV  R30,R13
0001cc 70f0      	ANDI R31,HIGH(0x0)
0001cd bded      	OUT  0x2D,R30
                 ; 0002 005B     TCNT1L= temp & 0xff;
0001ce 2dec      	MOV  R30,R12
0001cf bdec      	OUT  0x2C,R30
                 ; 0002 005C }
                 _0x40027:
0001d0 91e9      	LD   R30,Y+
0001d1 bfef      	OUT  SREG,R30
0001d2 91f9      	LD   R31,Y+
0001d3 91e9      	LD   R30,Y+
0001d4 91b9      	LD   R27,Y+
0001d5 91a9      	LD   R26,Y+
0001d6 9199      	LD   R25,Y+
0001d7 9189      	LD   R24,Y+
0001d8 9179      	LD   R23,Y+
0001d9 9169      	LD   R22,Y+
0001da 90f9      	LD   R15,Y+
0001db 9019      	LD   R1,Y+
0001dc 9009      	LD   R0,Y+
0001dd 9518      	RETI
                 ; .FEND
                 ;
                 ;// ----------------------------------------------------
                 ;void subRoutine1(){
                 ; 0002 005F void subRoutine1(){
                 _subRoutine1:
                 ; .FSTART _subRoutine1
                 ; 0002 0060     /* a Stopwatch with accuracy of 0.01 second */
                 ; 0002 0061     if (hundredth_of_a_second == maxOfHundredthOfSecond){
0001de e6e3      	LDI  R30,LOW(99)
0001df 15e6      	CP   R30,R6
0001e0 f4b1      	BRNE _0x40012
                 ; 0002 0062         hundredth_of_a_second = reset;
0001e1 2466      	CLR  R6
                 ; 0002 0063 
                 ; 0002 0064         if (second == maxOfSecond){
0001e2 e3eb      	LDI  R30,LOW(59)
0001e3 15e7      	CP   R30,R7
0001e4 f481      	BRNE _0x40013
                 ; 0002 0065             second = reset;
0001e5 2477      	CLR  R7
                 ; 0002 0066 
                 ; 0002 0067             if (minute == maxOfMinute){
0001e6 15e4      	CP   R30,R4
0001e7 f459      	BRNE _0x40014
                 ; 0002 0068                 minute = reset;
0001e8 2444      	CLR  R4
                 ; 0002 0069 
                 ; 0002 006A                 houre = (
                 ; 0002 006B                     houre !=maxOfHoure
                 ; 0002 006C                     ? houre + 1
                 ; 0002 006D                     : reset
                 ; 0002 006E                     ) ;
0001e9 e6e3      	LDI  R30,LOW(99)
0001ea 15e5      	CP   R30,R5
0001eb f021      	BREQ _0x40015
0001ec 2de5      	MOV  R30,R5
0001ed e0f0      	LDI  R31,0
0001ee 9631      	ADIW R30,1
0001ef c001      	RJMP _0x40016
                 _0x40015:
0001f0 e0e0      	LDI  R30,LOW(0)
                 _0x40016:
0001f1 2e5e      	MOV  R5,R30
                 ; 0002 006F             }
                 ; 0002 0070             else{minute++;}
0001f2 c001      	RJMP _0x40018
                 _0x40014:
0001f3 9443      	INC  R4
                 _0x40018:
                 ; 0002 0071         }
                 ; 0002 0072         else{second++;}
0001f4 c001      	RJMP _0x40019
                 _0x40013:
0001f5 9473      	INC  R7
                 _0x40019:
                 ; 0002 0073     }
                 ; 0002 0074     else{hundredth_of_a_second++;}
0001f6 c001      	RJMP _0x4001A
                 _0x40012:
0001f7 9463      	INC  R6
                 _0x4001A:
                 ; 0002 0075 }
0001f8 9508      	RET
                 ; .FEND
                 ;
                 ;void subRoutine2(){
                 ; 0002 0077 void subRoutine2(){
                 _subRoutine2:
                 ; .FSTART _subRoutine2
                 ; 0002 0078     /* a system to show empty parking capacity */
                 ; 0002 0079     if (Car_in_Button == isClicked &&
                 ; 0002 007A             parking_empty_capacity > 0){
0001f9 99b7      	SBIC 0x16,7
0001fa c003      	RJMP _0x4001C
0001fb e0e0      	LDI  R30,LOW(0)
0001fc 15e9      	CP   R30,R9
0001fd f008      	BRLO _0x4001D
                 _0x4001C:
0001fe c002      	RJMP _0x4001B
                 _0x4001D:
                 ; 0002 007B         parking_empty_capacity--;
0001ff 949a      	DEC  R9
                 ; 0002 007C     }
                 ; 0002 007D     else if (Car_out_Button == isClicked &&
000200 c007      	RJMP _0x4001E
                 _0x4001B:
                 ; 0002 007E             parking_empty_capacity < maxParkingCapacuty){
000201 99b3      	SBIC 0x16,3
000202 c003      	RJMP _0x40020
000203 e0ea      	LDI  R30,LOW(10)
000204 169e      	CP   R9,R30
000205 f008      	BRLO _0x40021
                 _0x40020:
000206 c001      	RJMP _0x4001F
                 _0x40021:
                 ; 0002 007F         parking_empty_capacity++;
000207 9493      	INC  R9
                 ; 0002 0080     }
                 ; 0002 0081     if (parking_empty_capacity == full){
                 _0x4001F:
                 _0x4001E:
000208 2099      	TST  R9
000209 f459      	BRNE _0x40022
                 ; 0002 0082         sprintf(LCD_line2_parking_template,
                 ; 0002 0083                 "CE:FULL**");
00020a 940e 04b9 	CALL SUBOPT_0x0
                +
00020c ece0     +LDI R30 , LOW ( 2 * _0x40000 + ( 46 ) )
00020d e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 46 ) )
                 	__POINTW1FN _0x40000,46
00020e 93fa      	ST   -Y,R31
00020f 93ea      	ST   -Y,R30
000210 e080      	LDI  R24,0
000211 940e 03cd 	CALL _sprintf
000213 9624      	ADIW R28,4
                 ; 0002 0084     }
                 ; 0002 0085     else {
000214 c00d      	RJMP _0x40023
                 _0x40022:
                 ; 0002 0086         sprintf(LCD_line2_parking_template,
                 ; 0002 0087                 "CE:%4d**", parking_empty_capacity);
000215 940e 04b9 	CALL SUBOPT_0x0
                +
000217 ecea     +LDI R30 , LOW ( 2 * _0x40000 + ( 56 ) )
000218 e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 56 ) )
                 	__POINTW1FN _0x40000,56
000219 93fa      	ST   -Y,R31
00021a 93ea      	ST   -Y,R30
00021b 2de9      	MOV  R30,R9
00021c 940e 04fb 	CALL SUBOPT_0x7
00021e e084      	LDI  R24,4
00021f 940e 03cd 	CALL _sprintf
000221 9628      	ADIW R28,8
                 ; 0002 0088     }
                 _0x40023:
                 ; 0002 0089     lcd_gotoxy(line2x, line2y);// go to next line
000222 e0e0      	LDI  R30,LOW(0)
000223 940e 051a 	CALL SUBOPT_0xA
                 ; 0002 008A     lcd_puts(LCD_line2_parking_template);
000225 c030      	RJMP _0x2080004
                 ; 0002 008B }
                 ; .FEND
                 ;
                 ;void subRoutine3(){
                 ; 0002 008D void subRoutine3(){
                 _subRoutine3:
                 ; .FSTART _subRoutine3
                 ; 0002 008E     /* generate square wave with period of <PINA> */
                 ; 0002 008F     in_period = map(period,0,255,1,10000);
000226 940e 0501 	CALL SUBOPT_0x8
000228 940e 0508 	CALL SUBOPT_0x9
00022a 015f      	MOVW R10,R30
                 ; 0002 0090     if (in_period % 1000 == 0){
00022b 01d5      	MOVW R26,R10
00022c eee8      	LDI  R30,LOW(1000)
00022d e0f3      	LDI  R31,HIGH(1000)
00022e 940e 070f 	CALL __MODW21U
000230 9730      	SBIW R30,0
000231 f461      	BRNE _0x40024
                 ; 0002 0091         sprintf(LCD_line2_period_template, "%4dMS0", in_period/1000);
000232 940e 04db 	CALL SUBOPT_0x4
                +
000234 ede3     +LDI R30 , LOW ( 2 * _0x40000 + ( 65 ) )
000235 e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 65 ) )
                 	__POINTW1FN _0x40000,65
000236 93fa      	ST   -Y,R31
000237 93ea      	ST   -Y,R30
000238 01d5      	MOVW R26,R10
000239 eee8      	LDI  R30,LOW(1000)
00023a e0f3      	LDI  R31,HIGH(1000)
00023b 940e 06d2 	CALL __DIVW21U
00023d c007      	RJMP _0x40026
                 ; 0002 0092     }
                 ; 0002 0093     else {
                 _0x40024:
                 ; 0002 0094         sprintf(LCD_line2_period_template, "%4dUS0", in_period);
00023e 940e 04db 	CALL SUBOPT_0x4
                +
000240 edea     +LDI R30 , LOW ( 2 * _0x40000 + ( 72 ) )
000241 e0f0     +LDI R31 , HIGH ( 2 * _0x40000 + ( 72 ) )
                 	__POINTW1FN _0x40000,72
000242 93fa      	ST   -Y,R31
000243 93ea      	ST   -Y,R30
000244 01f5      	MOVW R30,R10
                 _0x40026:
000245 2766      	CLR  R22
000246 2777      	CLR  R23
000247 940e 0732 	CALL __PUTPARD1
000249 e084      	LDI  R24,4
00024a 940e 03cd 	CALL _sprintf
00024c 9628      	ADIW R28,8
                 ; 0002 0095     }
                 ; 0002 0096     lcd_gotoxy(line2x, line2y);
                 _0x2080005:
00024d e0e0      	LDI  R30,LOW(0)
00024e 940e 051a 	CALL SUBOPT_0xA
                 ; 0002 0097     lcd_puts(LCD_line2_parking_template);
000250 940e 0460 	CALL _lcd_puts
                 ; 0002 0098     lcd_puts(LCD_line2_period_template);
000252 91a0 0182 	LDS  R26,_LCD_line2_period_template
000254 91b0 0183 	LDS  R27,_LCD_line2_period_template+1
                 _0x2080004:
000256 940e 0460 	CALL _lcd_puts
                 ; 0002 0099 }
000258 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000259 93ba      	ST   -Y,R27
00025a 93aa      	ST   -Y,R26
00025b 931a      	ST   -Y,R17
00025c 930a      	ST   -Y,R16
00025d 81aa      	LDD  R26,Y+2
00025e 81bb      	LDD  R27,Y+2+1
00025f 9612      	ADIW R26,2
000260 940e 0725 	CALL __GETW1P
000262 9730      	SBIW R30,0
000263 f159      	BREQ _0x2000010
000264 81aa      	LDD  R26,Y+2
000265 81bb      	LDD  R27,Y+2+1
000266 9614      	ADIW R26,4
000267 940e 0725 	CALL __GETW1P
000269 018f      	MOVW R16,R30
00026a 9730      	SBIW R30,0
00026b f061      	BREQ _0x2000012
                +
00026c 3002     +CPI R16 , LOW ( 2 )
00026d e0e0     +LDI R30 , HIGH ( 2 )
00026e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00026f f098      	BRLO _0x2000013
000270 01f8      	MOVW R30,R16
000271 9731      	SBIW R30,1
000272 018f      	MOVW R16,R30
                +
000273 81aa     +LDD R26 , Y + 2
000274 81bb     +LDD R27 , Y + 2 + 1
000275 9614     +ADIW R26 , 4
000276 93ed     +ST X + , R30
000277 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000278 81aa      	LDD  R26,Y+2
000279 81bb      	LDD  R27,Y+2+1
00027a 9612      	ADIW R26,2
00027b 91ed      	LD   R30,X+
00027c 91fd      	LD   R31,X+
00027d 9631      	ADIW R30,1
00027e 93fe      	ST   -X,R31
00027f 93ee      	ST   -X,R30
000280 9731      	SBIW R30,1
000281 81ac      	LDD  R26,Y+4
000282 83a0      	STD  Z+0,R26
                 _0x2000013:
000283 81aa      	LDD  R26,Y+2
000284 81bb      	LDD  R27,Y+2+1
000285 940e 0725 	CALL __GETW1P
000287 23ff      	TST  R31
000288 f02a      	BRMI _0x2000014
000289 91ed      	LD   R30,X+
00028a 91fd      	LD   R31,X+
00028b 9631      	ADIW R30,1
00028c 93fe      	ST   -X,R31
00028d 93ee      	ST   -X,R30
                 _0x2000014:
00028e c006      	RJMP _0x2000015
                 _0x2000010:
00028f 81aa      	LDD  R26,Y+2
000290 81bb      	LDD  R27,Y+2+1
000291 efef      	LDI  R30,LOW(65535)
000292 efff      	LDI  R31,HIGH(65535)
000293 93ed      	ST   X+,R30
000294 93fc      	ST   X,R31
                 _0x2000015:
000295 8119      	LDD  R17,Y+1
000296 8108      	LDD  R16,Y+0
000297 9625      	ADIW R28,5
000298 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000299 93ba      	ST   -Y,R27
00029a 93aa      	ST   -Y,R26
00029b 9726      	SBIW R28,6
00029c 940e 073c 	CALL __SAVELOCR6
00029e e010      	LDI  R17,0
00029f 85ac      	LDD  R26,Y+12
0002a0 85bd      	LDD  R27,Y+12+1
0002a1 e0e0      	LDI  R30,LOW(0)
0002a2 e0f0      	LDI  R31,HIGH(0)
0002a3 93ed      	ST   X+,R30
0002a4 93fc      	ST   X,R31
                 _0x2000016:
0002a5 89ea      	LDD  R30,Y+18
0002a6 89fb      	LDD  R31,Y+18+1
0002a7 9631      	ADIW R30,1
0002a8 8bea      	STD  Y+18,R30
0002a9 8bfb      	STD  Y+18+1,R31
0002aa 9731      	SBIW R30,1
0002ab 91e4      	LPM  R30,Z
0002ac 2f2e      	MOV  R18,R30
0002ad 30e0      	CPI  R30,0
0002ae f409      	BRNE PC+2
0002af c115      	RJMP _0x2000018
0002b0 2fe1      	MOV  R30,R17
0002b1 30e0      	CPI  R30,0
0002b2 f439      	BRNE _0x200001C
0002b3 3225      	CPI  R18,37
0002b4 f411      	BRNE _0x200001D
0002b5 e011      	LDI  R17,LOW(1)
0002b6 c002      	RJMP _0x200001E
                 _0x200001D:
0002b7 940e 0523 	CALL SUBOPT_0xB
                 _0x200001E:
0002b9 c10a      	RJMP _0x200001B
                 _0x200001C:
0002ba 30e1      	CPI  R30,LOW(0x1)
0002bb f4a9      	BRNE _0x200001F
0002bc 3225      	CPI  R18,37
0002bd f419      	BRNE _0x2000020
0002be 940e 0523 	CALL SUBOPT_0xB
0002c0 c102      	RJMP _0x20000CC
                 _0x2000020:
0002c1 e012      	LDI  R17,LOW(2)
0002c2 e040      	LDI  R20,LOW(0)
0002c3 e000      	LDI  R16,LOW(0)
0002c4 322d      	CPI  R18,45
0002c5 f411      	BRNE _0x2000021
0002c6 e001      	LDI  R16,LOW(1)
0002c7 c0fc      	RJMP _0x200001B
                 _0x2000021:
0002c8 322b      	CPI  R18,43
0002c9 f411      	BRNE _0x2000022
0002ca e24b      	LDI  R20,LOW(43)
0002cb c0f8      	RJMP _0x200001B
                 _0x2000022:
0002cc 3220      	CPI  R18,32
0002cd f411      	BRNE _0x2000023
0002ce e240      	LDI  R20,LOW(32)
0002cf c0f4      	RJMP _0x200001B
                 _0x2000023:
0002d0 c002      	RJMP _0x2000024
                 _0x200001F:
0002d1 30e2      	CPI  R30,LOW(0x2)
0002d2 f439      	BRNE _0x2000025
                 _0x2000024:
0002d3 e050      	LDI  R21,LOW(0)
0002d4 e013      	LDI  R17,LOW(3)
0002d5 3320      	CPI  R18,48
0002d6 f411      	BRNE _0x2000026
0002d7 6800      	ORI  R16,LOW(128)
0002d8 c0eb      	RJMP _0x200001B
                 _0x2000026:
0002d9 c003      	RJMP _0x2000027
                 _0x2000025:
0002da 30e3      	CPI  R30,LOW(0x3)
0002db f009      	BREQ PC+2
0002dc c0e7      	RJMP _0x200001B
                 _0x2000027:
0002dd 3320      	CPI  R18,48
0002de f010      	BRLO _0x200002A
0002df 332a      	CPI  R18,58
0002e0 f008      	BRLO _0x200002B
                 _0x200002A:
0002e1 c007      	RJMP _0x2000029
                 _0x200002B:
0002e2 e0aa      	LDI  R26,LOW(10)
0002e3 9f5a      	MUL  R21,R26
0002e4 2d50      	MOV  R21,R0
0002e5 2fe2      	MOV  R30,R18
0002e6 53e0      	SUBI R30,LOW(48)
0002e7 0f5e      	ADD  R21,R30
0002e8 c0db      	RJMP _0x200001B
                 _0x2000029:
0002e9 2fe2      	MOV  R30,R18
0002ea 36e3      	CPI  R30,LOW(0x63)
0002eb f449      	BRNE _0x200002F
0002ec 940e 052a 	CALL SUBOPT_0xC
0002ee 89e8      	LDD  R30,Y+16
0002ef 89f9      	LDD  R31,Y+16+1
0002f0 81a4      	LDD  R26,Z+4
0002f1 93aa      	ST   -Y,R26
0002f2 940e 0530 	CALL SUBOPT_0xD
0002f4 c0ce      	RJMP _0x2000030
                 _0x200002F:
0002f5 37e3      	CPI  R30,LOW(0x73)
0002f6 f441      	BRNE _0x2000032
0002f7 940e 052a 	CALL SUBOPT_0xC
0002f9 940e 0536 	CALL SUBOPT_0xE
0002fb 940e 04a0 	CALL _strlen
0002fd 2f1e      	MOV  R17,R30
0002fe c00a      	RJMP _0x2000033
                 _0x2000032:
0002ff 37e0      	CPI  R30,LOW(0x70)
000300 f461      	BRNE _0x2000035
000301 940e 052a 	CALL SUBOPT_0xC
000303 940e 0536 	CALL SUBOPT_0xE
000305 940e 04ac 	CALL _strlenf
000307 2f1e      	MOV  R17,R30
000308 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000309 6002      	ORI  R16,LOW(2)
00030a 770f      	ANDI R16,LOW(127)
00030b e030      	LDI  R19,LOW(0)
00030c c034      	RJMP _0x2000036
                 _0x2000035:
00030d 36e4      	CPI  R30,LOW(0x64)
00030e f011      	BREQ _0x2000039
00030f 36e9      	CPI  R30,LOW(0x69)
000310 f411      	BRNE _0x200003A
                 _0x2000039:
000311 6004      	ORI  R16,LOW(4)
000312 c002      	RJMP _0x200003B
                 _0x200003A:
000313 37e5      	CPI  R30,LOW(0x75)
000314 f431      	BRNE _0x200003C
                 _0x200003B:
000315 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000316 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000317 83ee      	STD  Y+6,R30
000318 83ff      	STD  Y+6+1,R31
000319 e015      	LDI  R17,LOW(5)
00031a c00c      	RJMP _0x200003D
                 _0x200003C:
00031b 35e8      	CPI  R30,LOW(0x58)
00031c f411      	BRNE _0x200003F
00031d 6008      	ORI  R16,LOW(8)
00031e c003      	RJMP _0x2000040
                 _0x200003F:
00031f 37e8      	CPI  R30,LOW(0x78)
000320 f009      	BREQ PC+2
000321 c0a1      	RJMP _0x2000071
                 _0x2000040:
000322 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000323 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000324 83ee      	STD  Y+6,R30
000325 83ff      	STD  Y+6+1,R31
000326 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000327 ff02      	SBRS R16,2
000328 c014      	RJMP _0x2000042
000329 940e 052a 	CALL SUBOPT_0xC
00032b 940e 0540 	CALL SUBOPT_0xF
00032d 85ab      	LDD  R26,Y+11
00032e 23aa      	TST  R26
00032f f43a      	BRPL _0x2000043
000330 85ea      	LDD  R30,Y+10
000331 85fb      	LDD  R31,Y+10+1
000332 940e 069c 	CALL __ANEGW1
000334 87ea      	STD  Y+10,R30
000335 87fb      	STD  Y+10+1,R31
000336 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000337 3040      	CPI  R20,0
000338 f011      	BREQ _0x2000044
000339 5f1f      	SUBI R17,-LOW(1)
00033a c001      	RJMP _0x2000045
                 _0x2000044:
00033b 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00033c c004      	RJMP _0x2000046
                 _0x2000042:
00033d 940e 052a 	CALL SUBOPT_0xC
00033f 940e 0540 	CALL SUBOPT_0xF
                 _0x2000046:
                 _0x2000036:
000341 fd00      	SBRC R16,0
000342 c011      	RJMP _0x2000047
                 _0x2000048:
000343 1715      	CP   R17,R21
000344 f478      	BRSH _0x200004A
000345 ff07      	SBRS R16,7
000346 c008      	RJMP _0x200004B
000347 ff02      	SBRS R16,2
000348 c004      	RJMP _0x200004C
000349 7f0b      	ANDI R16,LOW(251)
00034a 2f24      	MOV  R18,R20
00034b 5011      	SUBI R17,LOW(1)
00034c c001      	RJMP _0x200004D
                 _0x200004C:
00034d e320      	LDI  R18,LOW(48)
                 _0x200004D:
00034e c001      	RJMP _0x200004E
                 _0x200004B:
00034f e220      	LDI  R18,LOW(32)
                 _0x200004E:
000350 940e 0523 	CALL SUBOPT_0xB
000352 5051      	SUBI R21,LOW(1)
000353 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000354 2f31      	MOV  R19,R17
000355 ff01      	SBRS R16,1
000356 c017      	RJMP _0x200004F
                 _0x2000050:
000357 3030      	CPI  R19,0
000358 f0a1      	BREQ _0x2000052
000359 ff03      	SBRS R16,3
00035a c006      	RJMP _0x2000053
00035b 81ee      	LDD  R30,Y+6
00035c 81ff      	LDD  R31,Y+6+1
00035d 9125      	LPM  R18,Z+
00035e 83ee      	STD  Y+6,R30
00035f 83ff      	STD  Y+6+1,R31
000360 c005      	RJMP _0x2000054
                 _0x2000053:
000361 81ae      	LDD  R26,Y+6
000362 81bf      	LDD  R27,Y+6+1
000363 912d      	LD   R18,X+
000364 83ae      	STD  Y+6,R26
000365 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000366 940e 0523 	CALL SUBOPT_0xB
000368 3050      	CPI  R21,0
000369 f009      	BREQ _0x2000055
00036a 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00036b 5031      	SUBI R19,LOW(1)
00036c cfea      	RJMP _0x2000050
                 _0x2000052:
00036d c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00036e e320      	LDI  R18,LOW(48)
00036f 81ee      	LDD  R30,Y+6
000370 81ff      	LDD  R31,Y+6+1
000371 940e 0729 	CALL __GETW1PF
000373 87e8      	STD  Y+8,R30
000374 87f9      	STD  Y+8+1,R31
000375 81ee      	LDD  R30,Y+6
000376 81ff      	LDD  R31,Y+6+1
000377 9632      	ADIW R30,2
000378 83ee      	STD  Y+6,R30
000379 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00037a 85e8      	LDD  R30,Y+8
00037b 85f9      	LDD  R31,Y+8+1
00037c 85aa      	LDD  R26,Y+10
00037d 85bb      	LDD  R27,Y+10+1
00037e 17ae      	CP   R26,R30
00037f 07bf      	CPC  R27,R31
000380 f050      	BRLO _0x200005C
000381 5f2f      	SUBI R18,-LOW(1)
000382 85a8      	LDD  R26,Y+8
000383 85b9      	LDD  R27,Y+8+1
000384 85ea      	LDD  R30,Y+10
000385 85fb      	LDD  R31,Y+10+1
000386 1bea      	SUB  R30,R26
000387 0bfb      	SBC  R31,R27
000388 87ea      	STD  Y+10,R30
000389 87fb      	STD  Y+10+1,R31
00038a cfef      	RJMP _0x200005A
                 _0x200005C:
00038b 332a      	CPI  R18,58
00038c f028      	BRLO _0x200005D
00038d ff03      	SBRS R16,3
00038e c002      	RJMP _0x200005E
00038f 5f29      	SUBI R18,-LOW(7)
000390 c001      	RJMP _0x200005F
                 _0x200005E:
000391 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000392 fd04      	SBRC R16,4
000393 c01a      	RJMP _0x2000061
000394 3321      	CPI  R18,49
000395 f420      	BRSH _0x2000063
000396 85a8      	LDD  R26,Y+8
000397 85b9      	LDD  R27,Y+8+1
000398 9711      	SBIW R26,1
000399 f409      	BRNE _0x2000062
                 _0x2000063:
00039a c009      	RJMP _0x20000CD
                 _0x2000062:
00039b 1753      	CP   R21,R19
00039c f010      	BRLO _0x2000067
00039d ff00      	SBRS R16,0
00039e c001      	RJMP _0x2000068
                 _0x2000067:
00039f c013      	RJMP _0x2000066
                 _0x2000068:
0003a0 e220      	LDI  R18,LOW(32)
0003a1 ff07      	SBRS R16,7
0003a2 c00b      	RJMP _0x2000069
0003a3 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0003a4 6100      	ORI  R16,LOW(16)
0003a5 ff02      	SBRS R16,2
0003a6 c007      	RJMP _0x200006A
0003a7 7f0b      	ANDI R16,LOW(251)
0003a8 934a      	ST   -Y,R20
0003a9 940e 0530 	CALL SUBOPT_0xD
0003ab 3050      	CPI  R21,0
0003ac f009      	BREQ _0x200006B
0003ad 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0003ae 940e 0523 	CALL SUBOPT_0xB
0003b0 3050      	CPI  R21,0
0003b1 f009      	BREQ _0x200006C
0003b2 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0003b3 5031      	SUBI R19,LOW(1)
0003b4 85a8      	LDD  R26,Y+8
0003b5 85b9      	LDD  R27,Y+8+1
0003b6 9712      	SBIW R26,2
0003b7 f008      	BRLO _0x2000059
0003b8 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0003b9 ff00      	SBRS R16,0
0003ba c008      	RJMP _0x200006D
                 _0x200006E:
0003bb 3050      	CPI  R21,0
0003bc f031      	BREQ _0x2000070
0003bd 5051      	SUBI R21,LOW(1)
0003be e2e0      	LDI  R30,LOW(32)
0003bf 93ea      	ST   -Y,R30
0003c0 940e 0530 	CALL SUBOPT_0xD
0003c2 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0003c3 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0003c4 cee0      	RJMP _0x2000016
                 _0x2000018:
0003c5 85ac      	LDD  R26,Y+12
0003c6 85bd      	LDD  R27,Y+12+1
0003c7 940e 0725 	CALL __GETW1P
0003c9 940e 0743 	CALL __LOADLOCR6
                 _0x2080003:
0003cb 9664      	ADIW R28,20
0003cc 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003cd 92ff      	PUSH R15
0003ce 2ef8      	MOV  R15,R24
0003cf 9726      	SBIW R28,6
0003d0 940e 073e 	CALL __SAVELOCR4
0003d2 940e 0548 	CALL SUBOPT_0x10
0003d4 9730      	SBIW R30,0
0003d5 f419      	BRNE _0x2000072
0003d6 efef      	LDI  R30,LOW(65535)
0003d7 efff      	LDI  R31,HIGH(65535)
0003d8 c023      	RJMP _0x2080002
                 _0x2000072:
0003d9 01de      	MOVW R26,R28
0003da 9616      	ADIW R26,6
0003db 940e 068e 	CALL __ADDW2R15
0003dd 018d      	MOVW R16,R26
0003de 940e 0548 	CALL SUBOPT_0x10
0003e0 83ee      	STD  Y+6,R30
0003e1 83ff      	STD  Y+6+1,R31
0003e2 e0e0      	LDI  R30,LOW(0)
0003e3 87e8      	STD  Y+8,R30
0003e4 87e9      	STD  Y+8+1,R30
0003e5 01de      	MOVW R26,R28
0003e6 961a      	ADIW R26,10
0003e7 940e 068e 	CALL __ADDW2R15
0003e9 940e 0725 	CALL __GETW1P
0003eb 93fa      	ST   -Y,R31
0003ec 93ea      	ST   -Y,R30
0003ed 931a      	ST   -Y,R17
0003ee 930a      	ST   -Y,R16
0003ef e5e9      	LDI  R30,LOW(_put_buff_G100)
0003f0 e0f2      	LDI  R31,HIGH(_put_buff_G100)
0003f1 93fa      	ST   -Y,R31
0003f2 93ea      	ST   -Y,R30
0003f3 01de      	MOVW R26,R28
0003f4 961a      	ADIW R26,10
0003f5 dea3      	RCALL __print_G100
0003f6 019f      	MOVW R18,R30
0003f7 81ae      	LDD  R26,Y+6
0003f8 81bf      	LDD  R27,Y+6+1
0003f9 e0e0      	LDI  R30,LOW(0)
0003fa 93ec      	ST   X,R30
0003fb 01f9      	MOVW R30,R18
                 _0x2080002:
0003fc 940e 0745 	CALL __LOADLOCR4
0003fe 962a      	ADIW R28,10
0003ff 90ff      	POP  R15
000400 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000401 93aa      	ST   -Y,R26
000402 b3e5      	IN   R30,0x15
000403 70ef      	ANDI R30,LOW(0xF)
000404 2fae      	MOV  R26,R30
000405 81e8      	LD   R30,Y
000406 7fe0      	ANDI R30,LOW(0xF0)
000407 2bea      	OR   R30,R26
000408 bbe5      	OUT  0x15,R30
                +
000409 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00040a 958a     +DEC R24
00040b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00040c 9aaa      	SBI  0x15,2
                +
00040d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00040e 958a     +DEC R24
00040f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000410 98aa      	CBI  0x15,2
                +
000411 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000412 958a     +DEC R24
000413 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000414 c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000415 93aa      	ST   -Y,R26
000416 81a8      	LD   R26,Y
000417 dfe9      	RCALL __lcd_write_nibble_G101
000418 81e8          ld    r30,y
000419 95e2          swap  r30
00041a 83e8          st    y,r30
00041b 81a8      	LD   R26,Y
00041c dfe4      	RCALL __lcd_write_nibble_G101
                +
00041d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00041e 958a     +DEC R24
00041f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000420 c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000421 93aa      	ST   -Y,R26
000422 81e8      	LD   R30,Y
000423 e0f0      	LDI  R31,0
000424 57ea      	SUBI R30,LOW(-__base_y_G101)
000425 4ffe      	SBCI R31,HIGH(-__base_y_G101)
000426 81e0      	LD   R30,Z
000427 81a9      	LDD  R26,Y+1
000428 0fae      	ADD  R26,R30
000429 dfeb      	RCALL __lcd_write_data
00042a 81e9      	LDD  R30,Y+1
00042b 93e0 018a 	STS  __lcd_x,R30
00042d 81e8      	LD   R30,Y
00042e 93e0 018b 	STS  __lcd_y,R30
000430 9622      	ADIW R28,2
000431 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000432 e0a2      	LDI  R26,LOW(2)
000433 940e 054f 	CALL SUBOPT_0x11
000435 e0ac      	LDI  R26,LOW(12)
000436 dfde      	RCALL __lcd_write_data
000437 e0a1      	LDI  R26,LOW(1)
000438 940e 054f 	CALL SUBOPT_0x11
00043a e0e0      	LDI  R30,LOW(0)
00043b 93e0 018b 	STS  __lcd_y,R30
00043d 93e0 018a 	STS  __lcd_x,R30
00043f 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000440 93aa      	ST   -Y,R26
000441 81a8      	LD   R26,Y
000442 30aa      	CPI  R26,LOW(0xA)
000443 f031      	BREQ _0x2020005
000444 91e0 018c 	LDS  R30,__lcd_maxx
000446 91a0 018a 	LDS  R26,__lcd_x
000448 17ae      	CP   R26,R30
000449 f060      	BRLO _0x2020004
                 _0x2020005:
00044a e0e0      	LDI  R30,LOW(0)
00044b 93ea      	ST   -Y,R30
00044c 91a0 018b 	LDS  R26,__lcd_y
00044e 5faf      	SUBI R26,-LOW(1)
00044f 93a0 018b 	STS  __lcd_y,R26
000451 dfcf      	RCALL _lcd_gotoxy
000452 81a8      	LD   R26,Y
000453 30aa      	CPI  R26,LOW(0xA)
000454 f409      	BRNE _0x2020007
000455 c048      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000456 91e0 018a 	LDS  R30,__lcd_x
000458 5fef      	SUBI R30,-LOW(1)
000459 93e0 018a 	STS  __lcd_x,R30
00045b 9aa8      	SBI  0x15,0
00045c 81a8      	LD   R26,Y
00045d dfb7      	RCALL __lcd_write_data
00045e 98a8      	CBI  0x15,0
00045f c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000460 93ba      	ST   -Y,R27
000461 93aa      	ST   -Y,R26
000462 931a      	ST   -Y,R17
                 _0x2020008:
000463 81a9      	LDD  R26,Y+1
000464 81ba      	LDD  R27,Y+1+1
000465 91ed      	LD   R30,X+
000466 83a9      	STD  Y+1,R26
000467 83ba      	STD  Y+1+1,R27
000468 2f1e      	MOV  R17,R30
000469 30e0      	CPI  R30,0
00046a f019      	BREQ _0x202000A
00046b 2fa1      	MOV  R26,R17
00046c dfd3      	RCALL _lcd_putchar
00046d cff5      	RJMP _0x2020008
                 _0x202000A:
00046e 8118      	LDD  R17,Y+0
00046f 9623      	ADIW R28,3
000470 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000471 93aa      	ST   -Y,R26
000472 b3e4      	IN   R30,0x14
000473 6fe0      	ORI  R30,LOW(0xF0)
000474 bbe4      	OUT  0x14,R30
000475 9aa2      	SBI  0x14,2
000476 9aa0      	SBI  0x14,0
000477 9aa1      	SBI  0x14,1
000478 98aa      	CBI  0x15,2
000479 98a8      	CBI  0x15,0
00047a 98a9      	CBI  0x15,1
00047b 81e8      	LD   R30,Y
00047c 93e0 018c 	STS  __lcd_maxx,R30
00047e 58e0      	SUBI R30,-LOW(128)
                +
00047f 93e0 0188+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000481 81e8      	LD   R30,Y
000482 54e0      	SUBI R30,-LOW(192)
                +
000483 93e0 0189+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000485 e1a4      	LDI  R26,LOW(20)
000486 e0b0      	LDI  R27,0
000487 940e 055d 	CALL _delay_ms
000489 940e 0555 	CALL SUBOPT_0x12
00048b 940e 0555 	CALL SUBOPT_0x12
00048d 940e 0555 	CALL SUBOPT_0x12
00048f e2a0      	LDI  R26,LOW(32)
000490 df70      	RCALL __lcd_write_nibble_G101
                +
000491 ec88     +LDI R24 , LOW ( 200 )
000492 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000493 9701     +SBIW R24 , 1
000494 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000495 e2a8      	LDI  R26,LOW(40)
000496 df7e      	RCALL __lcd_write_data
000497 e0a4      	LDI  R26,LOW(4)
000498 df7c      	RCALL __lcd_write_data
000499 e8a5      	LDI  R26,LOW(133)
00049a df7a      	RCALL __lcd_write_data
00049b e0a6      	LDI  R26,LOW(6)
00049c df78      	RCALL __lcd_write_data
00049d df94      	RCALL _lcd_clear
                 _0x2080001:
00049e 9621      	ADIW R28,1
00049f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0004a0 93ba      	ST   -Y,R27
0004a1 93aa      	ST   -Y,R26
0004a2 91a9          ld   r26,y+
0004a3 91b9          ld   r27,y+
0004a4 27ee          clr  r30
0004a5 27ff          clr  r31
                 strlen0:
0004a6 916d          ld   r22,x+
0004a7 2366          tst  r22
0004a8 f011          breq strlen1
0004a9 9631          adiw r30,1
0004aa cffb          rjmp strlen0
                 strlen1:
0004ab 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004ac 93ba      	ST   -Y,R27
0004ad 93aa      	ST   -Y,R26
0004ae 27aa          clr  r26
0004af 27bb          clr  r27
0004b0 91e9          ld   r30,y+
0004b1 91f9          ld   r31,y+
                 strlenf0:
0004b2 9005      	lpm  r0,z+
0004b3 2000          tst  r0
0004b4 f011          breq strlenf1
0004b5 9611          adiw r26,1
0004b6 cffb          rjmp strlenf0
                 strlenf1:
0004b7 01fd          movw r30,r26
0004b8 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _LCD_line1_template:
00017e           	.BYTE 0x2
                 _LCD_line2_parking_template:
000180           	.BYTE 0x2
                 _LCD_line2_period_template:
000182           	.BYTE 0x2
                 _which_one_is_clicked:
000184           	.BYTE 0x1
                 _timer0_error_handler:
000185           	.BYTE 0x1
                 __base_y_G101:
000186           	.BYTE 0x4
                 __lcd_x:
00018a           	.BYTE 0x1
                 __lcd_y:
00018b           	.BYTE 0x1
                 __lcd_maxx:
00018c           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0004b9 91e0 0180 	LDS  R30,_LCD_line2_parking_template
0004bb 91f0 0181 	LDS  R31,_LCD_line2_parking_template+1
0004bd 93fa      	ST   -Y,R31
0004be 93ea      	ST   -Y,R30
0004bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0004c0 93fa      	ST   -Y,R31
0004c1 93ea      	ST   -Y,R30
                +
0004c2 e0ea     +LDI R30 , LOW ( 0xA )
0004c3 e0f0     +LDI R31 , HIGH ( 0xA )
0004c4 e060     +LDI R22 , BYTE3 ( 0xA )
0004c5 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
0004c6 940e 0732 	CALL __PUTPARD1
0004c8 e084      	LDI  R24,4
0004c9 940e 03cd 	CALL _sprintf
0004cb 9628      	ADIW R28,8
0004cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0004cd 91e0 017e 	LDS  R30,_LCD_line1_template
0004cf 91f0 017f 	LDS  R31,_LCD_line1_template+1
0004d1 93fa      	ST   -Y,R31
0004d2 93ea      	ST   -Y,R30
0004d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x3:
                +
0004d4 e0e0     +LDI R30 , LOW ( 0x0 )
0004d5 e0f0     +LDI R31 , HIGH ( 0x0 )
0004d6 e060     +LDI R22 , BYTE3 ( 0x0 )
0004d7 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0004d8 940e 0732 	CALL __PUTPARD1
0004da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0004db 91e0 0182 	LDS  R30,_LCD_line2_period_template
0004dd 91f0 0183 	LDS  R31,_LCD_line2_period_template+1
0004df 93fa      	ST   -Y,R31
0004e0 93ea      	ST   -Y,R30
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
0004e2 e0e0      	LDI  R30,LOW(0)
0004e3 93ea      	ST   -Y,R30
0004e4 e0a0      	LDI  R26,LOW(0)
0004e5 940e 0421 	CALL _lcd_gotoxy
0004e7 91a0 017e 	LDS  R26,_LCD_line1_template
0004e9 91b0 017f 	LDS  R27,_LCD_line1_template+1
0004eb 940c 0460 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x6:
0004ed 920a      	ST   -Y,R0
0004ee 921a      	ST   -Y,R1
0004ef 92fa      	ST   -Y,R15
0004f0 936a      	ST   -Y,R22
0004f1 937a      	ST   -Y,R23
0004f2 938a      	ST   -Y,R24
0004f3 939a      	ST   -Y,R25
0004f4 93aa      	ST   -Y,R26
0004f5 93ba      	ST   -Y,R27
0004f6 93ea      	ST   -Y,R30
0004f7 93fa      	ST   -Y,R31
0004f8 b7ef      	IN   R30,SREG
0004f9 93ea      	ST   -Y,R30
0004fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
0004fb 27ff      	CLR  R31
0004fc 2766      	CLR  R22
0004fd 2777      	CLR  R23
0004fe 940e 0732 	CALL __PUTPARD1
000500 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000501 2de8      	MOV  R30,R8
000502 e0f0      	LDI  R31,0
000503 940e 06a8 	CALL __CWD1
000505 940e 0732 	CALL __PUTPARD1
000507 cfcc      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
                +
000508 efef     +LDI R30 , LOW ( 0xFF )
000509 e0f0     +LDI R31 , HIGH ( 0xFF )
00050a e060     +LDI R22 , BYTE3 ( 0xFF )
00050b e070     +LDI R23 , BYTE4 ( 0xFF )
                 	__GETD1N 0xFF
00050c 940e 0732 	CALL __PUTPARD1
                +
00050e e0e1     +LDI R30 , LOW ( 0x1 )
00050f e0f0     +LDI R31 , HIGH ( 0x1 )
000510 e060     +LDI R22 , BYTE3 ( 0x1 )
000511 e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
000512 940e 0732 	CALL __PUTPARD1
                +
000514 e1a0     +LDI R26 , LOW ( 0x2710 )
000515 e2b7     +LDI R27 , HIGH ( 0x2710 )
000516 e080     +LDI R24 , BYTE3 ( 0x2710 )
000517 e090     +LDI R25 , BYTE4 ( 0x2710 )
                 	__GETD2N 0x2710
000518 940c 011a 	JMP  _map
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
00051a 93ea      	ST   -Y,R30
00051b e0a1      	LDI  R26,LOW(1)
00051c 940e 0421 	CALL _lcd_gotoxy
00051e 91a0 0180 	LDS  R26,_LCD_line2_parking_template
000520 91b0 0181 	LDS  R27,_LCD_line2_parking_template+1
000522 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB:
000523 932a      	ST   -Y,R18
000524 85ad      	LDD  R26,Y+13
000525 85be      	LDD  R27,Y+13+1
000526 85ef      	LDD  R30,Y+15
000527 89f8      	LDD  R31,Y+15+1
000528 9509      	ICALL
000529 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
00052a 89e8      	LDD  R30,Y+16
00052b 89f9      	LDD  R31,Y+16+1
00052c 9734      	SBIW R30,4
00052d 8be8      	STD  Y+16,R30
00052e 8bf9      	STD  Y+16+1,R31
00052f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000530 85ad      	LDD  R26,Y+13
000531 85be      	LDD  R27,Y+13+1
000532 85ef      	LDD  R30,Y+15
000533 89f8      	LDD  R31,Y+15+1
000534 9509      	ICALL
000535 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
000536 89a8      	LDD  R26,Y+16
000537 89b9      	LDD  R27,Y+16+1
000538 9614      	ADIW R26,4
000539 940e 0725 	CALL __GETW1P
00053b 83ee      	STD  Y+6,R30
00053c 83ff      	STD  Y+6+1,R31
00053d 81ae      	LDD  R26,Y+6
00053e 81bf      	LDD  R27,Y+6+1
00053f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
000540 89a8      	LDD  R26,Y+16
000541 89b9      	LDD  R27,Y+16+1
000542 9614      	ADIW R26,4
000543 940e 0725 	CALL __GETW1P
000545 87ea      	STD  Y+10,R30
000546 87fb      	STD  Y+10+1,R31
000547 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000548 01de      	MOVW R26,R28
000549 961c      	ADIW R26,12
00054a 940e 068e 	CALL __ADDW2R15
00054c 940e 0725 	CALL __GETW1P
00054e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00054f 940e 0415 	CALL __lcd_write_data
000551 e0a3      	LDI  R26,LOW(3)
000552 e0b0      	LDI  R27,0
000553 940c 055d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
000555 e3a0      	LDI  R26,LOW(48)
000556 940e 0401 	CALL __lcd_write_nibble_G101
                +
000558 ec88     +LDI R24 , LOW ( 200 )
000559 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00055a 9701     +SBIW R24 , 1
00055b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00055c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00055d 9610      	adiw r26,0
00055e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00055f ed80     +LDI R24 , LOW ( 0x7D0 )
000560 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000561 9701     +SBIW R24 , 1
000562 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000563 95a8      	wdr
000564 9711      	sbiw r26,1
000565 f7c9      	brne __delay_ms0
                 __delay_ms1:
000566 9508      	ret
                 
                 __ROUND_REPACK:
000567 2355      	TST  R21
000568 f442      	BRPL __REPACK
000569 3850      	CPI  R21,0x80
00056a f411      	BRNE __ROUND_REPACK0
00056b ffe0      	SBRS R30,0
00056c c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00056d 9631      	ADIW R30,1
00056e 1f69      	ADC  R22,R25
00056f 1f79      	ADC  R23,R25
000570 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000571 e850      	LDI  R21,0x80
000572 2757      	EOR  R21,R23
000573 f411      	BRNE __REPACK0
000574 935f      	PUSH R21
000575 c073      	RJMP __ZERORES
                 __REPACK0:
000576 3f5f      	CPI  R21,0xFF
000577 f031      	BREQ __REPACK1
000578 0f66      	LSL  R22
000579 0c00      	LSL  R0
00057a 9557      	ROR  R21
00057b 9567      	ROR  R22
00057c 2f75      	MOV  R23,R21
00057d 9508      	RET
                 __REPACK1:
00057e 935f      	PUSH R21
00057f 2000      	TST  R0
000580 f00a      	BRMI __REPACK2
000581 c073      	RJMP __MAXRES
                 __REPACK2:
000582 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000583 e850      	LDI  R21,0x80
000584 2e19      	MOV  R1,R25
000585 2215      	AND  R1,R21
000586 0f88      	LSL  R24
000587 1f99      	ROL  R25
000588 2795      	EOR  R25,R21
000589 0f55      	LSL  R21
00058a 9587      	ROR  R24
                 
                 __UNPACK1:
00058b e850      	LDI  R21,0x80
00058c 2e07      	MOV  R0,R23
00058d 2205      	AND  R0,R21
00058e 0f66      	LSL  R22
00058f 1f77      	ROL  R23
000590 2775      	EOR  R23,R21
000591 0f55      	LSL  R21
000592 9567      	ROR  R22
000593 9508      	RET
                 
                 __CFD1U:
000594 9468      	SET
000595 c001      	RJMP __CFD1U0
                 __CFD1:
000596 94e8      	CLT
                 __CFD1U0:
000597 935f      	PUSH R21
000598 dff2      	RCALL __UNPACK1
000599 3870      	CPI  R23,0x80
00059a f018      	BRLO __CFD10
00059b 3f7f      	CPI  R23,0xFF
00059c f408      	BRCC __CFD10
00059d c04b      	RJMP __ZERORES
                 __CFD10:
00059e e156      	LDI  R21,22
00059f 1b57      	SUB  R21,R23
0005a0 f4aa      	BRPL __CFD11
0005a1 9551      	NEG  R21
0005a2 3058      	CPI  R21,8
0005a3 f40e      	BRTC __CFD19
0005a4 3059      	CPI  R21,9
                 __CFD19:
0005a5 f030      	BRLO __CFD17
0005a6 efef      	SER  R30
0005a7 efff      	SER  R31
0005a8 ef6f      	SER  R22
0005a9 e77f      	LDI  R23,0x7F
0005aa f977      	BLD  R23,7
0005ab c01a      	RJMP __CFD15
                 __CFD17:
0005ac 2777      	CLR  R23
0005ad 2355      	TST  R21
0005ae f0b9      	BREQ __CFD15
                 __CFD18:
0005af 0fee      	LSL  R30
0005b0 1fff      	ROL  R31
0005b1 1f66      	ROL  R22
0005b2 1f77      	ROL  R23
0005b3 955a      	DEC  R21
0005b4 f7d1      	BRNE __CFD18
0005b5 c010      	RJMP __CFD15
                 __CFD11:
0005b6 2777      	CLR  R23
                 __CFD12:
0005b7 3058      	CPI  R21,8
0005b8 f028      	BRLO __CFD13
0005b9 2fef      	MOV  R30,R31
0005ba 2ff6      	MOV  R31,R22
0005bb 2f67      	MOV  R22,R23
0005bc 5058      	SUBI R21,8
0005bd cff9      	RJMP __CFD12
                 __CFD13:
0005be 2355      	TST  R21
0005bf f031      	BREQ __CFD15
                 __CFD14:
0005c0 9576      	LSR  R23
0005c1 9567      	ROR  R22
0005c2 95f7      	ROR  R31
0005c3 95e7      	ROR  R30
0005c4 955a      	DEC  R21
0005c5 f7d1      	BRNE __CFD14
                 __CFD15:
0005c6 2000      	TST  R0
0005c7 f40a      	BRPL __CFD16
0005c8 d0d7      	RCALL __ANEGD1
                 __CFD16:
0005c9 915f      	POP  R21
0005ca 9508      	RET
                 
                 __CDF1U:
0005cb 9468      	SET
0005cc c001      	RJMP __CDF1U0
                 __CDF1:
0005cd 94e8      	CLT
                 __CDF1U0:
0005ce 9730      	SBIW R30,0
0005cf 4060      	SBCI R22,0
0005d0 4070      	SBCI R23,0
0005d1 f0b1      	BREQ __CDF10
0005d2 2400      	CLR  R0
0005d3 f026      	BRTS __CDF11
0005d4 2377      	TST  R23
0005d5 f412      	BRPL __CDF11
0005d6 9400      	COM  R0
0005d7 d0c8      	RCALL __ANEGD1
                 __CDF11:
0005d8 2e17      	MOV  R1,R23
0005d9 e17e      	LDI  R23,30
0005da 2011      	TST  R1
                 __CDF12:
0005db f032      	BRMI __CDF13
0005dc 957a      	DEC  R23
0005dd 0fee      	LSL  R30
0005de 1fff      	ROL  R31
0005df 1f66      	ROL  R22
0005e0 1c11      	ROL  R1
0005e1 cff9      	RJMP __CDF12
                 __CDF13:
0005e2 2fef      	MOV  R30,R31
0005e3 2ff6      	MOV  R31,R22
0005e4 2d61      	MOV  R22,R1
0005e5 935f      	PUSH R21
0005e6 df8a      	RCALL __REPACK
0005e7 915f      	POP  R21
                 __CDF10:
0005e8 9508      	RET
                 
                 __ZERORES:
0005e9 27ee      	CLR  R30
0005ea 27ff      	CLR  R31
0005eb 2766      	CLR  R22
0005ec 2777      	CLR  R23
0005ed 915f      	POP  R21
0005ee 9508      	RET
                 
                 __MINRES:
0005ef efef      	SER  R30
0005f0 efff      	SER  R31
0005f1 e76f      	LDI  R22,0x7F
0005f2 ef7f      	SER  R23
0005f3 915f      	POP  R21
0005f4 9508      	RET
                 
                 __MAXRES:
0005f5 efef      	SER  R30
0005f6 efff      	SER  R31
0005f7 e76f      	LDI  R22,0x7F
0005f8 e77f      	LDI  R23,0x7F
0005f9 915f      	POP  R21
0005fa 9508      	RET
                 
                 __MULF12:
0005fb 935f      	PUSH R21
0005fc df86      	RCALL __UNPACK
0005fd 3870      	CPI  R23,0x80
0005fe f351      	BREQ __ZERORES
0005ff 3890      	CPI  R25,0x80
000600 f341      	BREQ __ZERORES
000601 2401      	EOR  R0,R1
000602 9408      	SEC
000603 1f79      	ADC  R23,R25
000604 f423      	BRVC __MULF124
000605 f31c      	BRLT __ZERORES
                 __MULF125:
000606 2000      	TST  R0
000607 f33a      	BRMI __MINRES
000608 cfec      	RJMP __MAXRES
                 __MULF124:
000609 920f      	PUSH R0
00060a 931f      	PUSH R17
00060b 932f      	PUSH R18
00060c 933f      	PUSH R19
00060d 934f      	PUSH R20
00060e 2711      	CLR  R17
00060f 2722      	CLR  R18
000610 2799      	CLR  R25
000611 9f68      	MUL  R22,R24
000612 01a0      	MOVW R20,R0
000613 9f8f      	MUL  R24,R31
000614 2d30      	MOV  R19,R0
000615 0d41      	ADD  R20,R1
000616 1f59      	ADC  R21,R25
000617 9f6b      	MUL  R22,R27
000618 0d30      	ADD  R19,R0
000619 1d41      	ADC  R20,R1
00061a 1f59      	ADC  R21,R25
00061b 9f8e      	MUL  R24,R30
00061c d027      	RCALL __MULF126
00061d 9fbf      	MUL  R27,R31
00061e d025      	RCALL __MULF126
00061f 9f6a      	MUL  R22,R26
000620 d023      	RCALL __MULF126
000621 9fbe      	MUL  R27,R30
000622 d01d      	RCALL __MULF127
000623 9faf      	MUL  R26,R31
000624 d01b      	RCALL __MULF127
000625 9fae      	MUL  R26,R30
000626 0d11      	ADD  R17,R1
000627 1f29      	ADC  R18,R25
000628 1f39      	ADC  R19,R25
000629 1f49      	ADC  R20,R25
00062a 1f59      	ADC  R21,R25
00062b 2fe3      	MOV  R30,R19
00062c 2ff4      	MOV  R31,R20
00062d 2f65      	MOV  R22,R21
00062e 2f52      	MOV  R21,R18
00062f 914f      	POP  R20
000630 913f      	POP  R19
000631 912f      	POP  R18
000632 911f      	POP  R17
000633 900f      	POP  R0
000634 2366      	TST  R22
000635 f02a      	BRMI __MULF122
000636 0f55      	LSL  R21
000637 1fee      	ROL  R30
000638 1fff      	ROL  R31
000639 1f66      	ROL  R22
00063a c002      	RJMP __MULF123
                 __MULF122:
00063b 9573      	INC  R23
00063c f24b      	BRVS __MULF125
                 __MULF123:
00063d df29      	RCALL __ROUND_REPACK
00063e 915f      	POP  R21
00063f 9508      	RET
                 
                 __MULF127:
000640 0d10      	ADD  R17,R0
000641 1d21      	ADC  R18,R1
000642 1f39      	ADC  R19,R25
000643 c002      	RJMP __MULF128
                 __MULF126:
000644 0d20      	ADD  R18,R0
000645 1d31      	ADC  R19,R1
                 __MULF128:
000646 1f49      	ADC  R20,R25
000647 1f59      	ADC  R21,R25
000648 9508      	RET
                 
                 __DIVF21:
000649 935f      	PUSH R21
00064a df38      	RCALL __UNPACK
00064b 3870      	CPI  R23,0x80
00064c f421      	BRNE __DIVF210
00064d 2011      	TST  R1
                 __DIVF211:
00064e f40a      	BRPL __DIVF219
00064f cf9f      	RJMP __MINRES
                 __DIVF219:
000650 cfa4      	RJMP __MAXRES
                 __DIVF210:
000651 3890      	CPI  R25,0x80
000652 f409      	BRNE __DIVF218
                 __DIVF217:
000653 cf95      	RJMP __ZERORES
                 __DIVF218:
000654 2401      	EOR  R0,R1
000655 9408      	SEC
000656 0b97      	SBC  R25,R23
000657 f41b      	BRVC __DIVF216
000658 f3d4      	BRLT __DIVF217
000659 2000      	TST  R0
00065a cff3      	RJMP __DIVF211
                 __DIVF216:
00065b 2f79      	MOV  R23,R25
00065c 931f      	PUSH R17
00065d 932f      	PUSH R18
00065e 933f      	PUSH R19
00065f 934f      	PUSH R20
000660 2411      	CLR  R1
000661 2711      	CLR  R17
000662 2722      	CLR  R18
000663 2733      	CLR  R19
000664 2744      	CLR  R20
000665 2755      	CLR  R21
000666 e290      	LDI  R25,32
                 __DIVF212:
000667 17ae      	CP   R26,R30
000668 07bf      	CPC  R27,R31
000669 0786      	CPC  R24,R22
00066a 0741      	CPC  R20,R17
00066b f030      	BRLO __DIVF213
00066c 1bae      	SUB  R26,R30
00066d 0bbf      	SBC  R27,R31
00066e 0b86      	SBC  R24,R22
00066f 0b41      	SBC  R20,R17
000670 9408      	SEC
000671 c001      	RJMP __DIVF214
                 __DIVF213:
000672 9488      	CLC
                 __DIVF214:
000673 1f55      	ROL  R21
000674 1f22      	ROL  R18
000675 1f33      	ROL  R19
000676 1c11      	ROL  R1
000677 1faa      	ROL  R26
000678 1fbb      	ROL  R27
000679 1f88      	ROL  R24
00067a 1f44      	ROL  R20
00067b 959a      	DEC  R25
00067c f751      	BRNE __DIVF212
00067d 01f9      	MOVW R30,R18
00067e 2d61      	MOV  R22,R1
00067f 914f      	POP  R20
000680 913f      	POP  R19
000681 912f      	POP  R18
000682 911f      	POP  R17
000683 2366      	TST  R22
000684 f032      	BRMI __DIVF215
000685 0f55      	LSL  R21
000686 1fee      	ROL  R30
000687 1fff      	ROL  R31
000688 1f66      	ROL  R22
000689 957a      	DEC  R23
00068a f243      	BRVS __DIVF217
                 __DIVF215:
00068b dedb      	RCALL __ROUND_REPACK
00068c 915f      	POP  R21
00068d 9508      	RET
                 
                 __ADDW2R15:
00068e 2400      	CLR  R0
00068f 0daf      	ADD  R26,R15
000690 1db0      	ADC  R27,R0
000691 9508      	RET
                 
                 __ADDD12:
000692 0fea      	ADD  R30,R26
000693 1ffb      	ADC  R31,R27
000694 1f68      	ADC  R22,R24
000695 1f79      	ADC  R23,R25
000696 9508      	RET
                 
                 __SUBD12:
000697 1bea      	SUB  R30,R26
000698 0bfb      	SBC  R31,R27
000699 0b68      	SBC  R22,R24
00069a 0b79      	SBC  R23,R25
00069b 9508      	RET
                 
                 __ANEGW1:
00069c 95f1      	NEG  R31
00069d 95e1      	NEG  R30
00069e 40f0      	SBCI R31,0
00069f 9508      	RET
                 
                 __ANEGD1:
0006a0 95f0      	COM  R31
0006a1 9560      	COM  R22
0006a2 9570      	COM  R23
0006a3 95e1      	NEG  R30
0006a4 4fff      	SBCI R31,-1
0006a5 4f6f      	SBCI R22,-1
0006a6 4f7f      	SBCI R23,-1
0006a7 9508      	RET
                 
                 __CWD1:
0006a8 2f6f      	MOV  R22,R31
0006a9 0f66      	ADD  R22,R22
0006aa 0b66      	SBC  R22,R22
0006ab 2f76      	MOV  R23,R22
0006ac 9508      	RET
                 
                 __MULD12U:
0006ad 9f7a      	MUL  R23,R26
0006ae 2d70      	MOV  R23,R0
0006af 9f6b      	MUL  R22,R27
0006b0 0d70      	ADD  R23,R0
0006b1 9ff8      	MUL  R31,R24
0006b2 0d70      	ADD  R23,R0
0006b3 9fe9      	MUL  R30,R25
0006b4 0d70      	ADD  R23,R0
0006b5 9f6a      	MUL  R22,R26
0006b6 2d60      	MOV  R22,R0
0006b7 0d71      	ADD  R23,R1
0006b8 9ffb      	MUL  R31,R27
0006b9 0d60      	ADD  R22,R0
0006ba 1d71      	ADC  R23,R1
0006bb 9fe8      	MUL  R30,R24
0006bc 0d60      	ADD  R22,R0
0006bd 1d71      	ADC  R23,R1
0006be 2788      	CLR  R24
0006bf 9ffa      	MUL  R31,R26
0006c0 2df0      	MOV  R31,R0
0006c1 0d61      	ADD  R22,R1
0006c2 1f78      	ADC  R23,R24
0006c3 9feb      	MUL  R30,R27
0006c4 0df0      	ADD  R31,R0
0006c5 1d61      	ADC  R22,R1
0006c6 1f78      	ADC  R23,R24
0006c7 9fea      	MUL  R30,R26
0006c8 2de0      	MOV  R30,R0
0006c9 0df1      	ADD  R31,R1
0006ca 1f68      	ADC  R22,R24
0006cb 1f78      	ADC  R23,R24
0006cc 9508      	RET
                 
                 __MULD12:
0006cd d044      	RCALL __CHKSIGND
0006ce dfde      	RCALL __MULD12U
0006cf f40e      	BRTC __MULD121
0006d0 dfcf      	RCALL __ANEGD1
                 __MULD121:
0006d1 9508      	RET
                 
                 __DIVW21U:
0006d2 2400      	CLR  R0
0006d3 2411      	CLR  R1
0006d4 e190      	LDI  R25,16
                 __DIVW21U1:
0006d5 0faa      	LSL  R26
0006d6 1fbb      	ROL  R27
0006d7 1c00      	ROL  R0
0006d8 1c11      	ROL  R1
0006d9 1a0e      	SUB  R0,R30
0006da 0a1f      	SBC  R1,R31
0006db f418      	BRCC __DIVW21U2
0006dc 0e0e      	ADD  R0,R30
0006dd 1e1f      	ADC  R1,R31
0006de c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0006df 60a1      	SBR  R26,1
                 __DIVW21U3:
0006e0 959a      	DEC  R25
0006e1 f799      	BRNE __DIVW21U1
0006e2 01fd      	MOVW R30,R26
0006e3 01d0      	MOVW R26,R0
0006e4 9508      	RET
                 
                 __DIVD21U:
0006e5 933f      	PUSH R19
0006e6 934f      	PUSH R20
0006e7 935f      	PUSH R21
0006e8 2400      	CLR  R0
0006e9 2411      	CLR  R1
0006ea 2744      	CLR  R20
0006eb 2755      	CLR  R21
0006ec e230      	LDI  R19,32
                 __DIVD21U1:
0006ed 0faa      	LSL  R26
0006ee 1fbb      	ROL  R27
0006ef 1f88      	ROL  R24
0006f0 1f99      	ROL  R25
0006f1 1c00      	ROL  R0
0006f2 1c11      	ROL  R1
0006f3 1f44      	ROL  R20
0006f4 1f55      	ROL  R21
0006f5 1a0e      	SUB  R0,R30
0006f6 0a1f      	SBC  R1,R31
0006f7 0b46      	SBC  R20,R22
0006f8 0b57      	SBC  R21,R23
0006f9 f428      	BRCC __DIVD21U2
0006fa 0e0e      	ADD  R0,R30
0006fb 1e1f      	ADC  R1,R31
0006fc 1f46      	ADC  R20,R22
0006fd 1f57      	ADC  R21,R23
0006fe c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0006ff 60a1      	SBR  R26,1
                 __DIVD21U3:
000700 953a      	DEC  R19
000701 f759      	BRNE __DIVD21U1
000702 01fd      	MOVW R30,R26
000703 01bc      	MOVW R22,R24
000704 01d0      	MOVW R26,R0
000705 01ca      	MOVW R24,R20
000706 915f      	POP  R21
000707 914f      	POP  R20
000708 913f      	POP  R19
000709 9508      	RET
                 
                 __DIVD21:
00070a d007      	RCALL __CHKSIGND
00070b dfd9      	RCALL __DIVD21U
00070c f40e      	BRTC __DIVD211
00070d df92      	RCALL __ANEGD1
                 __DIVD211:
00070e 9508      	RET
                 
                 __MODW21U:
00070f dfc2      	RCALL __DIVW21U
000710 01fd      	MOVW R30,R26
000711 9508      	RET
                 
                 __CHKSIGND:
000712 94e8      	CLT
000713 ff77      	SBRS R23,7
000714 c002      	RJMP __CHKSD1
000715 df8a      	RCALL __ANEGD1
000716 9468      	SET
                 __CHKSD1:
000717 ff97      	SBRS R25,7
000718 c00b      	RJMP __CHKSD2
000719 2400      	CLR  R0
00071a 95a0      	COM  R26
00071b 95b0      	COM  R27
00071c 9580      	COM  R24
00071d 9590      	COM  R25
00071e 9611      	ADIW R26,1
00071f 1d80      	ADC  R24,R0
000720 1d90      	ADC  R25,R0
000721 f800      	BLD  R0,0
000722 9403      	INC  R0
000723 fa00      	BST  R0,0
                 __CHKSD2:
000724 9508      	RET
                 
                 __GETW1P:
000725 91ed      	LD   R30,X+
000726 91fc      	LD   R31,X
000727 9711      	SBIW R26,1
000728 9508      	RET
                 
                 __GETW1PF:
000729 9005      	LPM  R0,Z+
00072a 91f4      	LPM  R31,Z
00072b 2de0      	MOV  R30,R0
00072c 9508      	RET
                 
                 __GETD1S0:
00072d 81e8      	LD   R30,Y
00072e 81f9      	LDD  R31,Y+1
00072f 816a      	LDD  R22,Y+2
000730 817b      	LDD  R23,Y+3
000731 9508      	RET
                 
                 __PUTPARD1:
000732 937a      	ST   -Y,R23
000733 936a      	ST   -Y,R22
000734 93fa      	ST   -Y,R31
000735 93ea      	ST   -Y,R30
000736 9508      	RET
                 
                 __PUTPARD2:
000737 939a      	ST   -Y,R25
000738 938a      	ST   -Y,R24
000739 93ba      	ST   -Y,R27
00073a 93aa      	ST   -Y,R26
00073b 9508      	RET
                 
                 __SAVELOCR6:
00073c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00073d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00073e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00073f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000740 931a      	ST   -Y,R17
000741 930a      	ST   -Y,R16
000742 9508      	RET
                 
                 __LOADLOCR6:
000743 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000744 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000745 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000746 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000747 8119      	LDD  R17,Y+1
000748 8108      	LD   R16,Y
000749 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  57 r1 :  34 r2 :   0 r3 :   0 r4 :   5 r5 :   5 r6 :   5 r7 :   5 
r8 :   2 r9 :   6 r10:   4 r11:   0 r12:   2 r13:   1 r14:   0 r15:   6 
r16:  34 r17:  34 r18:  41 r19:  24 r20:  30 r21:  72 r22:  69 r23:  65 
r24:  64 r25:  49 r26: 151 r27:  66 r28:  19 r29:   1 r30: 325 r31: 126 
x  :  23 y  : 244 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  32 add   :  21 
adiw  :  32 and   :   2 andi  :   7 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  25 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   6 brne  :  46 brpl  :   6 brsh  :   2 brtc  :   3 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   1 call  : 113 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  43 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   8 
cp    :  11 cpc   :   5 cpi   :  47 cpse  :   0 dec   :  13 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   6 jmp   :  25 ld    :  42 ldd   : 102 ldi   : 184 
lds   :  20 lpm   :  14 lsl   :  12 lsr   :   1 mov   :  47 movw  :  30 
mul   :  20 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   8 out   :  43 pop   :  28 push  :  27 rcall :  43 ret   :  61 
reti  :   2 rjmp  : 104 rol   :  32 ror   :   7 sbc   :  13 sbci  :   7 
sbi   :   5 sbic  :   3 sbis  :   1 sbiw  :  21 sbr   :   2 sbrc  :   2 
sbrs  :  13 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  95 std   :  31 sts   :  12 sub   :   6 subi  :  20 swap  :   1 
tst   :  17 wdr   :   1 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e94   3538    194   3732   16384  22.8%
[.dseg] 0x000060 0x00018d      0     45     45    1024   4.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
